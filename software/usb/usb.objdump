
usb.elf:     file format elf32-littlenios2
usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012498 memsz 0x00012498 flags r-x
    LOAD off    0x000134b8 vaddr 0x000124b8 paddr 0x00013fa4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a90 vaddr 0x00015a90 paddr 0x00015a90 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011810  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  00011a40  00011a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000124b8  00013fa4  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00015a90  00015a90  00015a90  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00015bf4  00015bf4  00014fa4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  09000000  09000000  00014fa4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014fa4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023716  00000000  00000000  00015ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  000395f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b928  00000000  00000000  000426be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039ff  00000000  00000000  0005036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b618  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070286  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00070289  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070295  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070296  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00070297  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007029b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007029f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000702a3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000702ae  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000702b9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000702c4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  000702cc  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1e  00000000  00000000  000702f9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007c2c2  00000000  00000000  00075217  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00011a40 l    d  .rodata	00000000 .rodata
000124b8 l    d  .rwdata	00000000 .rwdata
00015a90 l    d  .bss	00000000 .bss
00015bf4 l    d  .sdram	00000000 .sdram
09000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00015a90 l     O .bss	00000002 ctl_reg.3589
00015a92 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000121fe l     O .rodata	00000010 zeroes.4404
000047b0 l     F .text	000000bc __sbprintf
0001220e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000049c0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006518 l     F .text	00000008 __fp_unlock
0000652c l     F .text	0000019c __sinit.part.1
000066c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000124b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000128fc l     O .rwdata	00000020 lc_ctype_charset
000128dc l     O .rwdata	00000020 lc_message_charset
0001291c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012240 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009b9c l     F .text	000000fc __sprint_r.part.0
00012364 l     O .rodata	00000010 zeroes.4349
0000b1d8 l     F .text	000000bc __sbprintf
00012374 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f334 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f360 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f53c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013f94 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000faa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fbe4 l     F .text	00000034 alt_dev_reg
00012f04 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fec0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000100cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000109a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010e08 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010f68 l     F .text	0000003c alt_get_errno
00010fa4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015ac8 g     O .bss	00000004 alt_instruction_exception_handler
000091e0 g     F .text	00000074 _mprec_log10
000092cc g     F .text	0000008c __any_on
0000b78c g     F .text	00000054 _isatty_r
0001224c g     O .rodata	00000028 __mprec_tinytens
0000f740 g     F .text	0000007c alt_main
0000234c g     F .text	000000c0 _puts_r
00015af4 g     O .bss	00000100 alt_irq
0000b7e0 g     F .text	00000060 _lseek_r
00013fa4 g       *ABS*	00000000 __flash_rwdata_start
0000dbf8 g     F .text	00000088 .hidden __eqdf2
00015bf4 g       *ABS*	00000000 __alt_heap_start
00002310 g     F .text	0000003c printf
0000b9f8 g     F .text	0000009c _wcrtomb_r
00009a5c g     F .text	0000005c __sseek
00006878 g     F .text	00000010 __sinit
0000b8a0 g     F .text	00000140 __swbuf_r
0000734c g     F .text	0000007c _setlocale_r
000066d0 g     F .text	00000078 __sfmoreglue
0000f7e0 g     F .text	00000024 __malloc_unlock
000021e0 g     F .text	00000080 UsbGetRetryCnt
0000801c g     F .text	0000015c memmove
0000026c g     F .text	000000b0 IO_init
00006860 g     F .text	00000018 _cleanup
000082a0 g     F .text	000000a8 _Balloc
0000dc80 g     F .text	000000dc .hidden __gtdf2
00011390 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b730 g     F .text	0000005c _fstat_r
00015aac g     O .bss	00000004 errno
000099d8 g     F .text	00000008 __seofread
00015ab4 g     O .bss	00000004 alt_argv
0001bf64 g       *ABS*	00000000 _gp
0000fa78 g     F .text	00000030 usleep
00012d84 g     O .rwdata	00000180 alt_fd_list
000113b4 g     F .text	00000090 alt_find_dev
00007ed4 g     F .text	00000148 memcpy
00006520 g     F .text	0000000c _cleanup_r
0000f038 g     F .text	000000dc .hidden __floatsidf
00010eec g     F .text	0000007c alt_io_redirect
0000dd5c g     F .text	000000f4 .hidden __ltdf2
00011a40 g       *ABS*	00000000 __DTOR_END__
0000240c g     F .text	00000014 puts
00011610 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000098bc g     F .text	00000074 __fpclassifyd
0000913c g     F .text	000000a4 __ratio
0000b1bc g     F .text	0000001c __vfiprintf_internal
000102c4 g     F .text	0000021c altera_avalon_jtag_uart_read
000022e0 g     F .text	00000030 _printf_r
09000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000c898 g     F .text	00000064 .hidden __udivsi3
0000f490 g     F .text	000000ac isatty
0001229c g     O .rodata	000000c8 __mprec_tens
000073c8 g     F .text	0000000c __locale_charset
00015aa8 g     O .bss	00000004 __malloc_top_pad
0000186c g     F .text	00000268 UsbGetConfigDesc2
00013f6c g     O .rwdata	00000004 __mb_cur_max
000073f8 g     F .text	0000000c _localeconv_r
000086d4 g     F .text	0000003c __i2b
00006cfc g     F .text	000004c8 __sfvwrite_r
00009930 g     F .text	00000054 _sbrk_r
0000b840 g     F .text	00000060 _read_r
00013f8c g     O .rwdata	00000004 alt_max_fd
0000b424 g     F .text	000000f0 _fclose_r
000064e8 g     F .text	00000030 fflush
00015aa4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c97c g     F .text	000008ac .hidden __adddf3
00008ee4 g     F .text	0000010c __b2d
0000c1dc g     F .text	000005c4 .hidden __umoddi3
0000f664 g     F .text	000000dc lseek
00013f64 g     O .rwdata	00000004 _global_impure_ptr
00009358 g     F .text	00000564 _realloc_r
00015bf4 g       *ABS*	00000000 __bss_end
00010d18 g     F .text	000000f0 alt_iic_isr_register
00011288 g     F .text	00000108 alt_tick
0000bbe0 g     F .text	000005fc .hidden __udivdi3
0000b68c g     F .text	00000024 _fputwc_r
00012274 g     O .rodata	00000028 __mprec_bigtens
000084b8 g     F .text	00000104 __s2b
0000f114 g     F .text	000000a8 .hidden __floatunsidf
00008c24 g     F .text	00000060 __mcmp
000012bc g     F .text	00000100 UsbSetAddress
00006898 g     F .text	00000018 __fp_lock_all
00010ccc g     F .text	0000004c alt_ic_irq_enabled
000111ec g     F .text	0000009c alt_alarm_stop
00015abc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012d5c g     O .rwdata	00000028 alt_dev_null
00010988 g     F .text	00000020 alt_dcache_flush_all
000085bc g     F .text	00000068 __hi0bits
000003a4 g     F .text	00000080 IO_read
0000efb8 g     F .text	00000080 .hidden __fixdfsi
00013fa4 g       *ABS*	00000000 __ram_rwdata_end
00013f84 g     O .rwdata	00000008 alt_dev_list
0000fae4 g     F .text	00000100 write
000124b8 g       *ABS*	00000000 __ram_rodata_end
0000f39c g     F .text	000000b8 fstat
0000dd5c g     F .text	000000f4 .hidden __ledf2
00002260 g     F .text	00000080 UsbPrintMem
0000899c g     F .text	00000140 __pow5mult
00009cb0 g     F .text	0000150c ___vfiprintf_internal_r
00015a9c g     O .bss	00000004 __nlocale_changed
0000c8fc g     F .text	00000058 .hidden __umodsi3
00015bf4 g       *ABS*	00000000 end
0000fe00 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00011a40 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000f1bc g     F .text	00000064 .hidden __clzsi2
000104e0 g     F .text	00000224 altera_avalon_jtag_uart_write
00006888 g     F .text	00000004 __sfp_lock_acquire
00007df0 g     F .text	000000e4 memchr
000024b8 g     F .text	000022dc ___vfprintf_internal_r
00001bd4 g     F .text	00000100 UsbClassRequest
000069ec g     F .text	00000310 _free_r
000073d4 g     F .text	00000010 __locale_mb_cur_max
0001188c g     F .text	00000180 __call_exitprocs
00015a98 g     O .bss	00000004 __mlocale_changed
00013f70 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00015ac0 g     O .bss	00000004 _alt_tick_rate
00008adc g     F .text	00000148 __lshift
00015ac4 g     O .bss	00000004 _alt_nticks
0000f840 g     F .text	00000104 read
0000fc50 g     F .text	0000004c alt_sys_init
00011774 g     F .text	00000118 __register_exitproc
00008710 g     F .text	0000028c __multiply
0001016c g     F .text	00000068 altera_avalon_jtag_uart_close
0000c954 g     F .text	00000028 .hidden __mulsi3
000124b8 g       *ABS*	00000000 __ram_rwdata_start
00011a40 g       *ABS*	00000000 __ram_rodata_start
00015acc g     O .bss	00000028 __malloc_current_mallinfo
00008ff0 g     F .text	0000014c __d2b
000013bc g     F .text	00000148 UsbGetDeviceDesc1
0000fc9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001154c g     F .text	000000c4 alt_get_fd
00010830 g     F .text	00000158 alt_busy_sleep
0000b2f4 g     F .text	00000054 _close_r
000116f8 g     F .text	0000007c memcmp
0000fd5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015bf4 g       *ABS*	00000000 __alt_stack_base
0000fdac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000486c g     F .text	00000154 __swsetup_r
0000d228 g     F .text	000009d0 .hidden __divdf3
00006748 g     F .text	00000118 __sfp
00009254 g     F .text	00000078 __copybits
00012954 g     O .rwdata	00000408 __malloc_av_
00006894 g     F .text	00000004 __sinit_lock_release
0000de50 g     F .text	0000086c .hidden __muldf3
00009984 g     F .text	00000054 __sread
0000215c g     F .text	00000084 UsbWaitTDListDone
00011444 g     F .text	00000108 alt_find_file
000109e4 g     F .text	000000a4 alt_dev_llist_insert
0000f7bc g     F .text	00000024 __malloc_lock
0000f9c8 g     F .text	000000b0 sbrk
0000648c g     F .text	0000005c _fflush_r
0000b348 g     F .text	000000dc _calloc_r
00015a90 g       *ABS*	00000000 __bss_start
00008178 g     F .text	00000128 memset
00000424 g     F .text	00000d48 main
00015ab8 g     O .bss	00000004 alt_envp
00015aa0 g     O .bss	00000004 __malloc_max_total_mem
0000fcfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001ad4 g     F .text	00000100 UsbSetConfig
0000b9e0 g     F .text	00000018 __swbuf
00009ab8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000b514 g     F .text	00000014 fclose
00004be8 g     F .text	00001688 _dtoa_r
000075e4 g     F .text	0000080c _malloc_r
0000bb54 g     F .text	00000030 __ascii_wctomb
00013f90 g     O .rwdata	00000004 alt_errno
000071c4 g     F .text	000000c4 _fwalk
0000c7a0 g     F .text	00000084 .hidden __divsi3
000068c8 g     F .text	00000124 _malloc_trim_r
00001cd4 g     F .text	00000148 UsbGetHidDesc
00011a40 g       *ABS*	00000000 __CTOR_END__
00009ac0 g     F .text	000000dc strcmp
00011a40 g       *ABS*	00000000 __flash_rodata_start
00011a40 g       *ABS*	00000000 __DTOR_LIST__
0000dbf8 g     F .text	00000088 .hidden __nedf2
000011c4 g     F .text	00000044 UsbRead
0000fc18 g     F .text	00000038 alt_irq_init
0000f944 g     F .text	00000084 alt_release_fd
00012384 g     O .rodata	00000100 .hidden __clz_tab
00015a94 g     O .bss	00000004 _PathLocale
000116ac g     F .text	00000014 atexit
0000b294 g     F .text	00000060 _write_r
00007404 g     F .text	00000018 setlocale
00013f68 g     O .rwdata	00000004 _impure_ptr
00015ab0 g     O .bss	00000004 alt_argc
00006270 g     F .text	0000021c __sflush_r
00010ae8 g     F .text	00000060 _do_dtors
000073f0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008e80 g     F .text	00000064 __ulp
000068b0 g     F .text	00000018 __fp_unlock_all
00013f7c g     O .rwdata	00000008 alt_fs_list
00001e1c g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000741c g     F .text	0000000c localeconv
00010b68 g     F .text	00000050 alt_ic_isr_register
00013fa4 g       *ABS*	00000000 _edata
00015bf4 g       *ABS*	00000000 _end
0000116c g     F .text	00000058 UsbWrite
0000b528 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
000101d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010c40 g     F .text	0000008c alt_ic_irq_disable
000099e0 g     F .text	0000007c __swrite
00013f74 g     O .rwdata	00000004 __malloc_trim_threshold
000073e4 g     F .text	0000000c __locale_msgcharset
000116c0 g     F .text	00000038 exit
00007288 g     F .text	000000c4 _fwalk_reent
00008c84 g     F .text	000001fc __mdiff
0000c824 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000688c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000031c g     F .text	00000088 IO_write
00011a0c g     F .text	00000034 _exit
00010704 g     F .text	0000012c alt_alarm_start
00007428 g     F .text	000001bc __smakebuf_r
00002420 g     F .text	00000098 strlen
00011090 g     F .text	0000015c open
0000dc80 g     F .text	000000dc .hidden __gedf2
00013f78 g     O .rwdata	00000004 __wctomb
00009c98 g     F .text	00000018 __sprint_r
00010b48 g     F .text	00000020 alt_icache_flush_all
00013f98 g     O .rwdata	00000004 alt_priority_mask
00010bb8 g     F .text	00000088 alt_ic_irq_enable
00004794 g     F .text	0000001c __vfprintf_internal
0000bb84 g     F .text	0000005c _wctomb_r
0000e6bc g     F .text	000008fc .hidden __subdf3
00008624 g     F .text	000000b0 __lo0bits
000016dc g     F .text	00000190 UsbGetConfigDesc1
00013f9c g     O .rwdata	00000008 alt_alarm_list
00010a88 g     F .text	00000060 _do_ctors
00001208 g     F .text	000000b4 UsbSoftReset
0000ba94 g     F .text	000000c0 wcrtomb
0000f25c g     F .text	000000d8 close
00001504 g     F .text	000001d8 UsbGetDeviceDesc2
0000f5a4 g     F .text	00000084 alt_load
0000b6b0 g     F .text	00000080 fputwc
00006890 g     F .text	00000004 __sinit_lock_acquire
00008370 g     F .text	00000148 __multadd
00008348 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1096bd04 	addi	r2,r2,23284
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1096bd04 	addi	r2,r2,23284
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory2_0+0xf700012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d917 	ldw	r2,-25756(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d917 	ldw	r2,-25756(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6afd914 	ori	gp,gp,48996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	1096a414 	ori	r2,r2,23184

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d6fd14 	ori	r3,r3,23540

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_onchip_memory2_0+0xf7000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000f5a40 	call	f5a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f7400 	call	f740 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_onchip_memory2_0+0xf7000268>

0000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     26c:	deffff04 	addi	sp,sp,-4
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     278:	00820074 	movhi	r2,2049
     27c:	10a40404 	addi	r2,r2,-28656
     280:	00c00044 	movi	r3,1
     284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     288:	00820074 	movhi	r2,2049
     28c:	10a40804 	addi	r2,r2,-28640
     290:	00c00044 	movi	r3,1
     294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     298:	00820074 	movhi	r2,2049
     29c:	10a41004 	addi	r2,r2,-28608
     2a0:	00c00044 	movi	r3,1
     2a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2a8:	00820074 	movhi	r2,2049
     2ac:	10a40c04 	addi	r2,r2,-28624
     2b0:	00c00044 	movi	r3,1
     2b4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2b8:	00820074 	movhi	r2,2049
     2bc:	10a41804 	addi	r2,r2,-28576
     2c0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2c4:	00820074 	movhi	r2,2049
     2c8:	10a41404 	addi	r2,r2,-28592
     2cc:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2d0:	00820074 	movhi	r2,2049
     2d4:	10a40804 	addi	r2,r2,-28640
     2d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2dc:	00820074 	movhi	r2,2049
     2e0:	10a40404 	addi	r2,r2,-28656
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2e8:	00820074 	movhi	r2,2049
     2ec:	10a40404 	addi	r2,r2,-28656
     2f0:	00c00044 	movi	r3,1
     2f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     2f8:	00820074 	movhi	r2,2049
     2fc:	10a40804 	addi	r2,r2,-28640
     300:	00c00044 	movi	r3,1
     304:	10c00005 	stb	r3,0(r2)
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00104 	addi	sp,sp,4
     318:	f800283a 	ret

0000031c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     31c:	defffd04 	addi	sp,sp,-12
     320:	df000215 	stw	fp,8(sp)
     324:	df000204 	addi	fp,sp,8
     328:	2007883a 	mov	r3,r4
     32c:	2805883a 	mov	r2,r5
     330:	e0fffe05 	stb	r3,-8(fp)
     334:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
     338:	00820074 	movhi	r2,2049
     33c:	10a41804 	addi	r2,r2,-28576
     340:	e0fffe03 	ldbu	r3,-8(fp)
     344:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     348:	00820074 	movhi	r2,2049
     34c:	10a40804 	addi	r2,r2,-28640
     350:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     354:	00820074 	movhi	r2,2049
     358:	10a40c04 	addi	r2,r2,-28624
     35c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
     360:	00820074 	movhi	r2,2049
     364:	10a41404 	addi	r2,r2,-28592
     368:	e0ffff0b 	ldhu	r3,-4(fp)
     36c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
     370:	00820074 	movhi	r2,2049
     374:	10a40c04 	addi	r2,r2,-28624
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     380:	00820074 	movhi	r2,2049
     384:	10a40804 	addi	r2,r2,-28640
     388:	00c00044 	movi	r3,1
     38c:	10c00005 	stb	r3,0(r2)
}
     390:	0001883a 	nop
     394:	e037883a 	mov	sp,fp
     398:	df000017 	ldw	fp,0(sp)
     39c:	dec00104 	addi	sp,sp,4
     3a0:	f800283a 	ret

000003a4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3a4:	defffd04 	addi	sp,sp,-12
     3a8:	df000215 	stw	fp,8(sp)
     3ac:	df000204 	addi	fp,sp,8
     3b0:	2005883a 	mov	r2,r4
     3b4:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
		*otg_hpi_address = Address;
     3b8:	00820074 	movhi	r2,2049
     3bc:	10a41804 	addi	r2,r2,-28576
     3c0:	e0ffff03 	ldbu	r3,-4(fp)
     3c4:	10c00015 	stw	r3,0(r2)
		*otg_hpi_r = 0;
     3c8:	00820074 	movhi	r2,2049
     3cc:	10a41004 	addi	r2,r2,-28608
     3d0:	10000005 	stb	zero,0(r2)
		*otg_hpi_cs = 0;
     3d4:	00820074 	movhi	r2,2049
     3d8:	10a40804 	addi	r2,r2,-28640
     3dc:	10000005 	stb	zero,0(r2)
		temp = *otg_hpi_data;
     3e0:	00820074 	movhi	r2,2049
     3e4:	10a41404 	addi	r2,r2,-28592
     3e8:	10800017 	ldw	r2,0(r2)
     3ec:	e0bffe0d 	sth	r2,-8(fp)
		*otg_hpi_r = 1;
     3f0:	00820074 	movhi	r2,2049
     3f4:	10a41004 	addi	r2,r2,-28608
     3f8:	00c00044 	movi	r3,1
     3fc:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
     400:	00820074 	movhi	r2,2049
     404:	10a40804 	addi	r2,r2,-28640
     408:	00c00044 	movi	r3,1
     40c:	10c00005 	stb	r3,0(r2)
		//printf("%x\n",temp);
		return temp;
     410:	e0bffe0b 	ldhu	r2,-8(fp)
}
     414:	e037883a 	mov	sp,fp
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00104 	addi	sp,sp,4
     420:	f800283a 	ret

00000424 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     424:	defff904 	addi	sp,sp,-28
     428:	dfc00615 	stw	ra,24(sp)
     42c:	df000515 	stw	fp,20(sp)
     430:	df000504 	addi	fp,sp,20
	IO_init();
     434:	000026c0 	call	26c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
     438:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
     43c:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
     440:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
     444:	01000074 	movhi	r4,1
     448:	21069004 	addi	r4,r4,6720
     44c:	000240c0 	call	240c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     450:	00012080 	call	1208 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     454:	000b883a 	mov	r5,zero
     458:	01005104 	movi	r4,324
     45c:	000116c0 	call	116c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     460:	017fffd4 	movui	r5,65535
     464:	01302414 	movui	r4,49296
     468:	000116c0 	call	116c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     46c:	01409604 	movi	r5,600
     470:	01006d04 	movi	r4,436
     474:	000116c0 	call	116c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     478:	00811004 	movi	r2,1088
     47c:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     480:	e0bffb0b 	ldhu	r2,-20(fp)
     484:	100b883a 	mov	r5,r2
     488:	01005084 	movi	r4,322
     48c:	000116c0 	call	116c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     490:	00808404 	movi	r2,528
     494:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     498:	e0bffe0b 	ldhu	r2,-8(fp)
     49c:	100b883a 	mov	r5,r2
     4a0:	01302314 	movui	r4,49292
     4a4:	000116c0 	call	116c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     4a8:	000b883a 	mov	r5,zero
     4ac:	01007104 	movi	r4,452
     4b0:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     4b4:	000b883a 	mov	r5,zero
     4b8:	01007184 	movi	r4,454
     4bc:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     4c0:	000b883a 	mov	r5,zero
     4c4:	01007204 	movi	r4,456
     4c8:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     4cc:	000b883a 	mov	r5,zero
     4d0:	01007284 	movi	r4,458
     4d4:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     4d8:	000b883a 	mov	r5,zero
     4dc:	01007304 	movi	r4,460
     4e0:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     4e4:	000b883a 	mov	r5,zero
     4e8:	01007384 	movi	r4,462
     4ec:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     4f0:	000b883a 	mov	r5,zero
     4f4:	01007404 	movi	r4,464
     4f8:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     4fc:	000b883a 	mov	r5,zero
     500:	01007484 	movi	r4,466
     504:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     508:	000b883a 	mov	r5,zero
     50c:	01007504 	movi	r4,468
     510:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     514:	000b883a 	mov	r5,zero
     518:	01007584 	movi	r4,470
     51c:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     520:	000b883a 	mov	r5,zero
     524:	01007604 	movi	r4,472
     528:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     52c:	000b883a 	mov	r5,zero
     530:	01007684 	movi	r4,474
     534:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     538:	000b883a 	mov	r5,zero
     53c:	01007704 	movi	r4,476
     540:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     544:	000b883a 	mov	r5,zero
     548:	01007784 	movi	r4,478
     54c:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     550:	01401c84 	movi	r5,114
     554:	01007084 	movi	r4,450
     558:	000116c0 	call	116c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     55c:	01738054 	movui	r5,52737
     560:	01000044 	movi	r4,1
     564:	000031c0 	call	31c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     568:	0001883a 	nop
     56c:	010000c4 	movi	r4,3
     570:	00003a40 	call	3a4 <IO_read>
     574:	10bfffcc 	andi	r2,r2,65535
     578:	103ffc26 	beq	r2,zero,56c <__alt_mem_onchip_memory2_0+0xf700056c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     57c:	00000806 	br	5a0 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     580:	01000044 	movi	r4,1
     584:	00003a40 	call	3a4 <IO_read>
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	100b883a 	mov	r5,r2
     590:	01000074 	movhi	r4,1
     594:	21069604 	addi	r4,r4,6744
     598:	00023100 	call	2310 <printf>
		goto USB_HOT_PLUG;
     59c:	003fac06 	br	450 <__alt_mem_onchip_memory2_0+0xf7000450>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     5a0:	01000044 	movi	r4,1
     5a4:	00003a40 	call	3a4 <IO_read>
     5a8:	10bfffcc 	andi	r2,r2,65535
     5ac:	1083fb58 	cmpnei	r2,r2,4077
     5b0:	103ff31e 	bne	r2,zero,580 <__alt_mem_onchip_memory2_0+0xf7000580>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     5b4:	01000074 	movhi	r4,1
     5b8:	21069f04 	addi	r4,r4,6780
     5bc:	00023100 	call	2310 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     5c0:	01401d04 	movi	r5,116
     5c4:	01007084 	movi	r4,450
     5c8:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     5cc:	01400f04 	movi	r5,60
     5d0:	01007104 	movi	r4,452
     5d4:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     5d8:	000b883a 	mov	r5,zero
     5dc:	01007184 	movi	r4,454
     5e0:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     5e4:	000b883a 	mov	r5,zero
     5e8:	01007204 	movi	r4,456
     5ec:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     5f0:	000b883a 	mov	r5,zero
     5f4:	01007284 	movi	r4,458
     5f8:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     5fc:	000b883a 	mov	r5,zero
     600:	01007304 	movi	r4,460
     604:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     608:	000b883a 	mov	r5,zero
     60c:	01007384 	movi	r4,462
     610:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     614:	000b883a 	mov	r5,zero
     618:	01007404 	movi	r4,464
     61c:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     620:	000b883a 	mov	r5,zero
     624:	01007484 	movi	r4,466
     628:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     62c:	000b883a 	mov	r5,zero
     630:	01007504 	movi	r4,468
     634:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     638:	000b883a 	mov	r5,zero
     63c:	01007584 	movi	r4,470
     640:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     644:	000b883a 	mov	r5,zero
     648:	01007604 	movi	r4,472
     64c:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     650:	000b883a 	mov	r5,zero
     654:	01007684 	movi	r4,474
     658:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     65c:	000b883a 	mov	r5,zero
     660:	01007704 	movi	r4,476
     664:	000116c0 	call	116c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     668:	000b883a 	mov	r5,zero
     66c:	01007784 	movi	r4,478
     670:	000116c0 	call	116c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     674:	01738054 	movui	r5,52737
     678:	01000044 	movi	r4,1
     67c:	000031c0 	call	31c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     680:	0001883a 	nop
     684:	01000044 	movi	r4,1
     688:	00003a40 	call	3a4 <IO_read>
     68c:	10bfffcc 	andi	r2,r2,65535
     690:	1083fb58 	cmpnei	r2,r2,4077
     694:	10000826 	beq	r2,zero,6b8 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     698:	01000044 	movi	r4,1
     69c:	00003a40 	call	3a4 <IO_read>
     6a0:	10bfffcc 	andi	r2,r2,65535
     6a4:	100b883a 	mov	r5,r2
     6a8:	01000074 	movhi	r4,1
     6ac:	21069604 	addi	r4,r4,6744
     6b0:	00023100 	call	2310 <printf>
		goto USB_HOT_PLUG;
     6b4:	003f6606 	br	450 <__alt_mem_onchip_memory2_0+0xf7000450>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     6b8:	00b02284 	movi	r2,-16246
     6bc:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     6c0:	008c0004 	movi	r2,12288
     6c4:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     6c8:	00880004 	movi	r2,8192
     6cc:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
     6d0:	d0a6cb0b 	ldhu	r2,-25812(gp)
     6d4:	10bfffcc 	andi	r2,r2,65535
     6d8:	1009883a 	mov	r4,r2
     6dc:	00011c40 	call	11c4 <UsbRead>
     6e0:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
     6e4:	d0a6cb8b 	ldhu	r2,-25810(gp)
     6e8:	e0fffb0b 	ldhu	r3,-20(fp)
     6ec:	1884703a 	and	r2,r3,r2
     6f0:	10bfffcc 	andi	r2,r2,65535
     6f4:	1000351e 	bne	r2,zero,7cc <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     6f8:	e03ffbc5 	stb	zero,-17(fp)
     6fc:	00000f06 	br	73c <main+0x318>
		{
			usleep(5*1000);
     700:	0104e204 	movi	r4,5000
     704:	000fa780 	call	fa78 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     708:	d0a6cb0b 	ldhu	r2,-25812(gp)
     70c:	10bfffcc 	andi	r2,r2,65535
     710:	1009883a 	mov	r4,r2
     714:	00011c40 	call	11c4 <UsbRead>
     718:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
     71c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     720:	e0fffb0b 	ldhu	r3,-20(fp)
     724:	1884703a 	and	r2,r3,r2
     728:	10bfffcc 	andi	r2,r2,65535
     72c:	1000071e 	bne	r2,zero,74c <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     730:	e0bffbc3 	ldbu	r2,-17(fp)
     734:	10800044 	addi	r2,r2,1
     738:	e0bffbc5 	stb	r2,-17(fp)
     73c:	e0bffbc3 	ldbu	r2,-17(fp)
     740:	10800170 	cmpltui	r2,r2,5
     744:	103fee1e 	bne	r2,zero,700 <__alt_mem_onchip_memory2_0+0xf7000700>
     748:	00000106 	br	750 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     74c:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     750:	d0a6cb8b 	ldhu	r2,-25810(gp)
     754:	e0fffb0b 	ldhu	r3,-20(fp)
     758:	1884703a 	and	r2,r3,r2
     75c:	10bfffcc 	andi	r2,r2,65535
     760:	1000261e 	bne	r2,zero,7fc <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     764:	01000074 	movhi	r4,1
     768:	2106a304 	addi	r4,r4,6796
     76c:	000240c0 	call	240c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     770:	01000074 	movhi	r4,1
     774:	2106ad04 	addi	r4,r4,6836
     778:	000240c0 	call	240c <puts>
			while (!(usb_ctl_val & no_device))
     77c:	00000d06 	br	7b4 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     780:	d0a6cb0b 	ldhu	r2,-25812(gp)
     784:	10bfffcc 	andi	r2,r2,65535
     788:	1009883a 	mov	r4,r2
     78c:	00011c40 	call	11c4 <UsbRead>
     790:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
     794:	d0a6cb8b 	ldhu	r2,-25810(gp)
     798:	e0fffb0b 	ldhu	r3,-20(fp)
     79c:	1884703a 	and	r2,r3,r2
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	10000126 	beq	r2,zero,7ac <main+0x388>
					goto USB_HOT_PLUG;
     7a8:	003f2906 	br	450 <__alt_mem_onchip_memory2_0+0xf7000450>

				usleep(2000);
     7ac:	0101f404 	movi	r4,2000
     7b0:	000fa780 	call	fa78 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     7b4:	d0a6cb8b 	ldhu	r2,-25810(gp)
     7b8:	e0fffb0b 	ldhu	r3,-20(fp)
     7bc:	1884703a 	and	r2,r3,r2
     7c0:	10bfffcc 	andi	r2,r2,65535
     7c4:	103fee26 	beq	r2,zero,780 <__alt_mem_onchip_memory2_0+0xf7000780>
     7c8:	00000c06 	br	7fc <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     7cc:	e0fffb0b 	ldhu	r3,-20(fp)
     7d0:	e0bffc0b 	ldhu	r2,-16(fp)
     7d4:	1884703a 	and	r2,r3,r2
     7d8:	10bfffcc 	andi	r2,r2,65535
     7dc:	10000426 	beq	r2,zero,7f0 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     7e0:	01000074 	movhi	r4,1
     7e4:	2106b904 	addi	r4,r4,6884
     7e8:	000240c0 	call	240c <puts>
     7ec:	00000306 	br	7fc <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     7f0:	01000074 	movhi	r4,1
     7f4:	2106c004 	addi	r4,r4,6912
     7f8:	000240c0 	call	240c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     7fc:	00012bc0 	call	12bc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     800:	00000306 	br	810 <main+0x3ec>
	{
		UsbSetAddress();
     804:	00012bc0 	call	12bc <UsbSetAddress>
		usleep(10*1000);
     808:	0109c404 	movi	r4,10000
     80c:	000fa780 	call	fa78 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     810:	010000c4 	movi	r4,3
     814:	00003a40 	call	3a4 <IO_read>
     818:	10bfffcc 	andi	r2,r2,65535
     81c:	1080040c 	andi	r2,r2,16
     820:	103ff826 	beq	r2,zero,804 <__alt_mem_onchip_memory2_0+0xf7000804>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     824:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     828:	01414184 	movi	r5,1286
     82c:	01000084 	movi	r4,2
     830:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     834:	0009883a 	mov	r4,zero
     838:	00003a40 	call	3a4 <IO_read>
     83c:	10bfffcc 	andi	r2,r2,65535
     840:	100b883a 	mov	r5,r2
     844:	01000074 	movhi	r4,1
     848:	2106c704 	addi	r4,r4,6940
     84c:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     850:	01414204 	movi	r5,1288
     854:	01000084 	movi	r4,2
     858:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     85c:	0009883a 	mov	r4,zero
     860:	00003a40 	call	3a4 <IO_read>
     864:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     868:	e0bffb0b 	ldhu	r2,-20(fp)
     86c:	100b883a 	mov	r5,r2
     870:	01000074 	movhi	r4,1
     874:	2106d204 	addi	r4,r4,6984
     878:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     87c:	e0bffb0b 	ldhu	r2,-20(fp)
     880:	108000e0 	cmpeqi	r2,r2,3
     884:	1000031e 	bne	r2,zero,894 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
     888:	00021e00 	call	21e0 <UsbGetRetryCnt>
     88c:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
     890:	003eef06 	br	450 <__alt_mem_onchip_memory2_0+0xf7000450>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     894:	01000074 	movhi	r4,1
     898:	2106de04 	addi	r4,r4,7032
     89c:	000240c0 	call	240c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     8a0:	00013bc0 	call	13bc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8a4:	00000306 	br	8b4 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     8a8:	00013bc0 	call	13bc <UsbGetDeviceDesc1>
		usleep(10*1000);
     8ac:	0109c404 	movi	r4,10000
     8b0:	000fa780 	call	fa78 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8b4:	010000c4 	movi	r4,3
     8b8:	00003a40 	call	3a4 <IO_read>
     8bc:	10bfffcc 	andi	r2,r2,65535
     8c0:	1080040c 	andi	r2,r2,16
     8c4:	103ff826 	beq	r2,zero,8a8 <__alt_mem_onchip_memory2_0+0xf70008a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     8c8:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     8cc:	01414184 	movi	r5,1286
     8d0:	01000084 	movi	r4,2
     8d4:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     8d8:	0009883a 	mov	r4,zero
     8dc:	00003a40 	call	3a4 <IO_read>
     8e0:	10bfffcc 	andi	r2,r2,65535
     8e4:	100b883a 	mov	r5,r2
     8e8:	01000074 	movhi	r4,1
     8ec:	2106ed04 	addi	r4,r4,7092
     8f0:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     8f4:	01414204 	movi	r5,1288
     8f8:	01000084 	movi	r4,2
     8fc:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     900:	0009883a 	mov	r4,zero
     904:	00003a40 	call	3a4 <IO_read>
     908:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     90c:	e0bffb0b 	ldhu	r2,-20(fp)
     910:	100b883a 	mov	r5,r2
     914:	01000074 	movhi	r4,1
     918:	2106f804 	addi	r4,r4,7136
     91c:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     920:	00000206 	br	92c <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
     924:	00021e00 	call	21e0 <UsbGetRetryCnt>
     928:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     92c:	e0bffb0b 	ldhu	r2,-20(fp)
     930:	108000d8 	cmpnei	r2,r2,3
     934:	103ffb1e 	bne	r2,zero,924 <__alt_mem_onchip_memory2_0+0xf7000924>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     938:	01000074 	movhi	r4,1
     93c:	21070404 	addi	r4,r4,7184
     940:	000240c0 	call	240c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     944:	00015040 	call	1504 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     948:	00000306 	br	958 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     94c:	00015040 	call	1504 <UsbGetDeviceDesc2>
		usleep(10*1000);
     950:	0109c404 	movi	r4,10000
     954:	000fa780 	call	fa78 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     958:	010000c4 	movi	r4,3
     95c:	00003a40 	call	3a4 <IO_read>
     960:	10bfffcc 	andi	r2,r2,65535
     964:	1080040c 	andi	r2,r2,16
     968:	103ff826 	beq	r2,zero,94c <__alt_mem_onchip_memory2_0+0xf700094c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     96c:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     970:	01414184 	movi	r5,1286
     974:	01000084 	movi	r4,2
     978:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     97c:	0009883a 	mov	r4,zero
     980:	00003a40 	call	3a4 <IO_read>
     984:	10bfffcc 	andi	r2,r2,65535
     988:	100b883a 	mov	r5,r2
     98c:	01000074 	movhi	r4,1
     990:	2106ed04 	addi	r4,r4,7092
     994:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     998:	01414204 	movi	r5,1288
     99c:	01000084 	movi	r4,2
     9a0:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9a4:	0009883a 	mov	r4,zero
     9a8:	00003a40 	call	3a4 <IO_read>
     9ac:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     9b0:	e0bffb0b 	ldhu	r2,-20(fp)
     9b4:	100b883a 	mov	r5,r2
     9b8:	01000074 	movhi	r4,1
     9bc:	2106f804 	addi	r4,r4,7136
     9c0:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     9c4:	00000206 	br	9d0 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
     9c8:	00021e00 	call	21e0 <UsbGetRetryCnt>
     9cc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     9d0:	e0bffb0b 	ldhu	r2,-20(fp)
     9d4:	108000d8 	cmpnei	r2,r2,3
     9d8:	103ffb1e 	bne	r2,zero,9c8 <__alt_mem_onchip_memory2_0+0xf70009c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     9dc:	01000074 	movhi	r4,1
     9e0:	21071804 	addi	r4,r4,7264
     9e4:	000240c0 	call	240c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     9e8:	00016dc0 	call	16dc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9ec:	00000306 	br	9fc <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     9f0:	00016dc0 	call	16dc <UsbGetConfigDesc1>
		usleep(10*1000);
     9f4:	0109c404 	movi	r4,10000
     9f8:	000fa780 	call	fa78 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9fc:	010000c4 	movi	r4,3
     a00:	00003a40 	call	3a4 <IO_read>
     a04:	10bfffcc 	andi	r2,r2,65535
     a08:	1080040c 	andi	r2,r2,16
     a0c:	103ff826 	beq	r2,zero,9f0 <__alt_mem_onchip_memory2_0+0xf70009f0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a10:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a14:	01414184 	movi	r5,1286
     a18:	01000084 	movi	r4,2
     a1c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a20:	0009883a 	mov	r4,zero
     a24:	00003a40 	call	3a4 <IO_read>
     a28:	10bfffcc 	andi	r2,r2,65535
     a2c:	100b883a 	mov	r5,r2
     a30:	01000074 	movhi	r4,1
     a34:	21072a04 	addi	r4,r4,7336
     a38:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     a3c:	01414204 	movi	r5,1288
     a40:	01000084 	movi	r4,2
     a44:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a48:	0009883a 	mov	r4,zero
     a4c:	00003a40 	call	3a4 <IO_read>
     a50:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     a54:	e0bffb0b 	ldhu	r2,-20(fp)
     a58:	100b883a 	mov	r5,r2
     a5c:	01000074 	movhi	r4,1
     a60:	21073504 	addi	r4,r4,7380
     a64:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     a68:	00000206 	br	a74 <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a6c:	00021e00 	call	21e0 <UsbGetRetryCnt>
     a70:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     a74:	e0bffb0b 	ldhu	r2,-20(fp)
     a78:	108000d8 	cmpnei	r2,r2,3
     a7c:	103ffb1e 	bne	r2,zero,a6c <__alt_mem_onchip_memory2_0+0xf7000a6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     a80:	01000074 	movhi	r4,1
     a84:	21074104 	addi	r4,r4,7428
     a88:	000240c0 	call	240c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     a8c:	000186c0 	call	186c <UsbGetConfigDesc2>

	usleep(100*1000);
     a90:	010000b4 	movhi	r4,2
     a94:	2121a804 	addi	r4,r4,-31072
     a98:	000fa780 	call	fa78 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a9c:	00000306 	br	aac <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     aa0:	000186c0 	call	186c <UsbGetConfigDesc2>
		usleep(10*1000);
     aa4:	0109c404 	movi	r4,10000
     aa8:	000fa780 	call	fa78 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aac:	010000c4 	movi	r4,3
     ab0:	00003a40 	call	3a4 <IO_read>
     ab4:	10bfffcc 	andi	r2,r2,65535
     ab8:	1080040c 	andi	r2,r2,16
     abc:	103ff826 	beq	r2,zero,aa0 <__alt_mem_onchip_memory2_0+0xf7000aa0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ac0:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ac4:	01414184 	movi	r5,1286
     ac8:	01000084 	movi	r4,2
     acc:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ad0:	0009883a 	mov	r4,zero
     ad4:	00003a40 	call	3a4 <IO_read>
     ad8:	10bfffcc 	andi	r2,r2,65535
     adc:	100b883a 	mov	r5,r2
     ae0:	01000074 	movhi	r4,1
     ae4:	21075404 	addi	r4,r4,7504
     ae8:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     aec:	01414204 	movi	r5,1288
     af0:	01000084 	movi	r4,2
     af4:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     af8:	0009883a 	mov	r4,zero
     afc:	00003a40 	call	3a4 <IO_read>
     b00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     b04:	e0bffb0b 	ldhu	r2,-20(fp)
     b08:	100b883a 	mov	r5,r2
     b0c:	01000074 	movhi	r4,1
     b10:	21075f04 	addi	r4,r4,7548
     b14:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     b18:	00000206 	br	b24 <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b1c:	00021e00 	call	21e0 <UsbGetRetryCnt>
     b20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b24:	e0bffb0b 	ldhu	r2,-20(fp)
     b28:	108000d8 	cmpnei	r2,r2,3
     b2c:	103ffb1e 	bne	r2,zero,b1c <__alt_mem_onchip_memory2_0+0xf7000b1c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     b30:	01000074 	movhi	r4,1
     b34:	21076b04 	addi	r4,r4,7596
     b38:	000240c0 	call	240c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     b3c:	01415b04 	movi	r5,1388
     b40:	01000084 	movi	r4,2
     b44:	000031c0 	call	31c <IO_write>
	code = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003a40 	call	3a4 <IO_read>
     b50:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
     b54:	e0bffe8b 	ldhu	r2,-6(fp)
     b58:	108000cc 	andi	r2,r2,3
     b5c:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
     b60:	e0bffe8b 	ldhu	r2,-6(fp)
     b64:	100b883a 	mov	r5,r2
     b68:	01000074 	movhi	r4,1
     b6c:	21077e04 	addi	r4,r4,7672
     b70:	00023100 	call	2310 <printf>

	if (code == 0x01)
     b74:	e0bffe8b 	ldhu	r2,-6(fp)
     b78:	10800058 	cmpnei	r2,r2,1
     b7c:	1000041e 	bne	r2,zero,b90 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     b80:	01000074 	movhi	r4,1
     b84:	21078104 	addi	r4,r4,7684
     b88:	000240c0 	call	240c <puts>
     b8c:	00000306 	br	b9c <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     b90:	01000074 	movhi	r4,1
     b94:	21079004 	addi	r4,r4,7744
     b98:	000240c0 	call	240c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     b9c:	01415d84 	movi	r5,1398
     ba0:	01000084 	movi	r4,2
     ba4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x073F);
     ba8:	0141cfc4 	movi	r5,1855
     bac:	0009883a 	mov	r4,zero
     bb0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x8105);
     bb4:	01604154 	movui	r5,33029
     bb8:	0009883a 	mov	r4,zero
     bbc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);
     bc0:	014000c4 	movi	r5,3
     bc4:	0009883a 	mov	r4,zero
     bc8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
     bcc:	01400204 	movi	r5,8
     bd0:	0009883a 	mov	r4,zero
     bd4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     bd8:	016b0294 	movui	r5,44042
     bdc:	0009883a 	mov	r4,zero
     be0:	000031c0 	call	31c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     be4:	01415d84 	movi	r5,1398
     be8:	01006c04 	movi	r4,432
     bec:	000116c0 	call	116c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     bf0:	01415f04 	movi	r5,1404
     bf4:	01000084 	movi	r4,2
     bf8:	000031c0 	call	31c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     bfc:	0009883a 	mov	r4,zero
     c00:	00003a40 	call	3a4 <IO_read>
     c04:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     c08:	e0bfff03 	ldbu	r2,-4(fp)
     c0c:	100b883a 	mov	r5,r2
     c10:	01000074 	movhi	r4,1
     c14:	21079904 	addi	r4,r4,7780
     c18:	00023100 	call	2310 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     c1c:	0001ad40 	call	1ad4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c20:	00000306 	br	c30 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     c24:	0001ad40 	call	1ad4 <UsbSetConfig>
		usleep(10*1000);
     c28:	0109c404 	movi	r4,10000
     c2c:	000fa780 	call	fa78 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c30:	010000c4 	movi	r4,3
     c34:	00003a40 	call	3a4 <IO_read>
     c38:	10bfffcc 	andi	r2,r2,65535
     c3c:	1080040c 	andi	r2,r2,16
     c40:	103ff826 	beq	r2,zero,c24 <__alt_mem_onchip_memory2_0+0xf7000c24>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c44:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c48:	01414184 	movi	r5,1286
     c4c:	01000084 	movi	r4,2
     c50:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c54:	0009883a 	mov	r4,zero
     c58:	00003a40 	call	3a4 <IO_read>
     c5c:	10bfffcc 	andi	r2,r2,65535
     c60:	100b883a 	mov	r5,r2
     c64:	01000074 	movhi	r4,1
     c68:	2107a304 	addi	r4,r4,7820
     c6c:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     c70:	01414204 	movi	r5,1288
     c74:	01000084 	movi	r4,2
     c78:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c7c:	0009883a 	mov	r4,zero
     c80:	00003a40 	call	3a4 <IO_read>
     c84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     c88:	e0bffb0b 	ldhu	r2,-20(fp)
     c8c:	100b883a 	mov	r5,r2
     c90:	01000074 	movhi	r4,1
     c94:	2107ae04 	addi	r4,r4,7864
     c98:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     c9c:	00000206 	br	ca8 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ca0:	00021e00 	call	21e0 <UsbGetRetryCnt>
     ca4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     ca8:	e0bffb0b 	ldhu	r2,-20(fp)
     cac:	108000d8 	cmpnei	r2,r2,3
     cb0:	103ffb1e 	bne	r2,zero,ca0 <__alt_mem_onchip_memory2_0+0xf7000ca0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     cb4:	01000074 	movhi	r4,1
     cb8:	2107ba04 	addi	r4,r4,7912
     cbc:	000240c0 	call	240c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     cc0:	0001bd40 	call	1bd4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cc4:	00000306 	br	cd4 <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     cc8:	0001bd40 	call	1bd4 <UsbClassRequest>
		usleep(10*1000);
     ccc:	0109c404 	movi	r4,10000
     cd0:	000fa780 	call	fa78 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cd4:	010000c4 	movi	r4,3
     cd8:	00003a40 	call	3a4 <IO_read>
     cdc:	10bfffcc 	andi	r2,r2,65535
     ce0:	1080040c 	andi	r2,r2,16
     ce4:	103ff826 	beq	r2,zero,cc8 <__alt_mem_onchip_memory2_0+0xf7000cc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ce8:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     cec:	01414184 	movi	r5,1286
     cf0:	01000084 	movi	r4,2
     cf4:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cf8:	0009883a 	mov	r4,zero
     cfc:	00003a40 	call	3a4 <IO_read>
     d00:	10bfffcc 	andi	r2,r2,65535
     d04:	100b883a 	mov	r5,r2
     d08:	01000074 	movhi	r4,1
     d0c:	2107cc04 	addi	r4,r4,7984
     d10:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     d14:	01414204 	movi	r5,1288
     d18:	01000084 	movi	r4,2
     d1c:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d20:	0009883a 	mov	r4,zero
     d24:	00003a40 	call	3a4 <IO_read>
     d28:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     d2c:	e0bffb0b 	ldhu	r2,-20(fp)
     d30:	100b883a 	mov	r5,r2
     d34:	01000074 	movhi	r4,1
     d38:	2107d704 	addi	r4,r4,8028
     d3c:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     d40:	00000206 	br	d4c <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d44:	00021e00 	call	21e0 <UsbGetRetryCnt>
     d48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     d4c:	e0bffb0b 	ldhu	r2,-20(fp)
     d50:	108000d8 	cmpnei	r2,r2,3
     d54:	103ffb1e 	bne	r2,zero,d44 <__alt_mem_onchip_memory2_0+0xf7000d44>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     d58:	01000074 	movhi	r4,1
     d5c:	2107e304 	addi	r4,r4,8076
     d60:	000240c0 	call	240c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     d64:	0001cd40 	call	1cd4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d68:	00000306 	br	d78 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     d6c:	0001cd40 	call	1cd4 <UsbGetHidDesc>
		usleep(10*1000);
     d70:	0109c404 	movi	r4,10000
     d74:	000fa780 	call	fa78 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d78:	010000c4 	movi	r4,3
     d7c:	00003a40 	call	3a4 <IO_read>
     d80:	10bfffcc 	andi	r2,r2,65535
     d84:	1080040c 	andi	r2,r2,16
     d88:	103ff826 	beq	r2,zero,d6c <__alt_mem_onchip_memory2_0+0xf7000d6c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d8c:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d90:	01414184 	movi	r5,1286
     d94:	01000084 	movi	r4,2
     d98:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d9c:	0009883a 	mov	r4,zero
     da0:	00003a40 	call	3a4 <IO_read>
     da4:	10bfffcc 	andi	r2,r2,65535
     da8:	100b883a 	mov	r5,r2
     dac:	01000074 	movhi	r4,1
     db0:	2107cc04 	addi	r4,r4,7984
     db4:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     db8:	01414204 	movi	r5,1288
     dbc:	01000084 	movi	r4,2
     dc0:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     dc4:	0009883a 	mov	r4,zero
     dc8:	00003a40 	call	3a4 <IO_read>
     dcc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     dd0:	e0bffb0b 	ldhu	r2,-20(fp)
     dd4:	100b883a 	mov	r5,r2
     dd8:	01000074 	movhi	r4,1
     ddc:	2107d704 	addi	r4,r4,8028
     de0:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     de4:	00000206 	br	df0 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     de8:	00021e00 	call	21e0 <UsbGetRetryCnt>
     dec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     df0:	e0bffb0b 	ldhu	r2,-20(fp)
     df4:	108000d8 	cmpnei	r2,r2,3
     df8:	103ffb1e 	bne	r2,zero,de8 <__alt_mem_onchip_memory2_0+0xf7000de8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     dfc:	01000074 	movhi	r4,1
     e00:	2107f504 	addi	r4,r4,8148
     e04:	000240c0 	call	240c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     e08:	0001e1c0 	call	1e1c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e0c:	00000306 	br	e1c <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     e10:	0001e1c0 	call	1e1c <UsbGetReportDesc>
		usleep(10*1000);
     e14:	0109c404 	movi	r4,10000
     e18:	000fa780 	call	fa78 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e1c:	010000c4 	movi	r4,3
     e20:	00003a40 	call	3a4 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	1080040c 	andi	r2,r2,16
     e2c:	103ff826 	beq	r2,zero,e10 <__alt_mem_onchip_memory2_0+0xf7000e10>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e30:	000215c0 	call	215c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e34:	01414184 	movi	r5,1286
     e38:	01000084 	movi	r4,2
     e3c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e40:	0009883a 	mov	r4,zero
     e44:	00003a40 	call	3a4 <IO_read>
     e48:	10bfffcc 	andi	r2,r2,65535
     e4c:	100b883a 	mov	r5,r2
     e50:	01000074 	movhi	r4,1
     e54:	21080904 	addi	r4,r4,8228
     e58:	00023100 	call	2310 <printf>

	IO_write(HPI_ADDR,0x0508);
     e5c:	01414204 	movi	r5,1288
     e60:	01000084 	movi	r4,2
     e64:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e68:	0009883a 	mov	r4,zero
     e6c:	00003a40 	call	3a4 <IO_read>
     e70:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
     e74:	e0bffb0b 	ldhu	r2,-20(fp)
     e78:	100b883a 	mov	r5,r2
     e7c:	01000074 	movhi	r4,1
     e80:	21081504 	addi	r4,r4,8276
     e84:	00023100 	call	2310 <printf>
	while (usb_ctl_val != 0x03)
     e88:	00000206 	br	e94 <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e8c:	00021e00 	call	21e0 <UsbGetRetryCnt>
     e90:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e94:	e0bffb0b 	ldhu	r2,-20(fp)
     e98:	108000d8 	cmpnei	r2,r2,3
     e9c:	103ffb1e 	bne	r2,zero,e8c <__alt_mem_onchip_memory2_0+0xf7000e8c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
     ea0:	01000074 	movhi	r4,1
     ea4:	21082104 	addi	r4,r4,8324
     ea8:	000240c0 	call	240c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
     eac:	0109c404 	movi	r4,10000
     eb0:	000fa780 	call	fa78 <usleep>
	while(1)
	{
		toggle++;
     eb4:	e0bffb83 	ldbu	r2,-18(fp)
     eb8:	10800044 	addi	r2,r2,1
     ebc:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
     ec0:	01414004 	movi	r5,1280
     ec4:	01000084 	movi	r4,2
     ec8:	000031c0 	call	31c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     ecc:	01414704 	movi	r5,1308
     ed0:	0009883a 	mov	r4,zero
     ed4:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     ed8:	e0bfff03 	ldbu	r2,-4(fp)
     edc:	108003cc 	andi	r2,r2,15
     ee0:	100b883a 	mov	r5,r2
     ee4:	0009883a 	mov	r4,zero
     ee8:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     eec:	0140a444 	movi	r5,657
     ef0:	0009883a 	mov	r4,zero
     ef4:	000031c0 	call	31c <IO_write>
		if(toggle%2)
     ef8:	e0bffb83 	ldbu	r2,-18(fp)
     efc:	1080004c 	andi	r2,r2,1
     f00:	10803fcc 	andi	r2,r2,255
     f04:	10000426 	beq	r2,zero,f18 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     f08:	01400044 	movi	r5,1
     f0c:	0009883a 	mov	r4,zero
     f10:	000031c0 	call	31c <IO_write>
     f14:	00000306 	br	f24 <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     f18:	01401044 	movi	r5,65
     f1c:	0009883a 	mov	r4,zero
     f20:	000031c0 	call	31c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     f24:	014004c4 	movi	r5,19
     f28:	0009883a 	mov	r4,zero
     f2c:	000031c0 	call	31c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
     f30:	000b883a 	mov	r5,zero
     f34:	0009883a 	mov	r4,zero
     f38:	000031c0 	call	31c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     f3c:	01414004 	movi	r5,1280
     f40:	01006c04 	movi	r4,432
     f44:	000116c0 	call	116c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f48:	00002406 	br	fdc <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
     f4c:	01414004 	movi	r5,1280
     f50:	01000084 	movi	r4,2
     f54:	000031c0 	call	31c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
     f58:	01414704 	movi	r5,1308
     f5c:	0009883a 	mov	r4,zero
     f60:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
     f64:	e0bfff03 	ldbu	r2,-4(fp)
     f68:	108003cc 	andi	r2,r2,15
     f6c:	100b883a 	mov	r5,r2
     f70:	0009883a 	mov	r4,zero
     f74:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     f78:	0140a444 	movi	r5,657
     f7c:	0009883a 	mov	r4,zero
     f80:	000031c0 	call	31c <IO_write>
			if(toggle%2)
     f84:	e0bffb83 	ldbu	r2,-18(fp)
     f88:	1080004c 	andi	r2,r2,1
     f8c:	10803fcc 	andi	r2,r2,255
     f90:	10000426 	beq	r2,zero,fa4 <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
     f94:	01400044 	movi	r5,1
     f98:	0009883a 	mov	r4,zero
     f9c:	000031c0 	call	31c <IO_write>
     fa0:	00000306 	br	fb0 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
     fa4:	01401044 	movi	r5,65
     fa8:	0009883a 	mov	r4,zero
     fac:	000031c0 	call	31c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
     fb0:	014004c4 	movi	r5,19
     fb4:	0009883a 	mov	r4,zero
     fb8:	000031c0 	call	31c <IO_write>
			IO_write(HPI_DATA,0x0000);//
     fbc:	000b883a 	mov	r5,zero
     fc0:	0009883a 	mov	r4,zero
     fc4:	000031c0 	call	31c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     fc8:	01414004 	movi	r5,1280
     fcc:	01006c04 	movi	r4,432
     fd0:	000116c0 	call	116c <UsbWrite>
			usleep(10*1000);
     fd4:	0109c404 	movi	r4,10000
     fd8:	000fa780 	call	fa78 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fdc:	010000c4 	movi	r4,3
     fe0:	00003a40 	call	3a4 <IO_read>
     fe4:	10bfffcc 	andi	r2,r2,65535
     fe8:	1080040c 	andi	r2,r2,16
     fec:	103fd726 	beq	r2,zero,f4c <__alt_mem_onchip_memory2_0+0xf7000f4c>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
     ff0:	000215c0 	call	215c <UsbWaitTDListDone>
     ff4:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
     ff8:	01014784 	movi	r4,1310
     ffc:	00011c40 	call	11c4 <UsbRead>
    1000:	10bfffcc 	andi	r2,r2,65535
    1004:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
    1008:	e17ffd17 	ldw	r5,-12(fp)
    100c:	01000074 	movhi	r4,1
    1010:	21083504 	addi	r4,r4,8404
    1014:	00023100 	call	2310 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
    1018:	00820074 	movhi	r2,2049
    101c:	10a41c04 	addi	r2,r2,-28560
    1020:	e0fffd17 	ldw	r3,-12(fp)
    1024:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
    1028:	01003204 	movi	r4,200
    102c:	000fa780 	call	fa78 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
    1030:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1034:	10bfffcc 	andi	r2,r2,65535
    1038:	1009883a 	mov	r4,r2
    103c:	00011c40 	call	11c4 <UsbRead>
    1040:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
    1044:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1048:	e0fffb0b 	ldhu	r3,-20(fp)
    104c:	1884703a 	and	r2,r3,r2
    1050:	10bfffcc 	andi	r2,r2,65535
    1054:	10003f1e 	bne	r2,zero,1154 <main+0xd30>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    1058:	e03ffbc5 	stb	zero,-17(fp)
    105c:	00000f06 	br	109c <main+0xc78>
			{
				usleep(5*1000);
    1060:	0104e204 	movi	r4,5000
    1064:	000fa780 	call	fa78 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
    1068:	d0a6cb0b 	ldhu	r2,-25812(gp)
    106c:	10bfffcc 	andi	r2,r2,65535
    1070:	1009883a 	mov	r4,r2
    1074:	00011c40 	call	11c4 <UsbRead>
    1078:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
    107c:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1080:	e0fffb0b 	ldhu	r3,-20(fp)
    1084:	1884703a 	and	r2,r3,r2
    1088:	10bfffcc 	andi	r2,r2,65535
    108c:	1000071e 	bne	r2,zero,10ac <main+0xc88>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    1090:	e0bffbc3 	ldbu	r2,-17(fp)
    1094:	10800044 	addi	r2,r2,1
    1098:	e0bffbc5 	stb	r2,-17(fp)
    109c:	e0bffbc3 	ldbu	r2,-17(fp)
    10a0:	108001f0 	cmpltui	r2,r2,7
    10a4:	103fee1e 	bne	r2,zero,1060 <__alt_mem_onchip_memory2_0+0xf7001060>
    10a8:	00000106 	br	10b0 <main+0xc8c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
    10ac:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
    10b0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    10b4:	e0fffb0b 	ldhu	r3,-20(fp)
    10b8:	1884703a 	and	r2,r3,r2
    10bc:	10bfffcc 	andi	r2,r2,65535
    10c0:	1000241e 	bne	r2,zero,1154 <main+0xd30>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
    10c4:	01000074 	movhi	r4,1
    10c8:	21083e04 	addi	r4,r4,8440
    10cc:	000240c0 	call	240c <puts>
				printf("[INFO]: please insert again!!! \n");
    10d0:	01000074 	movhi	r4,1
    10d4:	21084904 	addi	r4,r4,8484
    10d8:	000240c0 	call	240c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
    10dc:	00001d06 	br	1154 <main+0xd30>
		{

			usb_ctl_val = UsbRead(ctl_reg);
    10e0:	d0a6cb0b 	ldhu	r2,-25812(gp)
    10e4:	10bfffcc 	andi	r2,r2,65535
    10e8:	1009883a 	mov	r4,r2
    10ec:	00011c40 	call	11c4 <UsbRead>
    10f0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    10f4:	0104e204 	movi	r4,5000
    10f8:	000fa780 	call	fa78 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    10fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1100:	10bfffcc 	andi	r2,r2,65535
    1104:	1009883a 	mov	r4,r2
    1108:	00011c40 	call	11c4 <UsbRead>
    110c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    1110:	0104e204 	movi	r4,5000
    1114:	000fa780 	call	fa78 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    1118:	d0a6cb0b 	ldhu	r2,-25812(gp)
    111c:	10bfffcc 	andi	r2,r2,65535
    1120:	1009883a 	mov	r4,r2
    1124:	00011c40 	call	11c4 <UsbRead>
    1128:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    112c:	0104e204 	movi	r4,5000
    1130:	000fa780 	call	fa78 <usleep>

			if(usb_ctl_val & no_device)
    1134:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1138:	e0fffb0b 	ldhu	r3,-20(fp)
    113c:	1884703a 	and	r2,r3,r2
    1140:	10bfffcc 	andi	r2,r2,65535
    1144:	10000126 	beq	r2,zero,114c <main+0xd28>
				goto USB_HOT_PLUG;
    1148:	003cc106 	br	450 <__alt_mem_onchip_memory2_0+0xf7000450>

			usleep(200);
    114c:	01003204 	movi	r4,200
    1150:	000fa780 	call	fa78 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
    1154:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1158:	e0fffb0b 	ldhu	r3,-20(fp)
    115c:	1884703a 	and	r2,r3,r2
    1160:	10bfffcc 	andi	r2,r2,65535
    1164:	103fde26 	beq	r2,zero,10e0 <__alt_mem_onchip_memory2_0+0xf70010e0>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
    1168:	003f5206 	br	eb4 <__alt_mem_onchip_memory2_0+0xf7000eb4>

0000116c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    116c:	defffc04 	addi	sp,sp,-16
    1170:	dfc00315 	stw	ra,12(sp)
    1174:	df000215 	stw	fp,8(sp)
    1178:	df000204 	addi	fp,sp,8
    117c:	2007883a 	mov	r3,r4
    1180:	2805883a 	mov	r2,r5
    1184:	e0fffe0d 	sth	r3,-8(fp)
    1188:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
		IO_write(HPI_ADDR, Address);
    118c:	e0bffe0b 	ldhu	r2,-8(fp)
    1190:	100b883a 	mov	r5,r2
    1194:	01000084 	movi	r4,2
    1198:	000031c0 	call	31c <IO_write>
		IO_write(HPI_DATA, Data);
    119c:	e0bfff0b 	ldhu	r2,-4(fp)
    11a0:	100b883a 	mov	r5,r2
    11a4:	0009883a 	mov	r4,zero
    11a8:	000031c0 	call	31c <IO_write>
}
    11ac:	0001883a 	nop
    11b0:	e037883a 	mov	sp,fp
    11b4:	dfc00117 	ldw	ra,4(sp)
    11b8:	df000017 	ldw	fp,0(sp)
    11bc:	dec00204 	addi	sp,sp,8
    11c0:	f800283a 	ret

000011c4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    11c4:	defffd04 	addi	sp,sp,-12
    11c8:	dfc00215 	stw	ra,8(sp)
    11cc:	df000115 	stw	fp,4(sp)
    11d0:	df000104 	addi	fp,sp,4
    11d4:	2005883a 	mov	r2,r4
    11d8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    11dc:	e0bfff0b 	ldhu	r2,-4(fp)
    11e0:	100b883a 	mov	r5,r2
    11e4:	01000084 	movi	r4,2
    11e8:	000031c0 	call	31c <IO_write>
	return IO_read(HPI_DATA);
    11ec:	0009883a 	mov	r4,zero
    11f0:	00003a40 	call	3a4 <IO_read>
}
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1208:	defffe04 	addi	sp,sp,-8
    120c:	dfc00115 	stw	ra,4(sp)
    1210:	df000015 	stw	fp,0(sp)
    1214:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1218:	017e9414 	movui	r5,64080
    121c:	01000044 	movi	r4,1
    1220:	000031c0 	call	31c <IO_write>
	usleep(100000);
    1224:	010000b4 	movhi	r4,2
    1228:	2121a804 	addi	r4,r4,-31072
    122c:	000fa780 	call	fa78 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1230:	01000074 	movhi	r4,1
    1234:	21085104 	addi	r4,r4,8516
    1238:	000240c0 	call	240c <puts>

	usleep(500000);
    123c:	01000234 	movhi	r4,8
    1240:	21284804 	addi	r4,r4,-24288
    1244:	000fa780 	call	fa78 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1248:	01000074 	movhi	r4,1
    124c:	21085804 	addi	r4,r4,8544
    1250:	000240c0 	call	240c <puts>
	IO_read(HPI_MAILBOX);
    1254:	01000044 	movi	r4,1
    1258:	00003a40 	call	3a4 <IO_read>
	IO_read(HPI_STATUS);
    125c:	010000c4 	movi	r4,3
    1260:	00003a40 	call	3a4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1264:	01005104 	movi	r4,324
    1268:	00011c40 	call	11c4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    126c:	000b883a 	mov	r5,zero
    1270:	01005104 	movi	r4,324
    1274:	000116c0 	call	116c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1278:	01005204 	movi	r4,328
    127c:	00011c40 	call	11c4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1280:	000b883a 	mov	r5,zero
    1284:	01005204 	movi	r4,328
    1288:	000116c0 	call	116c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    128c:	017fffd4 	movui	r5,65535
    1290:	01302414 	movui	r4,49296
    1294:	000116c0 	call	116c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1298:	017fffd4 	movui	r5,65535
    129c:	01302c14 	movui	r4,49328
    12a0:	000116c0 	call	116c <UsbWrite>
}
    12a4:	0001883a 	nop
    12a8:	e037883a 	mov	sp,fp
    12ac:	dfc00117 	ldw	ra,4(sp)
    12b0:	df000017 	ldw	fp,0(sp)
    12b4:	dec00204 	addi	sp,sp,8
    12b8:	f800283a 	ret

000012bc <UsbSetAddress>:


void UsbSetAddress()
{
    12bc:	defffe04 	addi	sp,sp,-8
    12c0:	dfc00115 	stw	ra,4(sp)
    12c4:	df000015 	stw	fp,0(sp)
    12c8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    12cc:	01414004 	movi	r5,1280
    12d0:	01000084 	movi	r4,2
    12d4:	000031c0 	call	31c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    12d8:	01414304 	movi	r5,1292
    12dc:	0009883a 	mov	r4,zero
    12e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    12e4:	01400204 	movi	r5,8
    12e8:	0009883a 	mov	r4,zero
    12ec:	000031c0 	call	31c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    12f0:	01403404 	movi	r5,208
    12f4:	0009883a 	mov	r4,zero
    12f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    12fc:	01400044 	movi	r5,1
    1300:	0009883a 	mov	r4,zero
    1304:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1308:	014004c4 	movi	r5,19
    130c:	0009883a 	mov	r4,zero
    1310:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1314:	01414504 	movi	r5,1300
    1318:	0009883a 	mov	r4,zero
    131c:	000031c0 	call	31c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1320:	01414004 	movi	r5,1280
    1324:	0009883a 	mov	r4,zero
    1328:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);
    132c:	01400084 	movi	r5,2
    1330:	0009883a 	mov	r4,zero
    1334:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1338:	000b883a 	mov	r5,zero
    133c:	0009883a 	mov	r4,zero
    1340:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1344:	000b883a 	mov	r5,zero
    1348:	0009883a 	mov	r4,zero
    134c:	000031c0 	call	31c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1350:	000b883a 	mov	r5,zero
    1354:	0009883a 	mov	r4,zero
    1358:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//
    135c:	000b883a 	mov	r5,zero
    1360:	0009883a 	mov	r4,zero
    1364:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1368:	01402404 	movi	r5,144
    136c:	0009883a 	mov	r4,zero
    1370:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1374:	01401044 	movi	r5,65
    1378:	0009883a 	mov	r4,zero
    137c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1380:	014004c4 	movi	r5,19
    1384:	0009883a 	mov	r4,zero
    1388:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    138c:	000b883a 	mov	r5,zero
    1390:	0009883a 	mov	r4,zero
    1394:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1398:	01414004 	movi	r5,1280
    139c:	01006c04 	movi	r4,432
    13a0:	000116c0 	call	116c <UsbWrite>
}
    13a4:	0001883a 	nop
    13a8:	e037883a 	mov	sp,fp
    13ac:	dfc00117 	ldw	ra,4(sp)
    13b0:	df000017 	ldw	fp,0(sp)
    13b4:	dec00204 	addi	sp,sp,8
    13b8:	f800283a 	ret

000013bc <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    13bc:	defffe04 	addi	sp,sp,-8
    13c0:	dfc00115 	stw	ra,4(sp)
    13c4:	df000015 	stw	fp,0(sp)
    13c8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    13cc:	01414004 	movi	r5,1280
    13d0:	01000084 	movi	r4,2
    13d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    13d8:	01414304 	movi	r5,1292
    13dc:	0009883a 	mov	r4,zero
    13e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    13e4:	01400204 	movi	r5,8
    13e8:	0009883a 	mov	r4,zero
    13ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    13f0:	0140b404 	movi	r5,720
    13f4:	0009883a 	mov	r4,zero
    13f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    13fc:	01400044 	movi	r5,1
    1400:	0009883a 	mov	r4,zero
    1404:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1408:	014004c4 	movi	r5,19
    140c:	0009883a 	mov	r4,zero
    1410:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1414:	01414504 	movi	r5,1300
    1418:	0009883a 	mov	r4,zero
    141c:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1420:	0141a004 	movi	r5,1664
    1424:	0009883a 	mov	r4,zero
    1428:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    142c:	01404004 	movi	r5,256
    1430:	0009883a 	mov	r4,zero
    1434:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1438:	000b883a 	mov	r5,zero
    143c:	0009883a 	mov	r4,zero
    1440:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
    1444:	01400204 	movi	r5,8
    1448:	0009883a 	mov	r4,zero
    144c:	000031c0 	call	31c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1450:	01414b04 	movi	r5,1324
    1454:	0009883a 	mov	r4,zero
    1458:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//
    145c:	01400204 	movi	r5,8
    1460:	0009883a 	mov	r4,zero
    1464:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1468:	0140a404 	movi	r5,656
    146c:	0009883a 	mov	r4,zero
    1470:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1474:	01401044 	movi	r5,65
    1478:	0009883a 	mov	r4,zero
    147c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1480:	014004c4 	movi	r5,19
    1484:	0009883a 	mov	r4,zero
    1488:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);
    148c:	01414804 	movi	r5,1312
    1490:	0009883a 	mov	r4,zero
    1494:	000031c0 	call	31c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1498:	000b883a 	mov	r5,zero
    149c:	0009883a 	mov	r4,zero
    14a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    14a4:	000b883a 	mov	r5,zero
    14a8:	0009883a 	mov	r4,zero
    14ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    14b0:	01408404 	movi	r5,528
    14b4:	0009883a 	mov	r4,zero
    14b8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    14bc:	01401044 	movi	r5,65
    14c0:	0009883a 	mov	r4,zero
    14c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    14c8:	014004c4 	movi	r5,19
    14cc:	0009883a 	mov	r4,zero
    14d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    14d4:	000b883a 	mov	r5,zero
    14d8:	0009883a 	mov	r4,zero
    14dc:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    14e0:	01414004 	movi	r5,1280
    14e4:	01006c04 	movi	r4,432
    14e8:	000116c0 	call	116c <UsbWrite>
}
    14ec:	0001883a 	nop
    14f0:	e037883a 	mov	sp,fp
    14f4:	dfc00117 	ldw	ra,4(sp)
    14f8:	df000017 	ldw	fp,0(sp)
    14fc:	dec00204 	addi	sp,sp,8
    1500:	f800283a 	ret

00001504 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1504:	defffe04 	addi	sp,sp,-8
    1508:	dfc00115 	stw	ra,4(sp)
    150c:	df000015 	stw	fp,0(sp)
    1510:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1514:	01414004 	movi	r5,1280
    1518:	01000084 	movi	r4,2
    151c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1520:	01414304 	movi	r5,1292
    1524:	0009883a 	mov	r4,zero
    1528:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    152c:	01400204 	movi	r5,8
    1530:	0009883a 	mov	r4,zero
    1534:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1538:	0140b404 	movi	r5,720
    153c:	0009883a 	mov	r4,zero
    1540:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1544:	01400044 	movi	r5,1
    1548:	0009883a 	mov	r4,zero
    154c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1550:	014004c4 	movi	r5,19
    1554:	0009883a 	mov	r4,zero
    1558:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    155c:	01414504 	movi	r5,1300
    1560:	0009883a 	mov	r4,zero
    1564:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1568:	0141a004 	movi	r5,1664
    156c:	0009883a 	mov	r4,zero
    1570:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1574:	01404004 	movi	r5,256
    1578:	0009883a 	mov	r4,zero
    157c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1580:	000b883a 	mov	r5,zero
    1584:	0009883a 	mov	r4,zero
    1588:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    158c:	01400484 	movi	r5,18
    1590:	0009883a 	mov	r4,zero
    1594:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1598:	01415104 	movi	r5,1348
    159c:	0009883a 	mov	r4,zero
    15a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    15a4:	01400204 	movi	r5,8
    15a8:	0009883a 	mov	r4,zero
    15ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    15b0:	0140a404 	movi	r5,656
    15b4:	0009883a 	mov	r4,zero
    15b8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    15bc:	01401044 	movi	r5,65
    15c0:	0009883a 	mov	r4,zero
    15c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    15c8:	014004c4 	movi	r5,19
    15cc:	0009883a 	mov	r4,zero
    15d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    15d4:	01414804 	movi	r5,1312
    15d8:	0009883a 	mov	r4,zero
    15dc:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    15e0:	01415304 	movi	r5,1356
    15e4:	0009883a 	mov	r4,zero
    15e8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    15ec:	01400204 	movi	r5,8
    15f0:	0009883a 	mov	r4,zero
    15f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    15f8:	0140a404 	movi	r5,656
    15fc:	0009883a 	mov	r4,zero
    1600:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1604:	01400044 	movi	r5,1
    1608:	0009883a 	mov	r4,zero
    160c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1610:	014004c4 	movi	r5,19
    1614:	0009883a 	mov	r4,zero
    1618:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    161c:	01414b04 	movi	r5,1324
    1620:	0009883a 	mov	r4,zero
    1624:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1628:	01415504 	movi	r5,1364
    162c:	0009883a 	mov	r4,zero
    1630:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1634:	01400084 	movi	r5,2
    1638:	0009883a 	mov	r4,zero
    163c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1640:	0140a404 	movi	r5,656
    1644:	0009883a 	mov	r4,zero
    1648:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    164c:	01401044 	movi	r5,65
    1650:	0009883a 	mov	r4,zero
    1654:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1658:	014004c4 	movi	r5,19
    165c:	0009883a 	mov	r4,zero
    1660:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1664:	01414e04 	movi	r5,1336
    1668:	0009883a 	mov	r4,zero
    166c:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1670:	000b883a 	mov	r5,zero
    1674:	0009883a 	mov	r4,zero
    1678:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    167c:	000b883a 	mov	r5,zero
    1680:	0009883a 	mov	r4,zero
    1684:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1688:	01408404 	movi	r5,528
    168c:	0009883a 	mov	r4,zero
    1690:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1694:	01401044 	movi	r5,65
    1698:	0009883a 	mov	r4,zero
    169c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    16a0:	014004c4 	movi	r5,19
    16a4:	0009883a 	mov	r4,zero
    16a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    16ac:	000b883a 	mov	r5,zero
    16b0:	0009883a 	mov	r4,zero
    16b4:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    16b8:	01414004 	movi	r5,1280
    16bc:	01006c04 	movi	r4,432
    16c0:	000116c0 	call	116c <UsbWrite>
}
    16c4:	0001883a 	nop
    16c8:	e037883a 	mov	sp,fp
    16cc:	dfc00117 	ldw	ra,4(sp)
    16d0:	df000017 	ldw	fp,0(sp)
    16d4:	dec00204 	addi	sp,sp,8
    16d8:	f800283a 	ret

000016dc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    16dc:	defffe04 	addi	sp,sp,-8
    16e0:	dfc00115 	stw	ra,4(sp)
    16e4:	df000015 	stw	fp,0(sp)
    16e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    16ec:	01414004 	movi	r5,1280
    16f0:	01000084 	movi	r4,2
    16f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    16f8:	01414304 	movi	r5,1292
    16fc:	0009883a 	mov	r4,zero
    1700:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1704:	01400204 	movi	r5,8
    1708:	0009883a 	mov	r4,zero
    170c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1710:	0140b404 	movi	r5,720
    1714:	0009883a 	mov	r4,zero
    1718:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    171c:	01400044 	movi	r5,1
    1720:	0009883a 	mov	r4,zero
    1724:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1728:	014004c4 	movi	r5,19
    172c:	0009883a 	mov	r4,zero
    1730:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1734:	01414504 	movi	r5,1300
    1738:	0009883a 	mov	r4,zero
    173c:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1740:	0141a004 	movi	r5,1664
    1744:	0009883a 	mov	r4,zero
    1748:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    174c:	01408004 	movi	r5,512
    1750:	0009883a 	mov	r4,zero
    1754:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1758:	000b883a 	mov	r5,zero
    175c:	0009883a 	mov	r4,zero
    1760:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1764:	01400244 	movi	r5,9
    1768:	0009883a 	mov	r4,zero
    176c:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1770:	01415104 	movi	r5,1348
    1774:	0009883a 	mov	r4,zero
    1778:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    177c:	01400204 	movi	r5,8
    1780:	0009883a 	mov	r4,zero
    1784:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1788:	0140a404 	movi	r5,656
    178c:	0009883a 	mov	r4,zero
    1790:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1794:	01401044 	movi	r5,65
    1798:	0009883a 	mov	r4,zero
    179c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    17a0:	014004c4 	movi	r5,19
    17a4:	0009883a 	mov	r4,zero
    17a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    17ac:	01414804 	movi	r5,1312
    17b0:	0009883a 	mov	r4,zero
    17b4:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    17b8:	01415304 	movi	r5,1356
    17bc:	0009883a 	mov	r4,zero
    17c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    17c4:	01400044 	movi	r5,1
    17c8:	0009883a 	mov	r4,zero
    17cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    17d0:	0140a404 	movi	r5,656
    17d4:	0009883a 	mov	r4,zero
    17d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    17dc:	01400044 	movi	r5,1
    17e0:	0009883a 	mov	r4,zero
    17e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    17e8:	014004c4 	movi	r5,19
    17ec:	0009883a 	mov	r4,zero
    17f0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    17f4:	01414b04 	movi	r5,1324
    17f8:	0009883a 	mov	r4,zero
    17fc:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1800:	000b883a 	mov	r5,zero
    1804:	0009883a 	mov	r4,zero
    1808:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    180c:	000b883a 	mov	r5,zero
    1810:	0009883a 	mov	r4,zero
    1814:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1818:	01408404 	movi	r5,528
    181c:	0009883a 	mov	r4,zero
    1820:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1824:	01401044 	movi	r5,65
    1828:	0009883a 	mov	r4,zero
    182c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1830:	014004c4 	movi	r5,19
    1834:	0009883a 	mov	r4,zero
    1838:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    183c:	000b883a 	mov	r5,zero
    1840:	0009883a 	mov	r4,zero
    1844:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1848:	01414004 	movi	r5,1280
    184c:	01006c04 	movi	r4,432
    1850:	000116c0 	call	116c <UsbWrite>
}
    1854:	0001883a 	nop
    1858:	e037883a 	mov	sp,fp
    185c:	dfc00117 	ldw	ra,4(sp)
    1860:	df000017 	ldw	fp,0(sp)
    1864:	dec00204 	addi	sp,sp,8
    1868:	f800283a 	ret

0000186c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    186c:	defffe04 	addi	sp,sp,-8
    1870:	dfc00115 	stw	ra,4(sp)
    1874:	df000015 	stw	fp,0(sp)
    1878:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    187c:	01414004 	movi	r5,1280
    1880:	01000084 	movi	r4,2
    1884:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1888:	01414304 	movi	r5,1292
    188c:	0009883a 	mov	r4,zero
    1890:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1894:	01400204 	movi	r5,8
    1898:	0009883a 	mov	r4,zero
    189c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    18a0:	0140b404 	movi	r5,720
    18a4:	0009883a 	mov	r4,zero
    18a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    18ac:	01400044 	movi	r5,1
    18b0:	0009883a 	mov	r4,zero
    18b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    18b8:	014004c4 	movi	r5,19
    18bc:	0009883a 	mov	r4,zero
    18c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    18c4:	01414504 	movi	r5,1300
    18c8:	0009883a 	mov	r4,zero
    18cc:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    18d0:	0141a004 	movi	r5,1664
    18d4:	0009883a 	mov	r4,zero
    18d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    18dc:	01408004 	movi	r5,512
    18e0:	0009883a 	mov	r4,zero
    18e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    18e8:	000b883a 	mov	r5,zero
    18ec:	0009883a 	mov	r4,zero
    18f0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    18f4:	01403fc4 	movi	r5,255
    18f8:	0009883a 	mov	r4,zero
    18fc:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1900:	01415704 	movi	r5,1372
    1904:	0009883a 	mov	r4,zero
    1908:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    190c:	01400204 	movi	r5,8
    1910:	0009883a 	mov	r4,zero
    1914:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1918:	0140a404 	movi	r5,656
    191c:	0009883a 	mov	r4,zero
    1920:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1924:	01401044 	movi	r5,65
    1928:	0009883a 	mov	r4,zero
    192c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1930:	014004c4 	movi	r5,19
    1934:	0009883a 	mov	r4,zero
    1938:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    193c:	01414804 	movi	r5,1312
    1940:	0009883a 	mov	r4,zero
    1944:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1948:	01415904 	movi	r5,1380
    194c:	0009883a 	mov	r4,zero
    1950:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1954:	01400204 	movi	r5,8
    1958:	0009883a 	mov	r4,zero
    195c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1960:	0140a404 	movi	r5,656
    1964:	0009883a 	mov	r4,zero
    1968:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    196c:	01400044 	movi	r5,1
    1970:	0009883a 	mov	r4,zero
    1974:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1978:	014004c4 	movi	r5,19
    197c:	0009883a 	mov	r4,zero
    1980:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1984:	01414b04 	movi	r5,1324
    1988:	0009883a 	mov	r4,zero
    198c:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1990:	01415b04 	movi	r5,1388
    1994:	0009883a 	mov	r4,zero
    1998:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    199c:	01400204 	movi	r5,8
    19a0:	0009883a 	mov	r4,zero
    19a4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    19a8:	0140a404 	movi	r5,656
    19ac:	0009883a 	mov	r4,zero
    19b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    19b4:	01401044 	movi	r5,65
    19b8:	0009883a 	mov	r4,zero
    19bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    19c0:	014004c4 	movi	r5,19
    19c4:	0009883a 	mov	r4,zero
    19c8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    19cc:	01414e04 	movi	r5,1336
    19d0:	0009883a 	mov	r4,zero
    19d4:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    19d8:	01415d04 	movi	r5,1396
    19dc:	0009883a 	mov	r4,zero
    19e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    19e4:	01400204 	movi	r5,8
    19e8:	0009883a 	mov	r4,zero
    19ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    19f0:	0140a404 	movi	r5,656
    19f4:	0009883a 	mov	r4,zero
    19f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    19fc:	01400044 	movi	r5,1
    1a00:	0009883a 	mov	r4,zero
    1a04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1a08:	014004c4 	movi	r5,19
    1a0c:	0009883a 	mov	r4,zero
    1a10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1a14:	01415104 	movi	r5,1348
    1a18:	0009883a 	mov	r4,zero
    1a1c:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    1a20:	01415f04 	movi	r5,1404
    1a24:	0009883a 	mov	r4,zero
    1a28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    1a2c:	01400084 	movi	r5,2
    1a30:	0009883a 	mov	r4,zero
    1a34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1a38:	0140a404 	movi	r5,656
    1a3c:	0009883a 	mov	r4,zero
    1a40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1a44:	01401044 	movi	r5,65
    1a48:	0009883a 	mov	r4,zero
    1a4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1a50:	014004c4 	movi	r5,19
    1a54:	0009883a 	mov	r4,zero
    1a58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1a5c:	01415404 	movi	r5,1360
    1a60:	0009883a 	mov	r4,zero
    1a64:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1a68:	000b883a 	mov	r5,zero
    1a6c:	0009883a 	mov	r4,zero
    1a70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1a74:	000b883a 	mov	r5,zero
    1a78:	0009883a 	mov	r4,zero
    1a7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1a80:	01408404 	movi	r5,528
    1a84:	0009883a 	mov	r4,zero
    1a88:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1a8c:	01401044 	movi	r5,65
    1a90:	0009883a 	mov	r4,zero
    1a94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1a98:	014004c4 	movi	r5,19
    1a9c:	0009883a 	mov	r4,zero
    1aa0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1aa4:	000b883a 	mov	r5,zero
    1aa8:	0009883a 	mov	r4,zero
    1aac:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ab0:	01414004 	movi	r5,1280
    1ab4:	01006c04 	movi	r4,432
    1ab8:	000116c0 	call	116c <UsbWrite>
}
    1abc:	0001883a 	nop
    1ac0:	e037883a 	mov	sp,fp
    1ac4:	dfc00117 	ldw	ra,4(sp)
    1ac8:	df000017 	ldw	fp,0(sp)
    1acc:	dec00204 	addi	sp,sp,8
    1ad0:	f800283a 	ret

00001ad4 <UsbSetConfig>:

void UsbSetConfig()
{
    1ad4:	defffe04 	addi	sp,sp,-8
    1ad8:	dfc00115 	stw	ra,4(sp)
    1adc:	df000015 	stw	fp,0(sp)
    1ae0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ae4:	01414004 	movi	r5,1280
    1ae8:	01000084 	movi	r4,2
    1aec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1af0:	01414304 	movi	r5,1292
    1af4:	0009883a 	mov	r4,zero
    1af8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1afc:	01400204 	movi	r5,8
    1b00:	0009883a 	mov	r4,zero
    1b04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1b08:	0140b404 	movi	r5,720
    1b0c:	0009883a 	mov	r4,zero
    1b10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1b14:	01400044 	movi	r5,1
    1b18:	0009883a 	mov	r4,zero
    1b1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b20:	014004c4 	movi	r5,19
    1b24:	0009883a 	mov	r4,zero
    1b28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1b2c:	01414504 	movi	r5,1300
    1b30:	0009883a 	mov	r4,zero
    1b34:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1b38:	01424004 	movi	r5,2304
    1b3c:	0009883a 	mov	r4,zero
    1b40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1b44:	01400044 	movi	r5,1
    1b48:	0009883a 	mov	r4,zero
    1b4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b50:	000b883a 	mov	r5,zero
    1b54:	0009883a 	mov	r4,zero
    1b58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b5c:	000b883a 	mov	r5,zero
    1b60:	0009883a 	mov	r4,zero
    1b64:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1b68:	000b883a 	mov	r5,zero
    1b6c:	0009883a 	mov	r4,zero
    1b70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b74:	000b883a 	mov	r5,zero
    1b78:	0009883a 	mov	r4,zero
    1b7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1b80:	0140a404 	movi	r5,656
    1b84:	0009883a 	mov	r4,zero
    1b88:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1b8c:	01401044 	movi	r5,65
    1b90:	0009883a 	mov	r4,zero
    1b94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b98:	014004c4 	movi	r5,19
    1b9c:	0009883a 	mov	r4,zero
    1ba0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ba4:	000b883a 	mov	r5,zero
    1ba8:	0009883a 	mov	r4,zero
    1bac:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1bb0:	01414004 	movi	r5,1280
    1bb4:	01006c04 	movi	r4,432
    1bb8:	000116c0 	call	116c <UsbWrite>

}
    1bbc:	0001883a 	nop
    1bc0:	e037883a 	mov	sp,fp
    1bc4:	dfc00117 	ldw	ra,4(sp)
    1bc8:	df000017 	ldw	fp,0(sp)
    1bcc:	dec00204 	addi	sp,sp,8
    1bd0:	f800283a 	ret

00001bd4 <UsbClassRequest>:

void UsbClassRequest()
{
    1bd4:	defffe04 	addi	sp,sp,-8
    1bd8:	dfc00115 	stw	ra,4(sp)
    1bdc:	df000015 	stw	fp,0(sp)
    1be0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1be4:	01414004 	movi	r5,1280
    1be8:	01000084 	movi	r4,2
    1bec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1bf0:	01414304 	movi	r5,1292
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1bfc:	01400204 	movi	r5,8
    1c00:	0009883a 	mov	r4,zero
    1c04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1c08:	0140b404 	movi	r5,720
    1c0c:	0009883a 	mov	r4,zero
    1c10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c14:	01400044 	movi	r5,1
    1c18:	0009883a 	mov	r4,zero
    1c1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c20:	014004c4 	movi	r5,19
    1c24:	0009883a 	mov	r4,zero
    1c28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c2c:	01414504 	movi	r5,1300
    1c30:	0009883a 	mov	r4,zero
    1c34:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1c38:	01428844 	movi	r5,2593
    1c3c:	0009883a 	mov	r4,zero
    1c40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1c44:	000b883a 	mov	r5,zero
    1c48:	0009883a 	mov	r4,zero
    1c4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c50:	000b883a 	mov	r5,zero
    1c54:	0009883a 	mov	r4,zero
    1c58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c5c:	000b883a 	mov	r5,zero
    1c60:	0009883a 	mov	r4,zero
    1c64:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1c68:	000b883a 	mov	r5,zero
    1c6c:	0009883a 	mov	r4,zero
    1c70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1c74:	000b883a 	mov	r5,zero
    1c78:	0009883a 	mov	r4,zero
    1c7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1c80:	0140a404 	movi	r5,656
    1c84:	0009883a 	mov	r4,zero
    1c88:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1c8c:	01401044 	movi	r5,65
    1c90:	0009883a 	mov	r4,zero
    1c94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c98:	014004c4 	movi	r5,19
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ca4:	000b883a 	mov	r5,zero
    1ca8:	0009883a 	mov	r4,zero
    1cac:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1cb0:	01414004 	movi	r5,1280
    1cb4:	01006c04 	movi	r4,432
    1cb8:	000116c0 	call	116c <UsbWrite>
}
    1cbc:	0001883a 	nop
    1cc0:	e037883a 	mov	sp,fp
    1cc4:	dfc00117 	ldw	ra,4(sp)
    1cc8:	df000017 	ldw	fp,0(sp)
    1ccc:	dec00204 	addi	sp,sp,8
    1cd0:	f800283a 	ret

00001cd4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1cd4:	defffe04 	addi	sp,sp,-8
    1cd8:	dfc00115 	stw	ra,4(sp)
    1cdc:	df000015 	stw	fp,0(sp)
    1ce0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ce4:	01414004 	movi	r5,1280
    1ce8:	01000084 	movi	r4,2
    1cec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1cf0:	01414304 	movi	r5,1292
    1cf4:	0009883a 	mov	r4,zero
    1cf8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1cfc:	01400204 	movi	r5,8
    1d00:	0009883a 	mov	r4,zero
    1d04:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1d08:	0140b404 	movi	r5,720
    1d0c:	0009883a 	mov	r4,zero
    1d10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d14:	01400044 	movi	r5,1
    1d18:	0009883a 	mov	r4,zero
    1d1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d20:	014004c4 	movi	r5,19
    1d24:	0009883a 	mov	r4,zero
    1d28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d2c:	01414504 	movi	r5,1300
    1d30:	0009883a 	mov	r4,zero
    1d34:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1d38:	0141a044 	movi	r5,1665
    1d3c:	0009883a 	mov	r4,zero
    1d40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1d44:	01484004 	movi	r5,8448
    1d48:	0009883a 	mov	r4,zero
    1d4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1d50:	000b883a 	mov	r5,zero
    1d54:	0009883a 	mov	r4,zero
    1d58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1d5c:	01401ec4 	movi	r5,123
    1d60:	0009883a 	mov	r4,zero
    1d64:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d68:	01415104 	movi	r5,1348
    1d6c:	0009883a 	mov	r4,zero
    1d70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1d74:	01400204 	movi	r5,8
    1d78:	0009883a 	mov	r4,zero
    1d7c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1d80:	0140a404 	movi	r5,656
    1d84:	0009883a 	mov	r4,zero
    1d88:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1d8c:	01401044 	movi	r5,65
    1d90:	0009883a 	mov	r4,zero
    1d94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1d98:	014004c4 	movi	r5,19
    1d9c:	0009883a 	mov	r4,zero
    1da0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1da4:	01414804 	movi	r5,1312
    1da8:	0009883a 	mov	r4,zero
    1dac:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1db0:	000b883a 	mov	r5,zero
    1db4:	0009883a 	mov	r4,zero
    1db8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1dbc:	000b883a 	mov	r5,zero
    1dc0:	0009883a 	mov	r4,zero
    1dc4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1dc8:	01408404 	movi	r5,528
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1dd4:	01401044 	movi	r5,65
    1dd8:	0009883a 	mov	r4,zero
    1ddc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1de0:	014004c4 	movi	r5,19
    1de4:	0009883a 	mov	r4,zero
    1de8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1dec:	000b883a 	mov	r5,zero
    1df0:	0009883a 	mov	r4,zero
    1df4:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1df8:	01414004 	movi	r5,1280
    1dfc:	01006c04 	movi	r4,432
    1e00:	000116c0 	call	116c <UsbWrite>

}
    1e04:	0001883a 	nop
    1e08:	e037883a 	mov	sp,fp
    1e0c:	dfc00117 	ldw	ra,4(sp)
    1e10:	df000017 	ldw	fp,0(sp)
    1e14:	dec00204 	addi	sp,sp,8
    1e18:	f800283a 	ret

00001e1c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1e1c:	defffe04 	addi	sp,sp,-8
    1e20:	dfc00115 	stw	ra,4(sp)
    1e24:	df000015 	stw	fp,0(sp)
    1e28:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1e2c:	01414004 	movi	r5,1280
    1e30:	01000084 	movi	r4,2
    1e34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1e38:	01414304 	movi	r5,1292
    1e3c:	0009883a 	mov	r4,zero
    1e40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1e44:	01400204 	movi	r5,8
    1e48:	0009883a 	mov	r4,zero
    1e4c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1e50:	0140b404 	movi	r5,720
    1e54:	0009883a 	mov	r4,zero
    1e58:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1e5c:	01400044 	movi	r5,1
    1e60:	0009883a 	mov	r4,zero
    1e64:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e68:	014004c4 	movi	r5,19
    1e6c:	0009883a 	mov	r4,zero
    1e70:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1e74:	01414504 	movi	r5,1300
    1e78:	0009883a 	mov	r4,zero
    1e7c:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1e80:	0141a044 	movi	r5,1665
    1e84:	0009883a 	mov	r4,zero
    1e88:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    1e8c:	01488004 	movi	r5,8704
    1e90:	0009883a 	mov	r4,zero
    1e94:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e98:	000b883a 	mov	r5,zero
    1e9c:	0009883a 	mov	r4,zero
    1ea0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1ea4:	01401ec4 	movi	r5,123
    1ea8:	0009883a 	mov	r4,zero
    1eac:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    1eb0:	01416004 	movi	r5,1408
    1eb4:	0009883a 	mov	r4,zero
    1eb8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1ebc:	01400204 	movi	r5,8
    1ec0:	0009883a 	mov	r4,zero
    1ec4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1ec8:	0140a404 	movi	r5,656
    1ecc:	0009883a 	mov	r4,zero
    1ed0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1ed4:	01401044 	movi	r5,65
    1ed8:	0009883a 	mov	r4,zero
    1edc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1ee0:	014004c4 	movi	r5,19
    1ee4:	0009883a 	mov	r4,zero
    1ee8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1eec:	01414804 	movi	r5,1312
    1ef0:	0009883a 	mov	r4,zero
    1ef4:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    1ef8:	01416204 	movi	r5,1416
    1efc:	0009883a 	mov	r4,zero
    1f00:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1f04:	01400204 	movi	r5,8
    1f08:	0009883a 	mov	r4,zero
    1f0c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1f10:	0140a404 	movi	r5,656
    1f14:	0009883a 	mov	r4,zero
    1f18:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1f1c:	01400044 	movi	r5,1
    1f20:	0009883a 	mov	r4,zero
    1f24:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f28:	014004c4 	movi	r5,19
    1f2c:	0009883a 	mov	r4,zero
    1f30:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1f34:	01414b04 	movi	r5,1324
    1f38:	0009883a 	mov	r4,zero
    1f3c:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    1f40:	01416404 	movi	r5,1424
    1f44:	0009883a 	mov	r4,zero
    1f48:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1f4c:	01400204 	movi	r5,8
    1f50:	0009883a 	mov	r4,zero
    1f54:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1f58:	0140a404 	movi	r5,656
    1f5c:	0009883a 	mov	r4,zero
    1f60:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1f64:	01401044 	movi	r5,65
    1f68:	0009883a 	mov	r4,zero
    1f6c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1f70:	014004c4 	movi	r5,19
    1f74:	0009883a 	mov	r4,zero
    1f78:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1f7c:	01414e04 	movi	r5,1336
    1f80:	0009883a 	mov	r4,zero
    1f84:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    1f88:	01416604 	movi	r5,1432
    1f8c:	0009883a 	mov	r4,zero
    1f90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1f94:	01400204 	movi	r5,8
    1f98:	0009883a 	mov	r4,zero
    1f9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1fa0:	0140a404 	movi	r5,656
    1fa4:	0009883a 	mov	r4,zero
    1fa8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1fac:	01400044 	movi	r5,1
    1fb0:	0009883a 	mov	r4,zero
    1fb4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1fb8:	014004c4 	movi	r5,19
    1fbc:	0009883a 	mov	r4,zero
    1fc0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1fc4:	01415104 	movi	r5,1348
    1fc8:	0009883a 	mov	r4,zero
    1fcc:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    1fd0:	01416804 	movi	r5,1440
    1fd4:	0009883a 	mov	r4,zero
    1fd8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1fdc:	01400204 	movi	r5,8
    1fe0:	0009883a 	mov	r4,zero
    1fe4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1fe8:	0140a404 	movi	r5,656
    1fec:	0009883a 	mov	r4,zero
    1ff0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1ff4:	01401044 	movi	r5,65
    1ff8:	0009883a 	mov	r4,zero
    1ffc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2000:	014004c4 	movi	r5,19
    2004:	0009883a 	mov	r4,zero
    2008:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    200c:	01415404 	movi	r5,1360
    2010:	0009883a 	mov	r4,zero
    2014:	000031c0 	call	31c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2018:	01416a04 	movi	r5,1448
    201c:	0009883a 	mov	r4,zero
    2020:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2024:	01400204 	movi	r5,8
    2028:	0009883a 	mov	r4,zero
    202c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2030:	0140a404 	movi	r5,656
    2034:	0009883a 	mov	r4,zero
    2038:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    203c:	01400044 	movi	r5,1
    2040:	0009883a 	mov	r4,zero
    2044:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2048:	014004c4 	movi	r5,19
    204c:	0009883a 	mov	r4,zero
    2050:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2054:	01415704 	movi	r5,1372
    2058:	0009883a 	mov	r4,zero
    205c:	000031c0 	call	31c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2060:	01416c04 	movi	r5,1456
    2064:	0009883a 	mov	r4,zero
    2068:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    206c:	01400204 	movi	r5,8
    2070:	0009883a 	mov	r4,zero
    2074:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2078:	0140a404 	movi	r5,656
    207c:	0009883a 	mov	r4,zero
    2080:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2084:	01401044 	movi	r5,65
    2088:	0009883a 	mov	r4,zero
    208c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2090:	014004c4 	movi	r5,19
    2094:	0009883a 	mov	r4,zero
    2098:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    209c:	01415a04 	movi	r5,1384
    20a0:	0009883a 	mov	r4,zero
    20a4:	000031c0 	call	31c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    20a8:	01416e04 	movi	r5,1464
    20ac:	0009883a 	mov	r4,zero
    20b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    20b4:	014000c4 	movi	r5,3
    20b8:	0009883a 	mov	r4,zero
    20bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    20c0:	0140a404 	movi	r5,656
    20c4:	0009883a 	mov	r4,zero
    20c8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    20cc:	01400044 	movi	r5,1
    20d0:	0009883a 	mov	r4,zero
    20d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    20d8:	014004c4 	movi	r5,19
    20dc:	0009883a 	mov	r4,zero
    20e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    20e4:	01415d04 	movi	r5,1396
    20e8:	0009883a 	mov	r4,zero
    20ec:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    20f0:	000b883a 	mov	r5,zero
    20f4:	0009883a 	mov	r4,zero
    20f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    20fc:	000b883a 	mov	r5,zero
    2100:	0009883a 	mov	r4,zero
    2104:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2108:	01408404 	movi	r5,528
    210c:	0009883a 	mov	r4,zero
    2110:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2114:	01401044 	movi	r5,65
    2118:	0009883a 	mov	r4,zero
    211c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2120:	014004c4 	movi	r5,19
    2124:	0009883a 	mov	r4,zero
    2128:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    212c:	000b883a 	mov	r5,zero
    2130:	0009883a 	mov	r4,zero
    2134:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2138:	01414004 	movi	r5,1280
    213c:	01006c04 	movi	r4,432
    2140:	000116c0 	call	116c <UsbWrite>

}
    2144:	0001883a 	nop
    2148:	e037883a 	mov	sp,fp
    214c:	dfc00117 	ldw	ra,4(sp)
    2150:	df000017 	ldw	fp,0(sp)
    2154:	dec00204 	addi	sp,sp,8
    2158:	f800283a 	ret

0000215c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    215c:	defffd04 	addi	sp,sp,-12
    2160:	dfc00215 	stw	ra,8(sp)
    2164:	df000115 	stw	fp,4(sp)
    2168:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    216c:	01005104 	movi	r4,324
    2170:	00011c40 	call	11c4 <UsbRead>
    2174:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2178:	000b883a 	mov	r5,zero
    217c:	01005104 	movi	r4,324
    2180:	000116c0 	call	116c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2184:	00000d06 	br	21bc <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2188:	e0bfff0b 	ldhu	r2,-4(fp)
    218c:	10000526 	beq	r2,zero,21a4 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2190:	e0bfff0b 	ldhu	r2,-4(fp)
    2194:	100b883a 	mov	r5,r2
    2198:	01000074 	movhi	r4,1
    219c:	21086104 	addi	r4,r4,8580
    21a0:	00023100 	call	2310 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    21a4:	01005104 	movi	r4,324
    21a8:	00011c40 	call	11c4 <UsbRead>
    21ac:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    21b0:	000b883a 	mov	r5,zero
    21b4:	01005104 	movi	r4,324
    21b8:	000116c0 	call	116c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    21bc:	e0bfff0b 	ldhu	r2,-4(fp)
    21c0:	10840018 	cmpnei	r2,r2,4096
    21c4:	103ff01e 	bne	r2,zero,2188 <__alt_mem_onchip_memory2_0+0xf7002188>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    21c8:	e0bfff0b 	ldhu	r2,-4(fp)
}
    21cc:	e037883a 	mov	sp,fp
    21d0:	dfc00117 	ldw	ra,4(sp)
    21d4:	df000017 	ldw	fp,0(sp)
    21d8:	dec00204 	addi	sp,sp,8
    21dc:	f800283a 	ret

000021e0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    21e0:	defffd04 	addi	sp,sp,-12
    21e4:	dfc00215 	stw	ra,8(sp)
    21e8:	df000115 	stw	fp,4(sp)
    21ec:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    21f0:	010000c4 	movi	r4,3
    21f4:	00003a40 	call	3a4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    21f8:	01005104 	movi	r4,324
    21fc:	00011c40 	call	11c4 <UsbRead>
    2200:	10bfffcc 	andi	r2,r2,65535
    2204:	10840018 	cmpnei	r2,r2,4096
    2208:	1000091e 	bne	r2,zero,2230 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    220c:	000b883a 	mov	r5,zero
    2210:	01005104 	movi	r4,324
    2214:	000116c0 	call	116c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2218:	0001883a 	nop
    221c:	010000c4 	movi	r4,3
    2220:	00003a40 	call	3a4 <IO_read>
    2224:	10bfffcc 	andi	r2,r2,65535
    2228:	1080040c 	andi	r2,r2,16
    222c:	103ffb26 	beq	r2,zero,221c <__alt_mem_onchip_memory2_0+0xf700221c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    2230:	01414204 	movi	r5,1288
    2234:	01000084 	movi	r4,2
    2238:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    223c:	0009883a 	mov	r4,zero
    2240:	00003a40 	call	3a4 <IO_read>
    2244:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2248:	e0bfff0b 	ldhu	r2,-4(fp)
}
    224c:	e037883a 	mov	sp,fp
    2250:	dfc00117 	ldw	ra,4(sp)
    2254:	df000017 	ldw	fp,0(sp)
    2258:	dec00204 	addi	sp,sp,8
    225c:	f800283a 	ret

00002260 <UsbPrintMem>:


void UsbPrintMem()
{
    2260:	defffc04 	addi	sp,sp,-16
    2264:	dfc00315 	stw	ra,12(sp)
    2268:	df000215 	stw	fp,8(sp)
    226c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2270:	01414004 	movi	r5,1280
    2274:	01000084 	movi	r4,2
    2278:	000031c0 	call	31c <IO_write>
	for (i = 0; i <= 200; i += 2)
    227c:	e03ffe15 	stw	zero,-8(fp)
    2280:	00000e06 	br	22bc <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2284:	0009883a 	mov	r4,zero
    2288:	00003a40 	call	3a4 <IO_read>
    228c:	10bfffcc 	andi	r2,r2,65535
    2290:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2294:	e0bffe17 	ldw	r2,-8(fp)
    2298:	10814004 	addi	r2,r2,1280
    229c:	e1bfff17 	ldw	r6,-4(fp)
    22a0:	100b883a 	mov	r5,r2
    22a4:	01000074 	movhi	r4,1
    22a8:	21086904 	addi	r4,r4,8612
    22ac:	00023100 	call	2310 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    22b0:	e0bffe17 	ldw	r2,-8(fp)
    22b4:	10800084 	addi	r2,r2,2
    22b8:	e0bffe15 	stw	r2,-8(fp)
    22bc:	e0bffe17 	ldw	r2,-8(fp)
    22c0:	10803250 	cmplti	r2,r2,201
    22c4:	103fef1e 	bne	r2,zero,2284 <__alt_mem_onchip_memory2_0+0xf7002284>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    22c8:	0001883a 	nop
    22cc:	e037883a 	mov	sp,fp
    22d0:	dfc00117 	ldw	ra,4(sp)
    22d4:	df000017 	ldw	fp,0(sp)
    22d8:	dec00204 	addi	sp,sp,8
    22dc:	f800283a 	ret

000022e0 <_printf_r>:
    22e0:	defffd04 	addi	sp,sp,-12
    22e4:	2805883a 	mov	r2,r5
    22e8:	dfc00015 	stw	ra,0(sp)
    22ec:	d9800115 	stw	r6,4(sp)
    22f0:	d9c00215 	stw	r7,8(sp)
    22f4:	21400217 	ldw	r5,8(r4)
    22f8:	d9c00104 	addi	r7,sp,4
    22fc:	100d883a 	mov	r6,r2
    2300:	00024b80 	call	24b8 <___vfprintf_internal_r>
    2304:	dfc00017 	ldw	ra,0(sp)
    2308:	dec00304 	addi	sp,sp,12
    230c:	f800283a 	ret

00002310 <printf>:
    2310:	defffc04 	addi	sp,sp,-16
    2314:	dfc00015 	stw	ra,0(sp)
    2318:	d9400115 	stw	r5,4(sp)
    231c:	d9800215 	stw	r6,8(sp)
    2320:	d9c00315 	stw	r7,12(sp)
    2324:	00800074 	movhi	r2,1
    2328:	108fda04 	addi	r2,r2,16232
    232c:	10800017 	ldw	r2,0(r2)
    2330:	200b883a 	mov	r5,r4
    2334:	d9800104 	addi	r6,sp,4
    2338:	11000217 	ldw	r4,8(r2)
    233c:	00047940 	call	4794 <__vfprintf_internal>
    2340:	dfc00017 	ldw	ra,0(sp)
    2344:	dec00404 	addi	sp,sp,16
    2348:	f800283a 	ret

0000234c <_puts_r>:
    234c:	defff604 	addi	sp,sp,-40
    2350:	dc000715 	stw	r16,28(sp)
    2354:	2021883a 	mov	r16,r4
    2358:	2809883a 	mov	r4,r5
    235c:	dc400815 	stw	r17,32(sp)
    2360:	dfc00915 	stw	ra,36(sp)
    2364:	2823883a 	mov	r17,r5
    2368:	00024200 	call	2420 <strlen>
    236c:	10c00044 	addi	r3,r2,1
    2370:	d8800115 	stw	r2,4(sp)
    2374:	00800074 	movhi	r2,1
    2378:	10886e04 	addi	r2,r2,8632
    237c:	d8800215 	stw	r2,8(sp)
    2380:	00800044 	movi	r2,1
    2384:	d8800315 	stw	r2,12(sp)
    2388:	00800084 	movi	r2,2
    238c:	dc400015 	stw	r17,0(sp)
    2390:	d8c00615 	stw	r3,24(sp)
    2394:	dec00415 	stw	sp,16(sp)
    2398:	d8800515 	stw	r2,20(sp)
    239c:	80000226 	beq	r16,zero,23a8 <_puts_r+0x5c>
    23a0:	80800e17 	ldw	r2,56(r16)
    23a4:	10001426 	beq	r2,zero,23f8 <_puts_r+0xac>
    23a8:	81400217 	ldw	r5,8(r16)
    23ac:	2880030b 	ldhu	r2,12(r5)
    23b0:	10c8000c 	andi	r3,r2,8192
    23b4:	1800061e 	bne	r3,zero,23d0 <_puts_r+0x84>
    23b8:	29001917 	ldw	r4,100(r5)
    23bc:	00f7ffc4 	movi	r3,-8193
    23c0:	10880014 	ori	r2,r2,8192
    23c4:	20c6703a 	and	r3,r4,r3
    23c8:	2880030d 	sth	r2,12(r5)
    23cc:	28c01915 	stw	r3,100(r5)
    23d0:	d9800404 	addi	r6,sp,16
    23d4:	8009883a 	mov	r4,r16
    23d8:	0006cfc0 	call	6cfc <__sfvwrite_r>
    23dc:	1000091e 	bne	r2,zero,2404 <_puts_r+0xb8>
    23e0:	00800284 	movi	r2,10
    23e4:	dfc00917 	ldw	ra,36(sp)
    23e8:	dc400817 	ldw	r17,32(sp)
    23ec:	dc000717 	ldw	r16,28(sp)
    23f0:	dec00a04 	addi	sp,sp,40
    23f4:	f800283a 	ret
    23f8:	8009883a 	mov	r4,r16
    23fc:	00068780 	call	6878 <__sinit>
    2400:	003fe906 	br	23a8 <__alt_mem_onchip_memory2_0+0xf70023a8>
    2404:	00bfffc4 	movi	r2,-1
    2408:	003ff606 	br	23e4 <__alt_mem_onchip_memory2_0+0xf70023e4>

0000240c <puts>:
    240c:	00800074 	movhi	r2,1
    2410:	108fda04 	addi	r2,r2,16232
    2414:	200b883a 	mov	r5,r4
    2418:	11000017 	ldw	r4,0(r2)
    241c:	000234c1 	jmpi	234c <_puts_r>

00002420 <strlen>:
    2420:	208000cc 	andi	r2,r4,3
    2424:	10002026 	beq	r2,zero,24a8 <strlen+0x88>
    2428:	20800007 	ldb	r2,0(r4)
    242c:	10002026 	beq	r2,zero,24b0 <strlen+0x90>
    2430:	2005883a 	mov	r2,r4
    2434:	00000206 	br	2440 <strlen+0x20>
    2438:	10c00007 	ldb	r3,0(r2)
    243c:	18001826 	beq	r3,zero,24a0 <strlen+0x80>
    2440:	10800044 	addi	r2,r2,1
    2444:	10c000cc 	andi	r3,r2,3
    2448:	183ffb1e 	bne	r3,zero,2438 <__alt_mem_onchip_memory2_0+0xf7002438>
    244c:	10c00017 	ldw	r3,0(r2)
    2450:	01ffbff4 	movhi	r7,65279
    2454:	39ffbfc4 	addi	r7,r7,-257
    2458:	00ca303a 	nor	r5,zero,r3
    245c:	01a02074 	movhi	r6,32897
    2460:	19c7883a 	add	r3,r3,r7
    2464:	31a02004 	addi	r6,r6,-32640
    2468:	1946703a 	and	r3,r3,r5
    246c:	1986703a 	and	r3,r3,r6
    2470:	1800091e 	bne	r3,zero,2498 <strlen+0x78>
    2474:	10800104 	addi	r2,r2,4
    2478:	10c00017 	ldw	r3,0(r2)
    247c:	19cb883a 	add	r5,r3,r7
    2480:	00c6303a 	nor	r3,zero,r3
    2484:	28c6703a 	and	r3,r5,r3
    2488:	1986703a 	and	r3,r3,r6
    248c:	183ff926 	beq	r3,zero,2474 <__alt_mem_onchip_memory2_0+0xf7002474>
    2490:	00000106 	br	2498 <strlen+0x78>
    2494:	10800044 	addi	r2,r2,1
    2498:	10c00007 	ldb	r3,0(r2)
    249c:	183ffd1e 	bne	r3,zero,2494 <__alt_mem_onchip_memory2_0+0xf7002494>
    24a0:	1105c83a 	sub	r2,r2,r4
    24a4:	f800283a 	ret
    24a8:	2005883a 	mov	r2,r4
    24ac:	003fe706 	br	244c <__alt_mem_onchip_memory2_0+0xf700244c>
    24b0:	0005883a 	mov	r2,zero
    24b4:	f800283a 	ret

000024b8 <___vfprintf_internal_r>:
    24b8:	deffb804 	addi	sp,sp,-288
    24bc:	dfc04715 	stw	ra,284(sp)
    24c0:	ddc04515 	stw	r23,276(sp)
    24c4:	dd404315 	stw	r21,268(sp)
    24c8:	d9002d15 	stw	r4,180(sp)
    24cc:	282f883a 	mov	r23,r5
    24d0:	302b883a 	mov	r21,r6
    24d4:	d9c02e15 	stw	r7,184(sp)
    24d8:	df004615 	stw	fp,280(sp)
    24dc:	dd804415 	stw	r22,272(sp)
    24e0:	dd004215 	stw	r20,264(sp)
    24e4:	dcc04115 	stw	r19,260(sp)
    24e8:	dc804015 	stw	r18,256(sp)
    24ec:	dc403f15 	stw	r17,252(sp)
    24f0:	dc003e15 	stw	r16,248(sp)
    24f4:	00073f80 	call	73f8 <_localeconv_r>
    24f8:	10800017 	ldw	r2,0(r2)
    24fc:	1009883a 	mov	r4,r2
    2500:	d8803415 	stw	r2,208(sp)
    2504:	00024200 	call	2420 <strlen>
    2508:	d8803715 	stw	r2,220(sp)
    250c:	d8802d17 	ldw	r2,180(sp)
    2510:	10000226 	beq	r2,zero,251c <___vfprintf_internal_r+0x64>
    2514:	10800e17 	ldw	r2,56(r2)
    2518:	1000fb26 	beq	r2,zero,2908 <___vfprintf_internal_r+0x450>
    251c:	b880030b 	ldhu	r2,12(r23)
    2520:	10c8000c 	andi	r3,r2,8192
    2524:	1800061e 	bne	r3,zero,2540 <___vfprintf_internal_r+0x88>
    2528:	b9001917 	ldw	r4,100(r23)
    252c:	00f7ffc4 	movi	r3,-8193
    2530:	10880014 	ori	r2,r2,8192
    2534:	20c6703a 	and	r3,r4,r3
    2538:	b880030d 	sth	r2,12(r23)
    253c:	b8c01915 	stw	r3,100(r23)
    2540:	10c0020c 	andi	r3,r2,8
    2544:	1800c326 	beq	r3,zero,2854 <___vfprintf_internal_r+0x39c>
    2548:	b8c00417 	ldw	r3,16(r23)
    254c:	1800c126 	beq	r3,zero,2854 <___vfprintf_internal_r+0x39c>
    2550:	1080068c 	andi	r2,r2,26
    2554:	00c00284 	movi	r3,10
    2558:	10c0c626 	beq	r2,r3,2874 <___vfprintf_internal_r+0x3bc>
    255c:	d8c00404 	addi	r3,sp,16
    2560:	05000074 	movhi	r20,1
    2564:	d9001e04 	addi	r4,sp,120
    2568:	a5087f84 	addi	r20,r20,8702
    256c:	d8c01e15 	stw	r3,120(sp)
    2570:	d8002015 	stw	zero,128(sp)
    2574:	d8001f15 	stw	zero,124(sp)
    2578:	d8003315 	stw	zero,204(sp)
    257c:	d8003615 	stw	zero,216(sp)
    2580:	d8003815 	stw	zero,224(sp)
    2584:	1811883a 	mov	r8,r3
    2588:	d8003915 	stw	zero,228(sp)
    258c:	d8003a15 	stw	zero,232(sp)
    2590:	d8002f15 	stw	zero,188(sp)
    2594:	d9002815 	stw	r4,160(sp)
    2598:	a8800007 	ldb	r2,0(r21)
    259c:	10028b26 	beq	r2,zero,2fcc <___vfprintf_internal_r+0xb14>
    25a0:	00c00944 	movi	r3,37
    25a4:	a823883a 	mov	r17,r21
    25a8:	10c0021e 	bne	r2,r3,25b4 <___vfprintf_internal_r+0xfc>
    25ac:	00001406 	br	2600 <___vfprintf_internal_r+0x148>
    25b0:	10c00326 	beq	r2,r3,25c0 <___vfprintf_internal_r+0x108>
    25b4:	8c400044 	addi	r17,r17,1
    25b8:	88800007 	ldb	r2,0(r17)
    25bc:	103ffc1e 	bne	r2,zero,25b0 <__alt_mem_onchip_memory2_0+0xf70025b0>
    25c0:	8d61c83a 	sub	r16,r17,r21
    25c4:	80000e26 	beq	r16,zero,2600 <___vfprintf_internal_r+0x148>
    25c8:	d8c02017 	ldw	r3,128(sp)
    25cc:	d8801f17 	ldw	r2,124(sp)
    25d0:	45400015 	stw	r21,0(r8)
    25d4:	1c07883a 	add	r3,r3,r16
    25d8:	10800044 	addi	r2,r2,1
    25dc:	d8c02015 	stw	r3,128(sp)
    25e0:	44000115 	stw	r16,4(r8)
    25e4:	d8801f15 	stw	r2,124(sp)
    25e8:	00c001c4 	movi	r3,7
    25ec:	1880a916 	blt	r3,r2,2894 <___vfprintf_internal_r+0x3dc>
    25f0:	42000204 	addi	r8,r8,8
    25f4:	d9402f17 	ldw	r5,188(sp)
    25f8:	2c0b883a 	add	r5,r5,r16
    25fc:	d9402f15 	stw	r5,188(sp)
    2600:	88800007 	ldb	r2,0(r17)
    2604:	1000aa26 	beq	r2,zero,28b0 <___vfprintf_internal_r+0x3f8>
    2608:	8d400044 	addi	r21,r17,1
    260c:	8c400047 	ldb	r17,1(r17)
    2610:	0021883a 	mov	r16,zero
    2614:	00bfffc4 	movi	r2,-1
    2618:	0025883a 	mov	r18,zero
    261c:	dc002905 	stb	r16,164(sp)
    2620:	d8002785 	stb	zero,158(sp)
    2624:	d8002b05 	stb	zero,172(sp)
    2628:	d8802a15 	stw	r2,168(sp)
    262c:	d8003115 	stw	zero,196(sp)
    2630:	04c01604 	movi	r19,88
    2634:	05800244 	movi	r22,9
    2638:	9021883a 	mov	r16,r18
    263c:	4039883a 	mov	fp,r8
    2640:	ad400044 	addi	r21,r21,1
    2644:	88bff804 	addi	r2,r17,-32
    2648:	98833236 	bltu	r19,r2,3314 <___vfprintf_internal_r+0xe5c>
    264c:	100490ba 	slli	r2,r2,2
    2650:	00c00034 	movhi	r3,0
    2654:	18c99904 	addi	r3,r3,9828
    2658:	10c5883a 	add	r2,r2,r3
    265c:	10800017 	ldw	r2,0(r2)
    2660:	1000683a 	jmp	r2
    2664:	0000320c 	andi	zero,zero,200
    2668:	00003314 	movui	zero,204
    266c:	00003314 	movui	zero,204
    2670:	0000322c 	andhi	zero,zero,200
    2674:	00003314 	movui	zero,204
    2678:	00003314 	movui	zero,204
    267c:	00003314 	movui	zero,204
    2680:	00003314 	movui	zero,204
    2684:	00003314 	movui	zero,204
    2688:	00003314 	movui	zero,204
    268c:	00002914 	movui	zero,164
    2690:	0000311c 	xori	zero,zero,196
    2694:	00003314 	movui	zero,204
    2698:	000027d8 	cmpnei	zero,zero,159
    269c:	00002938 	rdprs	zero,zero,164
    26a0:	00003314 	movui	zero,204
    26a4:	00002988 	cmpgei	zero,zero,166
    26a8:	00002994 	movui	zero,166
    26ac:	00002994 	movui	zero,166
    26b0:	00002994 	movui	zero,166
    26b4:	00002994 	movui	zero,166
    26b8:	00002994 	movui	zero,166
    26bc:	00002994 	movui	zero,166
    26c0:	00002994 	movui	zero,166
    26c4:	00002994 	movui	zero,166
    26c8:	00002994 	movui	zero,166
    26cc:	00003314 	movui	zero,204
    26d0:	00003314 	movui	zero,204
    26d4:	00003314 	movui	zero,204
    26d8:	00003314 	movui	zero,204
    26dc:	00003314 	movui	zero,204
    26e0:	00003314 	movui	zero,204
    26e4:	00003314 	movui	zero,204
    26e8:	00003314 	movui	zero,204
    26ec:	00003314 	movui	zero,204
    26f0:	00003314 	movui	zero,204
    26f4:	000029d0 	cmplti	zero,zero,167
    26f8:	00002a98 	cmpnei	zero,zero,170
    26fc:	00003314 	movui	zero,204
    2700:	00002a98 	cmpnei	zero,zero,170
    2704:	00003314 	movui	zero,204
    2708:	00003314 	movui	zero,204
    270c:	00003314 	movui	zero,204
    2710:	00003314 	movui	zero,204
    2714:	00002b44 	movi	zero,173
    2718:	00003314 	movui	zero,204
    271c:	00003314 	movui	zero,204
    2720:	00002b50 	cmplti	zero,zero,173
    2724:	00003314 	movui	zero,204
    2728:	00003314 	movui	zero,204
    272c:	00003314 	movui	zero,204
    2730:	00003314 	movui	zero,204
    2734:	00003314 	movui	zero,204
    2738:	00002fd4 	movui	zero,191
    273c:	00003314 	movui	zero,204
    2740:	00003314 	movui	zero,204
    2744:	00003040 	call	304 <IO_init+0x98>
    2748:	00003314 	movui	zero,204
    274c:	00003314 	movui	zero,204
    2750:	00003314 	movui	zero,204
    2754:	00003314 	movui	zero,204
    2758:	00003314 	movui	zero,204
    275c:	00003314 	movui	zero,204
    2760:	00003314 	movui	zero,204
    2764:	00003314 	movui	zero,204
    2768:	00003314 	movui	zero,204
    276c:	00003314 	movui	zero,204
    2770:	000032b8 	rdprs	zero,zero,202
    2774:	00003238 	rdprs	zero,zero,200
    2778:	00002a98 	cmpnei	zero,zero,170
    277c:	00002a98 	cmpnei	zero,zero,170
    2780:	00002a98 	cmpnei	zero,zero,170
    2784:	00003258 	cmpnei	zero,zero,201
    2788:	00003238 	rdprs	zero,zero,200
    278c:	00003314 	movui	zero,204
    2790:	00003314 	movui	zero,204
    2794:	00003264 	muli	zero,zero,201
    2798:	00003314 	movui	zero,204
    279c:	00003278 	rdprs	zero,zero,201
    27a0:	000030fc 	xorhi	zero,zero,195
    27a4:	000027e4 	muli	zero,zero,159
    27a8:	00003134 	movhi	zero,196
    27ac:	00003314 	movui	zero,204
    27b0:	00003140 	call	314 <IO_init+0xa8>
    27b4:	00003314 	movui	zero,204
    27b8:	000031a4 	muli	zero,zero,198
    27bc:	00003314 	movui	zero,204
    27c0:	00003314 	movui	zero,204
    27c4:	000031c4 	movi	zero,199
    27c8:	d8c03117 	ldw	r3,196(sp)
    27cc:	d8802e15 	stw	r2,184(sp)
    27d0:	00c7c83a 	sub	r3,zero,r3
    27d4:	d8c03115 	stw	r3,196(sp)
    27d8:	84000114 	ori	r16,r16,4
    27dc:	ac400007 	ldb	r17,0(r21)
    27e0:	003f9706 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    27e4:	00800c04 	movi	r2,48
    27e8:	d8802705 	stb	r2,156(sp)
    27ec:	00801e04 	movi	r2,120
    27f0:	d8802745 	stb	r2,157(sp)
    27f4:	d9002a17 	ldw	r4,168(sp)
    27f8:	d8802e17 	ldw	r2,184(sp)
    27fc:	d8002785 	stb	zero,158(sp)
    2800:	e011883a 	mov	r8,fp
    2804:	10c00104 	addi	r3,r2,4
    2808:	14c00017 	ldw	r19,0(r2)
    280c:	002d883a 	mov	r22,zero
    2810:	80800094 	ori	r2,r16,2
    2814:	2002ca16 	blt	r4,zero,3340 <___vfprintf_internal_r+0xe88>
    2818:	00bfdfc4 	movi	r2,-129
    281c:	80a4703a 	and	r18,r16,r2
    2820:	d8c02e15 	stw	r3,184(sp)
    2824:	94800094 	ori	r18,r18,2
    2828:	9802b41e 	bne	r19,zero,32fc <___vfprintf_internal_r+0xe44>
    282c:	01400074 	movhi	r5,1
    2830:	29487804 	addi	r5,r5,8672
    2834:	d9403915 	stw	r5,228(sp)
    2838:	04401e04 	movi	r17,120
    283c:	d8802a17 	ldw	r2,168(sp)
    2840:	0039883a 	mov	fp,zero
    2844:	1001fa26 	beq	r2,zero,3030 <___vfprintf_internal_r+0xb78>
    2848:	0027883a 	mov	r19,zero
    284c:	002d883a 	mov	r22,zero
    2850:	00021906 	br	30b8 <___vfprintf_internal_r+0xc00>
    2854:	d9002d17 	ldw	r4,180(sp)
    2858:	b80b883a 	mov	r5,r23
    285c:	000486c0 	call	486c <__swsetup_r>
    2860:	1005dc1e 	bne	r2,zero,3fd4 <___vfprintf_internal_r+0x1b1c>
    2864:	b880030b 	ldhu	r2,12(r23)
    2868:	00c00284 	movi	r3,10
    286c:	1080068c 	andi	r2,r2,26
    2870:	10ff3a1e 	bne	r2,r3,255c <__alt_mem_onchip_memory2_0+0xf700255c>
    2874:	b880038f 	ldh	r2,14(r23)
    2878:	103f3816 	blt	r2,zero,255c <__alt_mem_onchip_memory2_0+0xf700255c>
    287c:	d9c02e17 	ldw	r7,184(sp)
    2880:	d9002d17 	ldw	r4,180(sp)
    2884:	a80d883a 	mov	r6,r21
    2888:	b80b883a 	mov	r5,r23
    288c:	00047b00 	call	47b0 <__sbprintf>
    2890:	00001106 	br	28d8 <___vfprintf_internal_r+0x420>
    2894:	d9002d17 	ldw	r4,180(sp)
    2898:	d9801e04 	addi	r6,sp,120
    289c:	b80b883a 	mov	r5,r23
    28a0:	0009c980 	call	9c98 <__sprint_r>
    28a4:	1000081e 	bne	r2,zero,28c8 <___vfprintf_internal_r+0x410>
    28a8:	da000404 	addi	r8,sp,16
    28ac:	003f5106 	br	25f4 <__alt_mem_onchip_memory2_0+0xf70025f4>
    28b0:	d8802017 	ldw	r2,128(sp)
    28b4:	10000426 	beq	r2,zero,28c8 <___vfprintf_internal_r+0x410>
    28b8:	d9002d17 	ldw	r4,180(sp)
    28bc:	d9801e04 	addi	r6,sp,120
    28c0:	b80b883a 	mov	r5,r23
    28c4:	0009c980 	call	9c98 <__sprint_r>
    28c8:	b880030b 	ldhu	r2,12(r23)
    28cc:	1080100c 	andi	r2,r2,64
    28d0:	1005c01e 	bne	r2,zero,3fd4 <___vfprintf_internal_r+0x1b1c>
    28d4:	d8802f17 	ldw	r2,188(sp)
    28d8:	dfc04717 	ldw	ra,284(sp)
    28dc:	df004617 	ldw	fp,280(sp)
    28e0:	ddc04517 	ldw	r23,276(sp)
    28e4:	dd804417 	ldw	r22,272(sp)
    28e8:	dd404317 	ldw	r21,268(sp)
    28ec:	dd004217 	ldw	r20,264(sp)
    28f0:	dcc04117 	ldw	r19,260(sp)
    28f4:	dc804017 	ldw	r18,256(sp)
    28f8:	dc403f17 	ldw	r17,252(sp)
    28fc:	dc003e17 	ldw	r16,248(sp)
    2900:	dec04804 	addi	sp,sp,288
    2904:	f800283a 	ret
    2908:	d9002d17 	ldw	r4,180(sp)
    290c:	00068780 	call	6878 <__sinit>
    2910:	003f0206 	br	251c <__alt_mem_onchip_memory2_0+0xf700251c>
    2914:	d9002e17 	ldw	r4,184(sp)
    2918:	d9402e17 	ldw	r5,184(sp)
    291c:	21000017 	ldw	r4,0(r4)
    2920:	28800104 	addi	r2,r5,4
    2924:	d9003115 	stw	r4,196(sp)
    2928:	203fa716 	blt	r4,zero,27c8 <__alt_mem_onchip_memory2_0+0xf70027c8>
    292c:	d8802e15 	stw	r2,184(sp)
    2930:	ac400007 	ldb	r17,0(r21)
    2934:	003f4206 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    2938:	ac400007 	ldb	r17,0(r21)
    293c:	01000a84 	movi	r4,42
    2940:	a8c00044 	addi	r3,r21,1
    2944:	89075826 	beq	r17,r4,46a8 <___vfprintf_internal_r+0x21f0>
    2948:	8cbff404 	addi	r18,r17,-48
    294c:	b486ae36 	bltu	r22,r18,4408 <___vfprintf_internal_r+0x1f50>
    2950:	0009883a 	mov	r4,zero
    2954:	1823883a 	mov	r17,r3
    2958:	01400284 	movi	r5,10
    295c:	000c9540 	call	c954 <__mulsi3>
    2960:	88c00007 	ldb	r3,0(r17)
    2964:	1489883a 	add	r4,r2,r18
    2968:	8d400044 	addi	r21,r17,1
    296c:	1cbff404 	addi	r18,r3,-48
    2970:	a823883a 	mov	r17,r21
    2974:	b4bff82e 	bgeu	r22,r18,2958 <__alt_mem_onchip_memory2_0+0xf7002958>
    2978:	1823883a 	mov	r17,r3
    297c:	2005f616 	blt	r4,zero,4158 <___vfprintf_internal_r+0x1ca0>
    2980:	d9002a15 	stw	r4,168(sp)
    2984:	003f2f06 	br	2644 <__alt_mem_onchip_memory2_0+0xf7002644>
    2988:	84002014 	ori	r16,r16,128
    298c:	ac400007 	ldb	r17,0(r21)
    2990:	003f2b06 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    2994:	8cbff404 	addi	r18,r17,-48
    2998:	d8003115 	stw	zero,196(sp)
    299c:	0009883a 	mov	r4,zero
    29a0:	a823883a 	mov	r17,r21
    29a4:	01400284 	movi	r5,10
    29a8:	000c9540 	call	c954 <__mulsi3>
    29ac:	88c00007 	ldb	r3,0(r17)
    29b0:	9089883a 	add	r4,r18,r2
    29b4:	ad400044 	addi	r21,r21,1
    29b8:	1cbff404 	addi	r18,r3,-48
    29bc:	a823883a 	mov	r17,r21
    29c0:	b4bff82e 	bgeu	r22,r18,29a4 <__alt_mem_onchip_memory2_0+0xf70029a4>
    29c4:	1823883a 	mov	r17,r3
    29c8:	d9003115 	stw	r4,196(sp)
    29cc:	003f1d06 	br	2644 <__alt_mem_onchip_memory2_0+0xf7002644>
    29d0:	8025883a 	mov	r18,r16
    29d4:	dc002903 	ldbu	r16,164(sp)
    29d8:	e011883a 	mov	r8,fp
    29dc:	84003fcc 	andi	r16,r16,255
    29e0:	8007531e 	bne	r16,zero,4730 <___vfprintf_internal_r+0x2278>
    29e4:	94800414 	ori	r18,r18,16
    29e8:	9080080c 	andi	r2,r18,32
    29ec:	1003a326 	beq	r2,zero,387c <___vfprintf_internal_r+0x13c4>
    29f0:	d9002e17 	ldw	r4,184(sp)
    29f4:	20800117 	ldw	r2,4(r4)
    29f8:	24c00017 	ldw	r19,0(r4)
    29fc:	21000204 	addi	r4,r4,8
    2a00:	d9002e15 	stw	r4,184(sp)
    2a04:	102d883a 	mov	r22,r2
    2a08:	10047316 	blt	r2,zero,3bd8 <___vfprintf_internal_r+0x1720>
    2a0c:	d9002a17 	ldw	r4,168(sp)
    2a10:	df002783 	ldbu	fp,158(sp)
    2a14:	2003e416 	blt	r4,zero,39a8 <___vfprintf_internal_r+0x14f0>
    2a18:	00ffdfc4 	movi	r3,-129
    2a1c:	9d84b03a 	or	r2,r19,r22
    2a20:	90e4703a 	and	r18,r18,r3
    2a24:	10018026 	beq	r2,zero,3028 <___vfprintf_internal_r+0xb70>
    2a28:	b003ab26 	beq	r22,zero,38d8 <___vfprintf_internal_r+0x1420>
    2a2c:	dc402915 	stw	r17,164(sp)
    2a30:	dc001e04 	addi	r16,sp,120
    2a34:	b023883a 	mov	r17,r22
    2a38:	402d883a 	mov	r22,r8
    2a3c:	9809883a 	mov	r4,r19
    2a40:	880b883a 	mov	r5,r17
    2a44:	01800284 	movi	r6,10
    2a48:	000f883a 	mov	r7,zero
    2a4c:	000c1dc0 	call	c1dc <__umoddi3>
    2a50:	10800c04 	addi	r2,r2,48
    2a54:	843fffc4 	addi	r16,r16,-1
    2a58:	9809883a 	mov	r4,r19
    2a5c:	880b883a 	mov	r5,r17
    2a60:	80800005 	stb	r2,0(r16)
    2a64:	01800284 	movi	r6,10
    2a68:	000f883a 	mov	r7,zero
    2a6c:	000bbe00 	call	bbe0 <__udivdi3>
    2a70:	1027883a 	mov	r19,r2
    2a74:	10c4b03a 	or	r2,r2,r3
    2a78:	1823883a 	mov	r17,r3
    2a7c:	103fef1e 	bne	r2,zero,2a3c <__alt_mem_onchip_memory2_0+0xf7002a3c>
    2a80:	d8c02817 	ldw	r3,160(sp)
    2a84:	dc402917 	ldw	r17,164(sp)
    2a88:	b011883a 	mov	r8,r22
    2a8c:	1c07c83a 	sub	r3,r3,r16
    2a90:	d8c02b15 	stw	r3,172(sp)
    2a94:	00005f06 	br	2c14 <___vfprintf_internal_r+0x75c>
    2a98:	8025883a 	mov	r18,r16
    2a9c:	dc002903 	ldbu	r16,164(sp)
    2aa0:	e011883a 	mov	r8,fp
    2aa4:	84003fcc 	andi	r16,r16,255
    2aa8:	80071e1e 	bne	r16,zero,4724 <___vfprintf_internal_r+0x226c>
    2aac:	9080020c 	andi	r2,r18,8
    2ab0:	1004af26 	beq	r2,zero,3d70 <___vfprintf_internal_r+0x18b8>
    2ab4:	d9002e17 	ldw	r4,184(sp)
    2ab8:	d9402e17 	ldw	r5,184(sp)
    2abc:	d8802e17 	ldw	r2,184(sp)
    2ac0:	21000017 	ldw	r4,0(r4)
    2ac4:	29400117 	ldw	r5,4(r5)
    2ac8:	10800204 	addi	r2,r2,8
    2acc:	d9003615 	stw	r4,216(sp)
    2ad0:	d9403815 	stw	r5,224(sp)
    2ad4:	d8802e15 	stw	r2,184(sp)
    2ad8:	d9003617 	ldw	r4,216(sp)
    2adc:	d9403817 	ldw	r5,224(sp)
    2ae0:	da003d15 	stw	r8,244(sp)
    2ae4:	04000044 	movi	r16,1
    2ae8:	00098bc0 	call	98bc <__fpclassifyd>
    2aec:	da003d17 	ldw	r8,244(sp)
    2af0:	1404441e 	bne	r2,r16,3c04 <___vfprintf_internal_r+0x174c>
    2af4:	d9003617 	ldw	r4,216(sp)
    2af8:	d9403817 	ldw	r5,224(sp)
    2afc:	000d883a 	mov	r6,zero
    2b00:	000f883a 	mov	r7,zero
    2b04:	000dd5c0 	call	dd5c <__ledf2>
    2b08:	da003d17 	ldw	r8,244(sp)
    2b0c:	1005e316 	blt	r2,zero,429c <___vfprintf_internal_r+0x1de4>
    2b10:	df002783 	ldbu	fp,158(sp)
    2b14:	008011c4 	movi	r2,71
    2b18:	1445580e 	bge	r2,r17,407c <___vfprintf_internal_r+0x1bc4>
    2b1c:	04000074 	movhi	r16,1
    2b20:	84087004 	addi	r16,r16,8640
    2b24:	00c000c4 	movi	r3,3
    2b28:	00bfdfc4 	movi	r2,-129
    2b2c:	d8c02915 	stw	r3,164(sp)
    2b30:	90a4703a 	and	r18,r18,r2
    2b34:	d8c02b15 	stw	r3,172(sp)
    2b38:	d8002a15 	stw	zero,168(sp)
    2b3c:	d8003215 	stw	zero,200(sp)
    2b40:	00003a06 	br	2c2c <___vfprintf_internal_r+0x774>
    2b44:	84000214 	ori	r16,r16,8
    2b48:	ac400007 	ldb	r17,0(r21)
    2b4c:	003ebc06 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    2b50:	8025883a 	mov	r18,r16
    2b54:	dc002903 	ldbu	r16,164(sp)
    2b58:	e011883a 	mov	r8,fp
    2b5c:	84003fcc 	andi	r16,r16,255
    2b60:	8007001e 	bne	r16,zero,4764 <___vfprintf_internal_r+0x22ac>
    2b64:	94800414 	ori	r18,r18,16
    2b68:	9080080c 	andi	r2,r18,32
    2b6c:	1002fa26 	beq	r2,zero,3758 <___vfprintf_internal_r+0x12a0>
    2b70:	d9002e17 	ldw	r4,184(sp)
    2b74:	d9402a17 	ldw	r5,168(sp)
    2b78:	d8002785 	stb	zero,158(sp)
    2b7c:	20800204 	addi	r2,r4,8
    2b80:	24c00017 	ldw	r19,0(r4)
    2b84:	25800117 	ldw	r22,4(r4)
    2b88:	2804b116 	blt	r5,zero,3e50 <___vfprintf_internal_r+0x1998>
    2b8c:	013fdfc4 	movi	r4,-129
    2b90:	9d86b03a 	or	r3,r19,r22
    2b94:	d8802e15 	stw	r2,184(sp)
    2b98:	9124703a 	and	r18,r18,r4
    2b9c:	1802fb1e 	bne	r3,zero,378c <___vfprintf_internal_r+0x12d4>
    2ba0:	d8c02a17 	ldw	r3,168(sp)
    2ba4:	0039883a 	mov	fp,zero
    2ba8:	1805e526 	beq	r3,zero,4340 <___vfprintf_internal_r+0x1e88>
    2bac:	0027883a 	mov	r19,zero
    2bb0:	002d883a 	mov	r22,zero
    2bb4:	dc001e04 	addi	r16,sp,120
    2bb8:	9806d0fa 	srli	r3,r19,3
    2bbc:	b008977a 	slli	r4,r22,29
    2bc0:	b02cd0fa 	srli	r22,r22,3
    2bc4:	9cc001cc 	andi	r19,r19,7
    2bc8:	98800c04 	addi	r2,r19,48
    2bcc:	843fffc4 	addi	r16,r16,-1
    2bd0:	20e6b03a 	or	r19,r4,r3
    2bd4:	80800005 	stb	r2,0(r16)
    2bd8:	9d86b03a 	or	r3,r19,r22
    2bdc:	183ff61e 	bne	r3,zero,2bb8 <__alt_mem_onchip_memory2_0+0xf7002bb8>
    2be0:	90c0004c 	andi	r3,r18,1
    2be4:	18014126 	beq	r3,zero,30ec <___vfprintf_internal_r+0xc34>
    2be8:	10803fcc 	andi	r2,r2,255
    2bec:	1080201c 	xori	r2,r2,128
    2bf0:	10bfe004 	addi	r2,r2,-128
    2bf4:	00c00c04 	movi	r3,48
    2bf8:	10c13c26 	beq	r2,r3,30ec <___vfprintf_internal_r+0xc34>
    2bfc:	80ffffc5 	stb	r3,-1(r16)
    2c00:	d8c02817 	ldw	r3,160(sp)
    2c04:	80bfffc4 	addi	r2,r16,-1
    2c08:	1021883a 	mov	r16,r2
    2c0c:	1887c83a 	sub	r3,r3,r2
    2c10:	d8c02b15 	stw	r3,172(sp)
    2c14:	d8802b17 	ldw	r2,172(sp)
    2c18:	d9002a17 	ldw	r4,168(sp)
    2c1c:	1100010e 	bge	r2,r4,2c24 <___vfprintf_internal_r+0x76c>
    2c20:	2005883a 	mov	r2,r4
    2c24:	d8802915 	stw	r2,164(sp)
    2c28:	d8003215 	stw	zero,200(sp)
    2c2c:	e7003fcc 	andi	fp,fp,255
    2c30:	e700201c 	xori	fp,fp,128
    2c34:	e73fe004 	addi	fp,fp,-128
    2c38:	e0000326 	beq	fp,zero,2c48 <___vfprintf_internal_r+0x790>
    2c3c:	d8c02917 	ldw	r3,164(sp)
    2c40:	18c00044 	addi	r3,r3,1
    2c44:	d8c02915 	stw	r3,164(sp)
    2c48:	90c0008c 	andi	r3,r18,2
    2c4c:	d8c02c15 	stw	r3,176(sp)
    2c50:	18000326 	beq	r3,zero,2c60 <___vfprintf_internal_r+0x7a8>
    2c54:	d8c02917 	ldw	r3,164(sp)
    2c58:	18c00084 	addi	r3,r3,2
    2c5c:	d8c02915 	stw	r3,164(sp)
    2c60:	90c0210c 	andi	r3,r18,132
    2c64:	d8c03015 	stw	r3,192(sp)
    2c68:	1801c51e 	bne	r3,zero,3380 <___vfprintf_internal_r+0xec8>
    2c6c:	d9003117 	ldw	r4,196(sp)
    2c70:	d8c02917 	ldw	r3,164(sp)
    2c74:	20e7c83a 	sub	r19,r4,r3
    2c78:	04c1c10e 	bge	zero,r19,3380 <___vfprintf_internal_r+0xec8>
    2c7c:	02400404 	movi	r9,16
    2c80:	d8c02017 	ldw	r3,128(sp)
    2c84:	d8801f17 	ldw	r2,124(sp)
    2c88:	4cc52f0e 	bge	r9,r19,4148 <___vfprintf_internal_r+0x1c90>
    2c8c:	01400074 	movhi	r5,1
    2c90:	29488384 	addi	r5,r5,8718
    2c94:	dc403b15 	stw	r17,236(sp)
    2c98:	d9403515 	stw	r5,212(sp)
    2c9c:	9823883a 	mov	r17,r19
    2ca0:	482d883a 	mov	r22,r9
    2ca4:	9027883a 	mov	r19,r18
    2ca8:	070001c4 	movi	fp,7
    2cac:	8025883a 	mov	r18,r16
    2cb0:	dc002d17 	ldw	r16,180(sp)
    2cb4:	00000306 	br	2cc4 <___vfprintf_internal_r+0x80c>
    2cb8:	8c7ffc04 	addi	r17,r17,-16
    2cbc:	42000204 	addi	r8,r8,8
    2cc0:	b440130e 	bge	r22,r17,2d10 <___vfprintf_internal_r+0x858>
    2cc4:	01000074 	movhi	r4,1
    2cc8:	18c00404 	addi	r3,r3,16
    2ccc:	10800044 	addi	r2,r2,1
    2cd0:	21088384 	addi	r4,r4,8718
    2cd4:	41000015 	stw	r4,0(r8)
    2cd8:	45800115 	stw	r22,4(r8)
    2cdc:	d8c02015 	stw	r3,128(sp)
    2ce0:	d8801f15 	stw	r2,124(sp)
    2ce4:	e0bff40e 	bge	fp,r2,2cb8 <__alt_mem_onchip_memory2_0+0xf7002cb8>
    2ce8:	d9801e04 	addi	r6,sp,120
    2cec:	b80b883a 	mov	r5,r23
    2cf0:	8009883a 	mov	r4,r16
    2cf4:	0009c980 	call	9c98 <__sprint_r>
    2cf8:	103ef31e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    2cfc:	8c7ffc04 	addi	r17,r17,-16
    2d00:	d8c02017 	ldw	r3,128(sp)
    2d04:	d8801f17 	ldw	r2,124(sp)
    2d08:	da000404 	addi	r8,sp,16
    2d0c:	b47fed16 	blt	r22,r17,2cc4 <__alt_mem_onchip_memory2_0+0xf7002cc4>
    2d10:	9021883a 	mov	r16,r18
    2d14:	9825883a 	mov	r18,r19
    2d18:	8827883a 	mov	r19,r17
    2d1c:	dc403b17 	ldw	r17,236(sp)
    2d20:	d9403517 	ldw	r5,212(sp)
    2d24:	98c7883a 	add	r3,r19,r3
    2d28:	10800044 	addi	r2,r2,1
    2d2c:	41400015 	stw	r5,0(r8)
    2d30:	44c00115 	stw	r19,4(r8)
    2d34:	d8c02015 	stw	r3,128(sp)
    2d38:	d8801f15 	stw	r2,124(sp)
    2d3c:	010001c4 	movi	r4,7
    2d40:	2082c516 	blt	r4,r2,3858 <___vfprintf_internal_r+0x13a0>
    2d44:	df002787 	ldb	fp,158(sp)
    2d48:	42000204 	addi	r8,r8,8
    2d4c:	e0000c26 	beq	fp,zero,2d80 <___vfprintf_internal_r+0x8c8>
    2d50:	d8801f17 	ldw	r2,124(sp)
    2d54:	d9002784 	addi	r4,sp,158
    2d58:	18c00044 	addi	r3,r3,1
    2d5c:	10800044 	addi	r2,r2,1
    2d60:	41000015 	stw	r4,0(r8)
    2d64:	01000044 	movi	r4,1
    2d68:	41000115 	stw	r4,4(r8)
    2d6c:	d8c02015 	stw	r3,128(sp)
    2d70:	d8801f15 	stw	r2,124(sp)
    2d74:	010001c4 	movi	r4,7
    2d78:	20825e16 	blt	r4,r2,36f4 <___vfprintf_internal_r+0x123c>
    2d7c:	42000204 	addi	r8,r8,8
    2d80:	d8802c17 	ldw	r2,176(sp)
    2d84:	10000c26 	beq	r2,zero,2db8 <___vfprintf_internal_r+0x900>
    2d88:	d8801f17 	ldw	r2,124(sp)
    2d8c:	d9002704 	addi	r4,sp,156
    2d90:	18c00084 	addi	r3,r3,2
    2d94:	10800044 	addi	r2,r2,1
    2d98:	41000015 	stw	r4,0(r8)
    2d9c:	01000084 	movi	r4,2
    2da0:	41000115 	stw	r4,4(r8)
    2da4:	d8c02015 	stw	r3,128(sp)
    2da8:	d8801f15 	stw	r2,124(sp)
    2dac:	010001c4 	movi	r4,7
    2db0:	20825816 	blt	r4,r2,3714 <___vfprintf_internal_r+0x125c>
    2db4:	42000204 	addi	r8,r8,8
    2db8:	d9003017 	ldw	r4,192(sp)
    2dbc:	00802004 	movi	r2,128
    2dc0:	2081bb26 	beq	r4,r2,34b0 <___vfprintf_internal_r+0xff8>
    2dc4:	d9402a17 	ldw	r5,168(sp)
    2dc8:	d8802b17 	ldw	r2,172(sp)
    2dcc:	28adc83a 	sub	r22,r5,r2
    2dd0:	0580310e 	bge	zero,r22,2e98 <___vfprintf_internal_r+0x9e0>
    2dd4:	07000404 	movi	fp,16
    2dd8:	d8801f17 	ldw	r2,124(sp)
    2ddc:	e584360e 	bge	fp,r22,3eb8 <___vfprintf_internal_r+0x1a00>
    2de0:	01400074 	movhi	r5,1
    2de4:	29487f84 	addi	r5,r5,8702
    2de8:	dc402a15 	stw	r17,168(sp)
    2dec:	d9402c15 	stw	r5,176(sp)
    2df0:	b023883a 	mov	r17,r22
    2df4:	04c001c4 	movi	r19,7
    2df8:	a82d883a 	mov	r22,r21
    2dfc:	902b883a 	mov	r21,r18
    2e00:	8025883a 	mov	r18,r16
    2e04:	dc002d17 	ldw	r16,180(sp)
    2e08:	00000306 	br	2e18 <___vfprintf_internal_r+0x960>
    2e0c:	8c7ffc04 	addi	r17,r17,-16
    2e10:	42000204 	addi	r8,r8,8
    2e14:	e440110e 	bge	fp,r17,2e5c <___vfprintf_internal_r+0x9a4>
    2e18:	18c00404 	addi	r3,r3,16
    2e1c:	10800044 	addi	r2,r2,1
    2e20:	45000015 	stw	r20,0(r8)
    2e24:	47000115 	stw	fp,4(r8)
    2e28:	d8c02015 	stw	r3,128(sp)
    2e2c:	d8801f15 	stw	r2,124(sp)
    2e30:	98bff60e 	bge	r19,r2,2e0c <__alt_mem_onchip_memory2_0+0xf7002e0c>
    2e34:	d9801e04 	addi	r6,sp,120
    2e38:	b80b883a 	mov	r5,r23
    2e3c:	8009883a 	mov	r4,r16
    2e40:	0009c980 	call	9c98 <__sprint_r>
    2e44:	103ea01e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    2e48:	8c7ffc04 	addi	r17,r17,-16
    2e4c:	d8c02017 	ldw	r3,128(sp)
    2e50:	d8801f17 	ldw	r2,124(sp)
    2e54:	da000404 	addi	r8,sp,16
    2e58:	e47fef16 	blt	fp,r17,2e18 <__alt_mem_onchip_memory2_0+0xf7002e18>
    2e5c:	9021883a 	mov	r16,r18
    2e60:	a825883a 	mov	r18,r21
    2e64:	b02b883a 	mov	r21,r22
    2e68:	882d883a 	mov	r22,r17
    2e6c:	dc402a17 	ldw	r17,168(sp)
    2e70:	d9002c17 	ldw	r4,176(sp)
    2e74:	1d87883a 	add	r3,r3,r22
    2e78:	10800044 	addi	r2,r2,1
    2e7c:	41000015 	stw	r4,0(r8)
    2e80:	45800115 	stw	r22,4(r8)
    2e84:	d8c02015 	stw	r3,128(sp)
    2e88:	d8801f15 	stw	r2,124(sp)
    2e8c:	010001c4 	movi	r4,7
    2e90:	20821016 	blt	r4,r2,36d4 <___vfprintf_internal_r+0x121c>
    2e94:	42000204 	addi	r8,r8,8
    2e98:	9080400c 	andi	r2,r18,256
    2e9c:	10013a1e 	bne	r2,zero,3388 <___vfprintf_internal_r+0xed0>
    2ea0:	d9402b17 	ldw	r5,172(sp)
    2ea4:	d8801f17 	ldw	r2,124(sp)
    2ea8:	44000015 	stw	r16,0(r8)
    2eac:	1947883a 	add	r3,r3,r5
    2eb0:	10800044 	addi	r2,r2,1
    2eb4:	41400115 	stw	r5,4(r8)
    2eb8:	d8c02015 	stw	r3,128(sp)
    2ebc:	d8801f15 	stw	r2,124(sp)
    2ec0:	010001c4 	movi	r4,7
    2ec4:	2081f516 	blt	r4,r2,369c <___vfprintf_internal_r+0x11e4>
    2ec8:	42000204 	addi	r8,r8,8
    2ecc:	9480010c 	andi	r18,r18,4
    2ed0:	90003226 	beq	r18,zero,2f9c <___vfprintf_internal_r+0xae4>
    2ed4:	d9403117 	ldw	r5,196(sp)
    2ed8:	d8802917 	ldw	r2,164(sp)
    2edc:	28a1c83a 	sub	r16,r5,r2
    2ee0:	04002e0e 	bge	zero,r16,2f9c <___vfprintf_internal_r+0xae4>
    2ee4:	04400404 	movi	r17,16
    2ee8:	d8801f17 	ldw	r2,124(sp)
    2eec:	8c04c40e 	bge	r17,r16,4200 <___vfprintf_internal_r+0x1d48>
    2ef0:	01400074 	movhi	r5,1
    2ef4:	29488384 	addi	r5,r5,8718
    2ef8:	d9403515 	stw	r5,212(sp)
    2efc:	048001c4 	movi	r18,7
    2f00:	dcc02d17 	ldw	r19,180(sp)
    2f04:	00000306 	br	2f14 <___vfprintf_internal_r+0xa5c>
    2f08:	843ffc04 	addi	r16,r16,-16
    2f0c:	42000204 	addi	r8,r8,8
    2f10:	8c00130e 	bge	r17,r16,2f60 <___vfprintf_internal_r+0xaa8>
    2f14:	01000074 	movhi	r4,1
    2f18:	18c00404 	addi	r3,r3,16
    2f1c:	10800044 	addi	r2,r2,1
    2f20:	21088384 	addi	r4,r4,8718
    2f24:	41000015 	stw	r4,0(r8)
    2f28:	44400115 	stw	r17,4(r8)
    2f2c:	d8c02015 	stw	r3,128(sp)
    2f30:	d8801f15 	stw	r2,124(sp)
    2f34:	90bff40e 	bge	r18,r2,2f08 <__alt_mem_onchip_memory2_0+0xf7002f08>
    2f38:	d9801e04 	addi	r6,sp,120
    2f3c:	b80b883a 	mov	r5,r23
    2f40:	9809883a 	mov	r4,r19
    2f44:	0009c980 	call	9c98 <__sprint_r>
    2f48:	103e5f1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    2f4c:	843ffc04 	addi	r16,r16,-16
    2f50:	d8c02017 	ldw	r3,128(sp)
    2f54:	d8801f17 	ldw	r2,124(sp)
    2f58:	da000404 	addi	r8,sp,16
    2f5c:	8c3fed16 	blt	r17,r16,2f14 <__alt_mem_onchip_memory2_0+0xf7002f14>
    2f60:	d9403517 	ldw	r5,212(sp)
    2f64:	1c07883a 	add	r3,r3,r16
    2f68:	10800044 	addi	r2,r2,1
    2f6c:	41400015 	stw	r5,0(r8)
    2f70:	44000115 	stw	r16,4(r8)
    2f74:	d8c02015 	stw	r3,128(sp)
    2f78:	d8801f15 	stw	r2,124(sp)
    2f7c:	010001c4 	movi	r4,7
    2f80:	2080060e 	bge	r4,r2,2f9c <___vfprintf_internal_r+0xae4>
    2f84:	d9002d17 	ldw	r4,180(sp)
    2f88:	d9801e04 	addi	r6,sp,120
    2f8c:	b80b883a 	mov	r5,r23
    2f90:	0009c980 	call	9c98 <__sprint_r>
    2f94:	103e4c1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    2f98:	d8c02017 	ldw	r3,128(sp)
    2f9c:	d8803117 	ldw	r2,196(sp)
    2fa0:	d9002917 	ldw	r4,164(sp)
    2fa4:	1100010e 	bge	r2,r4,2fac <___vfprintf_internal_r+0xaf4>
    2fa8:	2005883a 	mov	r2,r4
    2fac:	d9402f17 	ldw	r5,188(sp)
    2fb0:	288b883a 	add	r5,r5,r2
    2fb4:	d9402f15 	stw	r5,188(sp)
    2fb8:	1801c01e 	bne	r3,zero,36bc <___vfprintf_internal_r+0x1204>
    2fbc:	a8800007 	ldb	r2,0(r21)
    2fc0:	d8001f15 	stw	zero,124(sp)
    2fc4:	da000404 	addi	r8,sp,16
    2fc8:	103d751e 	bne	r2,zero,25a0 <__alt_mem_onchip_memory2_0+0xf70025a0>
    2fcc:	a823883a 	mov	r17,r21
    2fd0:	003d8b06 	br	2600 <__alt_mem_onchip_memory2_0+0xf7002600>
    2fd4:	8025883a 	mov	r18,r16
    2fd8:	dc002903 	ldbu	r16,164(sp)
    2fdc:	e011883a 	mov	r8,fp
    2fe0:	84003fcc 	andi	r16,r16,255
    2fe4:	8005e51e 	bne	r16,zero,477c <___vfprintf_internal_r+0x22c4>
    2fe8:	94800414 	ori	r18,r18,16
    2fec:	9080080c 	andi	r2,r18,32
    2ff0:	10022b26 	beq	r2,zero,38a0 <___vfprintf_internal_r+0x13e8>
    2ff4:	d9002e17 	ldw	r4,184(sp)
    2ff8:	d9402a17 	ldw	r5,168(sp)
    2ffc:	d8002785 	stb	zero,158(sp)
    3000:	20c00204 	addi	r3,r4,8
    3004:	24c00017 	ldw	r19,0(r4)
    3008:	25800117 	ldw	r22,4(r4)
    300c:	28042e16 	blt	r5,zero,40c8 <___vfprintf_internal_r+0x1c10>
    3010:	013fdfc4 	movi	r4,-129
    3014:	9d84b03a 	or	r2,r19,r22
    3018:	d8c02e15 	stw	r3,184(sp)
    301c:	9124703a 	and	r18,r18,r4
    3020:	0039883a 	mov	fp,zero
    3024:	103e801e 	bne	r2,zero,2a28 <__alt_mem_onchip_memory2_0+0xf7002a28>
    3028:	d9002a17 	ldw	r4,168(sp)
    302c:	2002e01e 	bne	r4,zero,3bb0 <___vfprintf_internal_r+0x16f8>
    3030:	d8002a15 	stw	zero,168(sp)
    3034:	d8002b15 	stw	zero,172(sp)
    3038:	dc001e04 	addi	r16,sp,120
    303c:	003ef506 	br	2c14 <__alt_mem_onchip_memory2_0+0xf7002c14>
    3040:	8025883a 	mov	r18,r16
    3044:	dc002903 	ldbu	r16,164(sp)
    3048:	e011883a 	mov	r8,fp
    304c:	84003fcc 	andi	r16,r16,255
    3050:	8005ba1e 	bne	r16,zero,473c <___vfprintf_internal_r+0x2284>
    3054:	01000074 	movhi	r4,1
    3058:	21087304 	addi	r4,r4,8652
    305c:	d9003915 	stw	r4,228(sp)
    3060:	9080080c 	andi	r2,r18,32
    3064:	10006126 	beq	r2,zero,31ec <___vfprintf_internal_r+0xd34>
    3068:	d9402e17 	ldw	r5,184(sp)
    306c:	2cc00017 	ldw	r19,0(r5)
    3070:	2d800117 	ldw	r22,4(r5)
    3074:	29400204 	addi	r5,r5,8
    3078:	d9402e15 	stw	r5,184(sp)
    307c:	9080004c 	andi	r2,r18,1
    3080:	1001ac26 	beq	r2,zero,3734 <___vfprintf_internal_r+0x127c>
    3084:	9d84b03a 	or	r2,r19,r22
    3088:	10038526 	beq	r2,zero,3ea0 <___vfprintf_internal_r+0x19e8>
    308c:	d8c02a17 	ldw	r3,168(sp)
    3090:	00800c04 	movi	r2,48
    3094:	d8802705 	stb	r2,156(sp)
    3098:	dc402745 	stb	r17,157(sp)
    309c:	d8002785 	stb	zero,158(sp)
    30a0:	90800094 	ori	r2,r18,2
    30a4:	18047916 	blt	r3,zero,428c <___vfprintf_internal_r+0x1dd4>
    30a8:	00bfdfc4 	movi	r2,-129
    30ac:	90a4703a 	and	r18,r18,r2
    30b0:	94800094 	ori	r18,r18,2
    30b4:	0039883a 	mov	fp,zero
    30b8:	d9003917 	ldw	r4,228(sp)
    30bc:	dc001e04 	addi	r16,sp,120
    30c0:	988003cc 	andi	r2,r19,15
    30c4:	b006973a 	slli	r3,r22,28
    30c8:	2085883a 	add	r2,r4,r2
    30cc:	9826d13a 	srli	r19,r19,4
    30d0:	10800003 	ldbu	r2,0(r2)
    30d4:	b02cd13a 	srli	r22,r22,4
    30d8:	843fffc4 	addi	r16,r16,-1
    30dc:	1ce6b03a 	or	r19,r3,r19
    30e0:	80800005 	stb	r2,0(r16)
    30e4:	9d84b03a 	or	r2,r19,r22
    30e8:	103ff51e 	bne	r2,zero,30c0 <__alt_mem_onchip_memory2_0+0xf70030c0>
    30ec:	d8c02817 	ldw	r3,160(sp)
    30f0:	1c07c83a 	sub	r3,r3,r16
    30f4:	d8c02b15 	stw	r3,172(sp)
    30f8:	003ec606 	br	2c14 <__alt_mem_onchip_memory2_0+0xf7002c14>
    30fc:	8025883a 	mov	r18,r16
    3100:	dc002903 	ldbu	r16,164(sp)
    3104:	e011883a 	mov	r8,fp
    3108:	84003fcc 	andi	r16,r16,255
    310c:	803e9626 	beq	r16,zero,2b68 <__alt_mem_onchip_memory2_0+0xf7002b68>
    3110:	d8c02b03 	ldbu	r3,172(sp)
    3114:	d8c02785 	stb	r3,158(sp)
    3118:	003e9306 	br	2b68 <__alt_mem_onchip_memory2_0+0xf7002b68>
    311c:	00c00044 	movi	r3,1
    3120:	d8c02905 	stb	r3,164(sp)
    3124:	00c00ac4 	movi	r3,43
    3128:	d8c02b05 	stb	r3,172(sp)
    312c:	ac400007 	ldb	r17,0(r21)
    3130:	003d4306 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3134:	84000814 	ori	r16,r16,32
    3138:	ac400007 	ldb	r17,0(r21)
    313c:	003d4006 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3140:	d8802e17 	ldw	r2,184(sp)
    3144:	8025883a 	mov	r18,r16
    3148:	d8002785 	stb	zero,158(sp)
    314c:	14000017 	ldw	r16,0(r2)
    3150:	e011883a 	mov	r8,fp
    3154:	14c00104 	addi	r19,r2,4
    3158:	80042d26 	beq	r16,zero,4210 <___vfprintf_internal_r+0x1d58>
    315c:	d8c02a17 	ldw	r3,168(sp)
    3160:	1803e416 	blt	r3,zero,40f4 <___vfprintf_internal_r+0x1c3c>
    3164:	180d883a 	mov	r6,r3
    3168:	000b883a 	mov	r5,zero
    316c:	8009883a 	mov	r4,r16
    3170:	df003d15 	stw	fp,244(sp)
    3174:	0007df00 	call	7df0 <memchr>
    3178:	da003d17 	ldw	r8,244(sp)
    317c:	10046826 	beq	r2,zero,4320 <___vfprintf_internal_r+0x1e68>
    3180:	1405c83a 	sub	r2,r2,r16
    3184:	d8802b15 	stw	r2,172(sp)
    3188:	1003e016 	blt	r2,zero,410c <___vfprintf_internal_r+0x1c54>
    318c:	df002783 	ldbu	fp,158(sp)
    3190:	d8802915 	stw	r2,164(sp)
    3194:	dcc02e15 	stw	r19,184(sp)
    3198:	d8002a15 	stw	zero,168(sp)
    319c:	d8003215 	stw	zero,200(sp)
    31a0:	003ea206 	br	2c2c <__alt_mem_onchip_memory2_0+0xf7002c2c>
    31a4:	8025883a 	mov	r18,r16
    31a8:	dc002903 	ldbu	r16,164(sp)
    31ac:	e011883a 	mov	r8,fp
    31b0:	84003fcc 	andi	r16,r16,255
    31b4:	803f8d26 	beq	r16,zero,2fec <__alt_mem_onchip_memory2_0+0xf7002fec>
    31b8:	d8c02b03 	ldbu	r3,172(sp)
    31bc:	d8c02785 	stb	r3,158(sp)
    31c0:	003f8a06 	br	2fec <__alt_mem_onchip_memory2_0+0xf7002fec>
    31c4:	8025883a 	mov	r18,r16
    31c8:	dc002903 	ldbu	r16,164(sp)
    31cc:	e011883a 	mov	r8,fp
    31d0:	84003fcc 	andi	r16,r16,255
    31d4:	8005661e 	bne	r16,zero,4770 <___vfprintf_internal_r+0x22b8>
    31d8:	01000074 	movhi	r4,1
    31dc:	21087804 	addi	r4,r4,8672
    31e0:	d9003915 	stw	r4,228(sp)
    31e4:	9080080c 	andi	r2,r18,32
    31e8:	103f9f1e 	bne	r2,zero,3068 <__alt_mem_onchip_memory2_0+0xf7003068>
    31ec:	9080040c 	andi	r2,r18,16
    31f0:	1002eb26 	beq	r2,zero,3da0 <___vfprintf_internal_r+0x18e8>
    31f4:	d8802e17 	ldw	r2,184(sp)
    31f8:	002d883a 	mov	r22,zero
    31fc:	14c00017 	ldw	r19,0(r2)
    3200:	10800104 	addi	r2,r2,4
    3204:	d8802e15 	stw	r2,184(sp)
    3208:	003f9c06 	br	307c <__alt_mem_onchip_memory2_0+0xf700307c>
    320c:	d8802b07 	ldb	r2,172(sp)
    3210:	1002e11e 	bne	r2,zero,3d98 <___vfprintf_internal_r+0x18e0>
    3214:	00c00044 	movi	r3,1
    3218:	d8c02905 	stb	r3,164(sp)
    321c:	00c00804 	movi	r3,32
    3220:	d8c02b05 	stb	r3,172(sp)
    3224:	ac400007 	ldb	r17,0(r21)
    3228:	003d0506 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    322c:	84000054 	ori	r16,r16,1
    3230:	ac400007 	ldb	r17,0(r21)
    3234:	003d0206 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3238:	8025883a 	mov	r18,r16
    323c:	dc002903 	ldbu	r16,164(sp)
    3240:	e011883a 	mov	r8,fp
    3244:	84003fcc 	andi	r16,r16,255
    3248:	803de726 	beq	r16,zero,29e8 <__alt_mem_onchip_memory2_0+0xf70029e8>
    324c:	d8c02b03 	ldbu	r3,172(sp)
    3250:	d8c02785 	stb	r3,158(sp)
    3254:	003de406 	br	29e8 <__alt_mem_onchip_memory2_0+0xf70029e8>
    3258:	84001014 	ori	r16,r16,64
    325c:	ac400007 	ldb	r17,0(r21)
    3260:	003cf706 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3264:	ac400007 	ldb	r17,0(r21)
    3268:	00801b04 	movi	r2,108
    326c:	88838f26 	beq	r17,r2,40ac <___vfprintf_internal_r+0x1bf4>
    3270:	84000414 	ori	r16,r16,16
    3274:	003cf206 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3278:	8025883a 	mov	r18,r16
    327c:	dc002903 	ldbu	r16,164(sp)
    3280:	e011883a 	mov	r8,fp
    3284:	84003fcc 	andi	r16,r16,255
    3288:	80053f1e 	bne	r16,zero,4788 <___vfprintf_internal_r+0x22d0>
    328c:	9080080c 	andi	r2,r18,32
    3290:	1002d226 	beq	r2,zero,3ddc <___vfprintf_internal_r+0x1924>
    3294:	d9002e17 	ldw	r4,184(sp)
    3298:	d9402f17 	ldw	r5,188(sp)
    329c:	20800017 	ldw	r2,0(r4)
    32a0:	2807d7fa 	srai	r3,r5,31
    32a4:	21000104 	addi	r4,r4,4
    32a8:	d9002e15 	stw	r4,184(sp)
    32ac:	11400015 	stw	r5,0(r2)
    32b0:	10c00115 	stw	r3,4(r2)
    32b4:	003cb806 	br	2598 <__alt_mem_onchip_memory2_0+0xf7002598>
    32b8:	d8c02e17 	ldw	r3,184(sp)
    32bc:	d9002e17 	ldw	r4,184(sp)
    32c0:	8025883a 	mov	r18,r16
    32c4:	18800017 	ldw	r2,0(r3)
    32c8:	21000104 	addi	r4,r4,4
    32cc:	00c00044 	movi	r3,1
    32d0:	e011883a 	mov	r8,fp
    32d4:	d8c02915 	stw	r3,164(sp)
    32d8:	d8002785 	stb	zero,158(sp)
    32dc:	d8801405 	stb	r2,80(sp)
    32e0:	d9002e15 	stw	r4,184(sp)
    32e4:	d8c02b15 	stw	r3,172(sp)
    32e8:	d8002a15 	stw	zero,168(sp)
    32ec:	d8003215 	stw	zero,200(sp)
    32f0:	dc001404 	addi	r16,sp,80
    32f4:	0039883a 	mov	fp,zero
    32f8:	003e5306 	br	2c48 <__alt_mem_onchip_memory2_0+0xf7002c48>
    32fc:	01000074 	movhi	r4,1
    3300:	21087804 	addi	r4,r4,8672
    3304:	0039883a 	mov	fp,zero
    3308:	d9003915 	stw	r4,228(sp)
    330c:	04401e04 	movi	r17,120
    3310:	003f6906 	br	30b8 <__alt_mem_onchip_memory2_0+0xf70030b8>
    3314:	8025883a 	mov	r18,r16
    3318:	dc002903 	ldbu	r16,164(sp)
    331c:	e011883a 	mov	r8,fp
    3320:	84003fcc 	andi	r16,r16,255
    3324:	8005081e 	bne	r16,zero,4748 <___vfprintf_internal_r+0x2290>
    3328:	883d6126 	beq	r17,zero,28b0 <__alt_mem_onchip_memory2_0+0xf70028b0>
    332c:	00c00044 	movi	r3,1
    3330:	d8c02915 	stw	r3,164(sp)
    3334:	dc401405 	stb	r17,80(sp)
    3338:	d8002785 	stb	zero,158(sp)
    333c:	003fe906 	br	32e4 <__alt_mem_onchip_memory2_0+0xf70032e4>
    3340:	01400074 	movhi	r5,1
    3344:	29487804 	addi	r5,r5,8672
    3348:	d9403915 	stw	r5,228(sp)
    334c:	d8c02e15 	stw	r3,184(sp)
    3350:	1025883a 	mov	r18,r2
    3354:	04401e04 	movi	r17,120
    3358:	9d84b03a 	or	r2,r19,r22
    335c:	1000fc1e 	bne	r2,zero,3750 <___vfprintf_internal_r+0x1298>
    3360:	0039883a 	mov	fp,zero
    3364:	00800084 	movi	r2,2
    3368:	10803fcc 	andi	r2,r2,255
    336c:	00c00044 	movi	r3,1
    3370:	10c20f26 	beq	r2,r3,3bb0 <___vfprintf_internal_r+0x16f8>
    3374:	00c00084 	movi	r3,2
    3378:	10fd3326 	beq	r2,r3,2848 <__alt_mem_onchip_memory2_0+0xf7002848>
    337c:	003e0b06 	br	2bac <__alt_mem_onchip_memory2_0+0xf7002bac>
    3380:	d8c02017 	ldw	r3,128(sp)
    3384:	003e7106 	br	2d4c <__alt_mem_onchip_memory2_0+0xf7002d4c>
    3388:	00801944 	movi	r2,101
    338c:	14407e0e 	bge	r2,r17,3588 <___vfprintf_internal_r+0x10d0>
    3390:	d9003617 	ldw	r4,216(sp)
    3394:	d9403817 	ldw	r5,224(sp)
    3398:	000d883a 	mov	r6,zero
    339c:	000f883a 	mov	r7,zero
    33a0:	d8c03c15 	stw	r3,240(sp)
    33a4:	da003d15 	stw	r8,244(sp)
    33a8:	000dbf80 	call	dbf8 <__eqdf2>
    33ac:	d8c03c17 	ldw	r3,240(sp)
    33b0:	da003d17 	ldw	r8,244(sp)
    33b4:	1000f71e 	bne	r2,zero,3794 <___vfprintf_internal_r+0x12dc>
    33b8:	d8801f17 	ldw	r2,124(sp)
    33bc:	01000074 	movhi	r4,1
    33c0:	21087f04 	addi	r4,r4,8700
    33c4:	18c00044 	addi	r3,r3,1
    33c8:	10800044 	addi	r2,r2,1
    33cc:	41000015 	stw	r4,0(r8)
    33d0:	01000044 	movi	r4,1
    33d4:	41000115 	stw	r4,4(r8)
    33d8:	d8c02015 	stw	r3,128(sp)
    33dc:	d8801f15 	stw	r2,124(sp)
    33e0:	010001c4 	movi	r4,7
    33e4:	2082b816 	blt	r4,r2,3ec8 <___vfprintf_internal_r+0x1a10>
    33e8:	42000204 	addi	r8,r8,8
    33ec:	d8802617 	ldw	r2,152(sp)
    33f0:	d9403317 	ldw	r5,204(sp)
    33f4:	11400216 	blt	r2,r5,3400 <___vfprintf_internal_r+0xf48>
    33f8:	9080004c 	andi	r2,r18,1
    33fc:	103eb326 	beq	r2,zero,2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    3400:	d8803717 	ldw	r2,220(sp)
    3404:	d9003417 	ldw	r4,208(sp)
    3408:	d9403717 	ldw	r5,220(sp)
    340c:	1887883a 	add	r3,r3,r2
    3410:	d8801f17 	ldw	r2,124(sp)
    3414:	41000015 	stw	r4,0(r8)
    3418:	41400115 	stw	r5,4(r8)
    341c:	10800044 	addi	r2,r2,1
    3420:	d8c02015 	stw	r3,128(sp)
    3424:	d8801f15 	stw	r2,124(sp)
    3428:	010001c4 	movi	r4,7
    342c:	20832916 	blt	r4,r2,40d4 <___vfprintf_internal_r+0x1c1c>
    3430:	42000204 	addi	r8,r8,8
    3434:	d8803317 	ldw	r2,204(sp)
    3438:	143fffc4 	addi	r16,r2,-1
    343c:	043ea30e 	bge	zero,r16,2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    3440:	04400404 	movi	r17,16
    3444:	d8801f17 	ldw	r2,124(sp)
    3448:	8c00880e 	bge	r17,r16,366c <___vfprintf_internal_r+0x11b4>
    344c:	01400074 	movhi	r5,1
    3450:	29487f84 	addi	r5,r5,8702
    3454:	d9402c15 	stw	r5,176(sp)
    3458:	058001c4 	movi	r22,7
    345c:	dcc02d17 	ldw	r19,180(sp)
    3460:	00000306 	br	3470 <___vfprintf_internal_r+0xfb8>
    3464:	42000204 	addi	r8,r8,8
    3468:	843ffc04 	addi	r16,r16,-16
    346c:	8c00820e 	bge	r17,r16,3678 <___vfprintf_internal_r+0x11c0>
    3470:	18c00404 	addi	r3,r3,16
    3474:	10800044 	addi	r2,r2,1
    3478:	45000015 	stw	r20,0(r8)
    347c:	44400115 	stw	r17,4(r8)
    3480:	d8c02015 	stw	r3,128(sp)
    3484:	d8801f15 	stw	r2,124(sp)
    3488:	b0bff60e 	bge	r22,r2,3464 <__alt_mem_onchip_memory2_0+0xf7003464>
    348c:	d9801e04 	addi	r6,sp,120
    3490:	b80b883a 	mov	r5,r23
    3494:	9809883a 	mov	r4,r19
    3498:	0009c980 	call	9c98 <__sprint_r>
    349c:	103d0a1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    34a0:	d8c02017 	ldw	r3,128(sp)
    34a4:	d8801f17 	ldw	r2,124(sp)
    34a8:	da000404 	addi	r8,sp,16
    34ac:	003fee06 	br	3468 <__alt_mem_onchip_memory2_0+0xf7003468>
    34b0:	d9403117 	ldw	r5,196(sp)
    34b4:	d8802917 	ldw	r2,164(sp)
    34b8:	28adc83a 	sub	r22,r5,r2
    34bc:	05be410e 	bge	zero,r22,2dc4 <__alt_mem_onchip_memory2_0+0xf7002dc4>
    34c0:	07000404 	movi	fp,16
    34c4:	d8801f17 	ldw	r2,124(sp)
    34c8:	e5838f0e 	bge	fp,r22,4308 <___vfprintf_internal_r+0x1e50>
    34cc:	01400074 	movhi	r5,1
    34d0:	29487f84 	addi	r5,r5,8702
    34d4:	dc403015 	stw	r17,192(sp)
    34d8:	d9402c15 	stw	r5,176(sp)
    34dc:	b023883a 	mov	r17,r22
    34e0:	04c001c4 	movi	r19,7
    34e4:	a82d883a 	mov	r22,r21
    34e8:	902b883a 	mov	r21,r18
    34ec:	8025883a 	mov	r18,r16
    34f0:	dc002d17 	ldw	r16,180(sp)
    34f4:	00000306 	br	3504 <___vfprintf_internal_r+0x104c>
    34f8:	8c7ffc04 	addi	r17,r17,-16
    34fc:	42000204 	addi	r8,r8,8
    3500:	e440110e 	bge	fp,r17,3548 <___vfprintf_internal_r+0x1090>
    3504:	18c00404 	addi	r3,r3,16
    3508:	10800044 	addi	r2,r2,1
    350c:	45000015 	stw	r20,0(r8)
    3510:	47000115 	stw	fp,4(r8)
    3514:	d8c02015 	stw	r3,128(sp)
    3518:	d8801f15 	stw	r2,124(sp)
    351c:	98bff60e 	bge	r19,r2,34f8 <__alt_mem_onchip_memory2_0+0xf70034f8>
    3520:	d9801e04 	addi	r6,sp,120
    3524:	b80b883a 	mov	r5,r23
    3528:	8009883a 	mov	r4,r16
    352c:	0009c980 	call	9c98 <__sprint_r>
    3530:	103ce51e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3534:	8c7ffc04 	addi	r17,r17,-16
    3538:	d8c02017 	ldw	r3,128(sp)
    353c:	d8801f17 	ldw	r2,124(sp)
    3540:	da000404 	addi	r8,sp,16
    3544:	e47fef16 	blt	fp,r17,3504 <__alt_mem_onchip_memory2_0+0xf7003504>
    3548:	9021883a 	mov	r16,r18
    354c:	a825883a 	mov	r18,r21
    3550:	b02b883a 	mov	r21,r22
    3554:	882d883a 	mov	r22,r17
    3558:	dc403017 	ldw	r17,192(sp)
    355c:	d9002c17 	ldw	r4,176(sp)
    3560:	1d87883a 	add	r3,r3,r22
    3564:	10800044 	addi	r2,r2,1
    3568:	41000015 	stw	r4,0(r8)
    356c:	45800115 	stw	r22,4(r8)
    3570:	d8c02015 	stw	r3,128(sp)
    3574:	d8801f15 	stw	r2,124(sp)
    3578:	010001c4 	movi	r4,7
    357c:	20818e16 	blt	r4,r2,3bb8 <___vfprintf_internal_r+0x1700>
    3580:	42000204 	addi	r8,r8,8
    3584:	003e0f06 	br	2dc4 <__alt_mem_onchip_memory2_0+0xf7002dc4>
    3588:	d9403317 	ldw	r5,204(sp)
    358c:	00800044 	movi	r2,1
    3590:	18c00044 	addi	r3,r3,1
    3594:	1141530e 	bge	r2,r5,3ae4 <___vfprintf_internal_r+0x162c>
    3598:	dc401f17 	ldw	r17,124(sp)
    359c:	00800044 	movi	r2,1
    35a0:	40800115 	stw	r2,4(r8)
    35a4:	8c400044 	addi	r17,r17,1
    35a8:	44000015 	stw	r16,0(r8)
    35ac:	d8c02015 	stw	r3,128(sp)
    35b0:	dc401f15 	stw	r17,124(sp)
    35b4:	008001c4 	movi	r2,7
    35b8:	14416b16 	blt	r2,r17,3b68 <___vfprintf_internal_r+0x16b0>
    35bc:	42000204 	addi	r8,r8,8
    35c0:	d8803717 	ldw	r2,220(sp)
    35c4:	d9003417 	ldw	r4,208(sp)
    35c8:	8c400044 	addi	r17,r17,1
    35cc:	10c7883a 	add	r3,r2,r3
    35d0:	40800115 	stw	r2,4(r8)
    35d4:	41000015 	stw	r4,0(r8)
    35d8:	d8c02015 	stw	r3,128(sp)
    35dc:	dc401f15 	stw	r17,124(sp)
    35e0:	008001c4 	movi	r2,7
    35e4:	14416916 	blt	r2,r17,3b8c <___vfprintf_internal_r+0x16d4>
    35e8:	45800204 	addi	r22,r8,8
    35ec:	d9003617 	ldw	r4,216(sp)
    35f0:	d9403817 	ldw	r5,224(sp)
    35f4:	000d883a 	mov	r6,zero
    35f8:	000f883a 	mov	r7,zero
    35fc:	d8c03c15 	stw	r3,240(sp)
    3600:	000dbf80 	call	dbf8 <__eqdf2>
    3604:	d8c03c17 	ldw	r3,240(sp)
    3608:	1000bc26 	beq	r2,zero,38fc <___vfprintf_internal_r+0x1444>
    360c:	d9403317 	ldw	r5,204(sp)
    3610:	84000044 	addi	r16,r16,1
    3614:	8c400044 	addi	r17,r17,1
    3618:	28bfffc4 	addi	r2,r5,-1
    361c:	1887883a 	add	r3,r3,r2
    3620:	b0800115 	stw	r2,4(r22)
    3624:	b4000015 	stw	r16,0(r22)
    3628:	d8c02015 	stw	r3,128(sp)
    362c:	dc401f15 	stw	r17,124(sp)
    3630:	008001c4 	movi	r2,7
    3634:	14414316 	blt	r2,r17,3b44 <___vfprintf_internal_r+0x168c>
    3638:	b5800204 	addi	r22,r22,8
    363c:	d9003a17 	ldw	r4,232(sp)
    3640:	df0022c4 	addi	fp,sp,139
    3644:	8c400044 	addi	r17,r17,1
    3648:	20c7883a 	add	r3,r4,r3
    364c:	b7000015 	stw	fp,0(r22)
    3650:	b1000115 	stw	r4,4(r22)
    3654:	d8c02015 	stw	r3,128(sp)
    3658:	dc401f15 	stw	r17,124(sp)
    365c:	008001c4 	movi	r2,7
    3660:	14400e16 	blt	r2,r17,369c <___vfprintf_internal_r+0x11e4>
    3664:	b2000204 	addi	r8,r22,8
    3668:	003e1806 	br	2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    366c:	01000074 	movhi	r4,1
    3670:	21087f84 	addi	r4,r4,8702
    3674:	d9002c15 	stw	r4,176(sp)
    3678:	d9002c17 	ldw	r4,176(sp)
    367c:	1c07883a 	add	r3,r3,r16
    3680:	44000115 	stw	r16,4(r8)
    3684:	41000015 	stw	r4,0(r8)
    3688:	10800044 	addi	r2,r2,1
    368c:	d8c02015 	stw	r3,128(sp)
    3690:	d8801f15 	stw	r2,124(sp)
    3694:	010001c4 	movi	r4,7
    3698:	20be0b0e 	bge	r4,r2,2ec8 <__alt_mem_onchip_memory2_0+0xf7002ec8>
    369c:	d9002d17 	ldw	r4,180(sp)
    36a0:	d9801e04 	addi	r6,sp,120
    36a4:	b80b883a 	mov	r5,r23
    36a8:	0009c980 	call	9c98 <__sprint_r>
    36ac:	103c861e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    36b0:	d8c02017 	ldw	r3,128(sp)
    36b4:	da000404 	addi	r8,sp,16
    36b8:	003e0406 	br	2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    36bc:	d9002d17 	ldw	r4,180(sp)
    36c0:	d9801e04 	addi	r6,sp,120
    36c4:	b80b883a 	mov	r5,r23
    36c8:	0009c980 	call	9c98 <__sprint_r>
    36cc:	103e3b26 	beq	r2,zero,2fbc <__alt_mem_onchip_memory2_0+0xf7002fbc>
    36d0:	003c7d06 	br	28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    36d4:	d9002d17 	ldw	r4,180(sp)
    36d8:	d9801e04 	addi	r6,sp,120
    36dc:	b80b883a 	mov	r5,r23
    36e0:	0009c980 	call	9c98 <__sprint_r>
    36e4:	103c781e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    36e8:	d8c02017 	ldw	r3,128(sp)
    36ec:	da000404 	addi	r8,sp,16
    36f0:	003de906 	br	2e98 <__alt_mem_onchip_memory2_0+0xf7002e98>
    36f4:	d9002d17 	ldw	r4,180(sp)
    36f8:	d9801e04 	addi	r6,sp,120
    36fc:	b80b883a 	mov	r5,r23
    3700:	0009c980 	call	9c98 <__sprint_r>
    3704:	103c701e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3708:	d8c02017 	ldw	r3,128(sp)
    370c:	da000404 	addi	r8,sp,16
    3710:	003d9b06 	br	2d80 <__alt_mem_onchip_memory2_0+0xf7002d80>
    3714:	d9002d17 	ldw	r4,180(sp)
    3718:	d9801e04 	addi	r6,sp,120
    371c:	b80b883a 	mov	r5,r23
    3720:	0009c980 	call	9c98 <__sprint_r>
    3724:	103c681e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3728:	d8c02017 	ldw	r3,128(sp)
    372c:	da000404 	addi	r8,sp,16
    3730:	003da106 	br	2db8 <__alt_mem_onchip_memory2_0+0xf7002db8>
    3734:	d9402a17 	ldw	r5,168(sp)
    3738:	d8002785 	stb	zero,158(sp)
    373c:	283f0616 	blt	r5,zero,3358 <__alt_mem_onchip_memory2_0+0xf7003358>
    3740:	00ffdfc4 	movi	r3,-129
    3744:	9d84b03a 	or	r2,r19,r22
    3748:	90e4703a 	and	r18,r18,r3
    374c:	103c3b26 	beq	r2,zero,283c <__alt_mem_onchip_memory2_0+0xf700283c>
    3750:	0039883a 	mov	fp,zero
    3754:	003e5806 	br	30b8 <__alt_mem_onchip_memory2_0+0xf70030b8>
    3758:	9080040c 	andi	r2,r18,16
    375c:	1001b326 	beq	r2,zero,3e2c <___vfprintf_internal_r+0x1974>
    3760:	d8c02e17 	ldw	r3,184(sp)
    3764:	d9002a17 	ldw	r4,168(sp)
    3768:	d8002785 	stb	zero,158(sp)
    376c:	18800104 	addi	r2,r3,4
    3770:	1cc00017 	ldw	r19,0(r3)
    3774:	002d883a 	mov	r22,zero
    3778:	2001b516 	blt	r4,zero,3e50 <___vfprintf_internal_r+0x1998>
    377c:	00ffdfc4 	movi	r3,-129
    3780:	d8802e15 	stw	r2,184(sp)
    3784:	90e4703a 	and	r18,r18,r3
    3788:	983d0526 	beq	r19,zero,2ba0 <__alt_mem_onchip_memory2_0+0xf7002ba0>
    378c:	0039883a 	mov	fp,zero
    3790:	003d0806 	br	2bb4 <__alt_mem_onchip_memory2_0+0xf7002bb4>
    3794:	dc402617 	ldw	r17,152(sp)
    3798:	0441d30e 	bge	zero,r17,3ee8 <___vfprintf_internal_r+0x1a30>
    379c:	dc403217 	ldw	r17,200(sp)
    37a0:	d8803317 	ldw	r2,204(sp)
    37a4:	1440010e 	bge	r2,r17,37ac <___vfprintf_internal_r+0x12f4>
    37a8:	1023883a 	mov	r17,r2
    37ac:	04400a0e 	bge	zero,r17,37d8 <___vfprintf_internal_r+0x1320>
    37b0:	d8801f17 	ldw	r2,124(sp)
    37b4:	1c47883a 	add	r3,r3,r17
    37b8:	44000015 	stw	r16,0(r8)
    37bc:	10800044 	addi	r2,r2,1
    37c0:	44400115 	stw	r17,4(r8)
    37c4:	d8c02015 	stw	r3,128(sp)
    37c8:	d8801f15 	stw	r2,124(sp)
    37cc:	010001c4 	movi	r4,7
    37d0:	20826516 	blt	r4,r2,4168 <___vfprintf_internal_r+0x1cb0>
    37d4:	42000204 	addi	r8,r8,8
    37d8:	88026116 	blt	r17,zero,4160 <___vfprintf_internal_r+0x1ca8>
    37dc:	d9003217 	ldw	r4,200(sp)
    37e0:	2463c83a 	sub	r17,r4,r17
    37e4:	04407b0e 	bge	zero,r17,39d4 <___vfprintf_internal_r+0x151c>
    37e8:	05800404 	movi	r22,16
    37ec:	d8801f17 	ldw	r2,124(sp)
    37f0:	b4419d0e 	bge	r22,r17,3e68 <___vfprintf_internal_r+0x19b0>
    37f4:	01000074 	movhi	r4,1
    37f8:	21087f84 	addi	r4,r4,8702
    37fc:	d9002c15 	stw	r4,176(sp)
    3800:	070001c4 	movi	fp,7
    3804:	dcc02d17 	ldw	r19,180(sp)
    3808:	00000306 	br	3818 <___vfprintf_internal_r+0x1360>
    380c:	42000204 	addi	r8,r8,8
    3810:	8c7ffc04 	addi	r17,r17,-16
    3814:	b441970e 	bge	r22,r17,3e74 <___vfprintf_internal_r+0x19bc>
    3818:	18c00404 	addi	r3,r3,16
    381c:	10800044 	addi	r2,r2,1
    3820:	45000015 	stw	r20,0(r8)
    3824:	45800115 	stw	r22,4(r8)
    3828:	d8c02015 	stw	r3,128(sp)
    382c:	d8801f15 	stw	r2,124(sp)
    3830:	e0bff60e 	bge	fp,r2,380c <__alt_mem_onchip_memory2_0+0xf700380c>
    3834:	d9801e04 	addi	r6,sp,120
    3838:	b80b883a 	mov	r5,r23
    383c:	9809883a 	mov	r4,r19
    3840:	0009c980 	call	9c98 <__sprint_r>
    3844:	103c201e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3848:	d8c02017 	ldw	r3,128(sp)
    384c:	d8801f17 	ldw	r2,124(sp)
    3850:	da000404 	addi	r8,sp,16
    3854:	003fee06 	br	3810 <__alt_mem_onchip_memory2_0+0xf7003810>
    3858:	d9002d17 	ldw	r4,180(sp)
    385c:	d9801e04 	addi	r6,sp,120
    3860:	b80b883a 	mov	r5,r23
    3864:	0009c980 	call	9c98 <__sprint_r>
    3868:	103c171e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    386c:	d8c02017 	ldw	r3,128(sp)
    3870:	df002787 	ldb	fp,158(sp)
    3874:	da000404 	addi	r8,sp,16
    3878:	003d3406 	br	2d4c <__alt_mem_onchip_memory2_0+0xf7002d4c>
    387c:	9080040c 	andi	r2,r18,16
    3880:	10016126 	beq	r2,zero,3e08 <___vfprintf_internal_r+0x1950>
    3884:	d9402e17 	ldw	r5,184(sp)
    3888:	2cc00017 	ldw	r19,0(r5)
    388c:	29400104 	addi	r5,r5,4
    3890:	d9402e15 	stw	r5,184(sp)
    3894:	982dd7fa 	srai	r22,r19,31
    3898:	b005883a 	mov	r2,r22
    389c:	003c5a06 	br	2a08 <__alt_mem_onchip_memory2_0+0xf7002a08>
    38a0:	9080040c 	andi	r2,r18,16
    38a4:	10003526 	beq	r2,zero,397c <___vfprintf_internal_r+0x14c4>
    38a8:	d8c02e17 	ldw	r3,184(sp)
    38ac:	d9002a17 	ldw	r4,168(sp)
    38b0:	d8002785 	stb	zero,158(sp)
    38b4:	18800104 	addi	r2,r3,4
    38b8:	1cc00017 	ldw	r19,0(r3)
    38bc:	002d883a 	mov	r22,zero
    38c0:	20003716 	blt	r4,zero,39a0 <___vfprintf_internal_r+0x14e8>
    38c4:	00ffdfc4 	movi	r3,-129
    38c8:	d8802e15 	stw	r2,184(sp)
    38cc:	90e4703a 	and	r18,r18,r3
    38d0:	0039883a 	mov	fp,zero
    38d4:	983dd426 	beq	r19,zero,3028 <__alt_mem_onchip_memory2_0+0xf7003028>
    38d8:	00800244 	movi	r2,9
    38dc:	14fc5336 	bltu	r2,r19,2a2c <__alt_mem_onchip_memory2_0+0xf7002a2c>
    38e0:	d8c02817 	ldw	r3,160(sp)
    38e4:	dc001dc4 	addi	r16,sp,119
    38e8:	9cc00c04 	addi	r19,r19,48
    38ec:	1c07c83a 	sub	r3,r3,r16
    38f0:	dcc01dc5 	stb	r19,119(sp)
    38f4:	d8c02b15 	stw	r3,172(sp)
    38f8:	003cc606 	br	2c14 <__alt_mem_onchip_memory2_0+0xf7002c14>
    38fc:	d8803317 	ldw	r2,204(sp)
    3900:	143fffc4 	addi	r16,r2,-1
    3904:	043f4d0e 	bge	zero,r16,363c <__alt_mem_onchip_memory2_0+0xf700363c>
    3908:	07000404 	movi	fp,16
    390c:	e400810e 	bge	fp,r16,3b14 <___vfprintf_internal_r+0x165c>
    3910:	01400074 	movhi	r5,1
    3914:	29487f84 	addi	r5,r5,8702
    3918:	d9402c15 	stw	r5,176(sp)
    391c:	01c001c4 	movi	r7,7
    3920:	dcc02d17 	ldw	r19,180(sp)
    3924:	00000306 	br	3934 <___vfprintf_internal_r+0x147c>
    3928:	b5800204 	addi	r22,r22,8
    392c:	843ffc04 	addi	r16,r16,-16
    3930:	e4007b0e 	bge	fp,r16,3b20 <___vfprintf_internal_r+0x1668>
    3934:	18c00404 	addi	r3,r3,16
    3938:	8c400044 	addi	r17,r17,1
    393c:	b5000015 	stw	r20,0(r22)
    3940:	b7000115 	stw	fp,4(r22)
    3944:	d8c02015 	stw	r3,128(sp)
    3948:	dc401f15 	stw	r17,124(sp)
    394c:	3c7ff60e 	bge	r7,r17,3928 <__alt_mem_onchip_memory2_0+0xf7003928>
    3950:	d9801e04 	addi	r6,sp,120
    3954:	b80b883a 	mov	r5,r23
    3958:	9809883a 	mov	r4,r19
    395c:	d9c03c15 	stw	r7,240(sp)
    3960:	0009c980 	call	9c98 <__sprint_r>
    3964:	d9c03c17 	ldw	r7,240(sp)
    3968:	103bd71e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    396c:	d8c02017 	ldw	r3,128(sp)
    3970:	dc401f17 	ldw	r17,124(sp)
    3974:	dd800404 	addi	r22,sp,16
    3978:	003fec06 	br	392c <__alt_mem_onchip_memory2_0+0xf700392c>
    397c:	9080100c 	andi	r2,r18,64
    3980:	d8002785 	stb	zero,158(sp)
    3984:	10010e26 	beq	r2,zero,3dc0 <___vfprintf_internal_r+0x1908>
    3988:	d9402e17 	ldw	r5,184(sp)
    398c:	d8c02a17 	ldw	r3,168(sp)
    3990:	002d883a 	mov	r22,zero
    3994:	28800104 	addi	r2,r5,4
    3998:	2cc0000b 	ldhu	r19,0(r5)
    399c:	183fc90e 	bge	r3,zero,38c4 <__alt_mem_onchip_memory2_0+0xf70038c4>
    39a0:	d8802e15 	stw	r2,184(sp)
    39a4:	0039883a 	mov	fp,zero
    39a8:	9d84b03a 	or	r2,r19,r22
    39ac:	103c1e1e 	bne	r2,zero,2a28 <__alt_mem_onchip_memory2_0+0xf7002a28>
    39b0:	00800044 	movi	r2,1
    39b4:	003e6c06 	br	3368 <__alt_mem_onchip_memory2_0+0xf7003368>
    39b8:	d9002d17 	ldw	r4,180(sp)
    39bc:	d9801e04 	addi	r6,sp,120
    39c0:	b80b883a 	mov	r5,r23
    39c4:	0009c980 	call	9c98 <__sprint_r>
    39c8:	103bbf1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    39cc:	d8c02017 	ldw	r3,128(sp)
    39d0:	da000404 	addi	r8,sp,16
    39d4:	d9003217 	ldw	r4,200(sp)
    39d8:	d8802617 	ldw	r2,152(sp)
    39dc:	d9403317 	ldw	r5,204(sp)
    39e0:	8123883a 	add	r17,r16,r4
    39e4:	11400216 	blt	r2,r5,39f0 <___vfprintf_internal_r+0x1538>
    39e8:	9100004c 	andi	r4,r18,1
    39ec:	20000d26 	beq	r4,zero,3a24 <___vfprintf_internal_r+0x156c>
    39f0:	d9003717 	ldw	r4,220(sp)
    39f4:	d9403417 	ldw	r5,208(sp)
    39f8:	1907883a 	add	r3,r3,r4
    39fc:	d9001f17 	ldw	r4,124(sp)
    3a00:	41400015 	stw	r5,0(r8)
    3a04:	d9403717 	ldw	r5,220(sp)
    3a08:	21000044 	addi	r4,r4,1
    3a0c:	d8c02015 	stw	r3,128(sp)
    3a10:	41400115 	stw	r5,4(r8)
    3a14:	d9001f15 	stw	r4,124(sp)
    3a18:	014001c4 	movi	r5,7
    3a1c:	2901e816 	blt	r5,r4,41c0 <___vfprintf_internal_r+0x1d08>
    3a20:	42000204 	addi	r8,r8,8
    3a24:	d9003317 	ldw	r4,204(sp)
    3a28:	8121883a 	add	r16,r16,r4
    3a2c:	2085c83a 	sub	r2,r4,r2
    3a30:	8461c83a 	sub	r16,r16,r17
    3a34:	1400010e 	bge	r2,r16,3a3c <___vfprintf_internal_r+0x1584>
    3a38:	1021883a 	mov	r16,r2
    3a3c:	04000a0e 	bge	zero,r16,3a68 <___vfprintf_internal_r+0x15b0>
    3a40:	d9001f17 	ldw	r4,124(sp)
    3a44:	1c07883a 	add	r3,r3,r16
    3a48:	44400015 	stw	r17,0(r8)
    3a4c:	21000044 	addi	r4,r4,1
    3a50:	44000115 	stw	r16,4(r8)
    3a54:	d8c02015 	stw	r3,128(sp)
    3a58:	d9001f15 	stw	r4,124(sp)
    3a5c:	014001c4 	movi	r5,7
    3a60:	2901fb16 	blt	r5,r4,4250 <___vfprintf_internal_r+0x1d98>
    3a64:	42000204 	addi	r8,r8,8
    3a68:	8001f716 	blt	r16,zero,4248 <___vfprintf_internal_r+0x1d90>
    3a6c:	1421c83a 	sub	r16,r2,r16
    3a70:	043d160e 	bge	zero,r16,2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    3a74:	04400404 	movi	r17,16
    3a78:	d8801f17 	ldw	r2,124(sp)
    3a7c:	8c3efb0e 	bge	r17,r16,366c <__alt_mem_onchip_memory2_0+0xf700366c>
    3a80:	01400074 	movhi	r5,1
    3a84:	29487f84 	addi	r5,r5,8702
    3a88:	d9402c15 	stw	r5,176(sp)
    3a8c:	058001c4 	movi	r22,7
    3a90:	dcc02d17 	ldw	r19,180(sp)
    3a94:	00000306 	br	3aa4 <___vfprintf_internal_r+0x15ec>
    3a98:	42000204 	addi	r8,r8,8
    3a9c:	843ffc04 	addi	r16,r16,-16
    3aa0:	8c3ef50e 	bge	r17,r16,3678 <__alt_mem_onchip_memory2_0+0xf7003678>
    3aa4:	18c00404 	addi	r3,r3,16
    3aa8:	10800044 	addi	r2,r2,1
    3aac:	45000015 	stw	r20,0(r8)
    3ab0:	44400115 	stw	r17,4(r8)
    3ab4:	d8c02015 	stw	r3,128(sp)
    3ab8:	d8801f15 	stw	r2,124(sp)
    3abc:	b0bff60e 	bge	r22,r2,3a98 <__alt_mem_onchip_memory2_0+0xf7003a98>
    3ac0:	d9801e04 	addi	r6,sp,120
    3ac4:	b80b883a 	mov	r5,r23
    3ac8:	9809883a 	mov	r4,r19
    3acc:	0009c980 	call	9c98 <__sprint_r>
    3ad0:	103b7d1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3ad4:	d8c02017 	ldw	r3,128(sp)
    3ad8:	d8801f17 	ldw	r2,124(sp)
    3adc:	da000404 	addi	r8,sp,16
    3ae0:	003fee06 	br	3a9c <__alt_mem_onchip_memory2_0+0xf7003a9c>
    3ae4:	9088703a 	and	r4,r18,r2
    3ae8:	203eab1e 	bne	r4,zero,3598 <__alt_mem_onchip_memory2_0+0xf7003598>
    3aec:	dc401f17 	ldw	r17,124(sp)
    3af0:	40800115 	stw	r2,4(r8)
    3af4:	44000015 	stw	r16,0(r8)
    3af8:	8c400044 	addi	r17,r17,1
    3afc:	d8c02015 	stw	r3,128(sp)
    3b00:	dc401f15 	stw	r17,124(sp)
    3b04:	008001c4 	movi	r2,7
    3b08:	14400e16 	blt	r2,r17,3b44 <___vfprintf_internal_r+0x168c>
    3b0c:	45800204 	addi	r22,r8,8
    3b10:	003eca06 	br	363c <__alt_mem_onchip_memory2_0+0xf700363c>
    3b14:	01000074 	movhi	r4,1
    3b18:	21087f84 	addi	r4,r4,8702
    3b1c:	d9002c15 	stw	r4,176(sp)
    3b20:	d8802c17 	ldw	r2,176(sp)
    3b24:	1c07883a 	add	r3,r3,r16
    3b28:	8c400044 	addi	r17,r17,1
    3b2c:	b0800015 	stw	r2,0(r22)
    3b30:	b4000115 	stw	r16,4(r22)
    3b34:	d8c02015 	stw	r3,128(sp)
    3b38:	dc401f15 	stw	r17,124(sp)
    3b3c:	008001c4 	movi	r2,7
    3b40:	147ebd0e 	bge	r2,r17,3638 <__alt_mem_onchip_memory2_0+0xf7003638>
    3b44:	d9002d17 	ldw	r4,180(sp)
    3b48:	d9801e04 	addi	r6,sp,120
    3b4c:	b80b883a 	mov	r5,r23
    3b50:	0009c980 	call	9c98 <__sprint_r>
    3b54:	103b5c1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3b58:	d8c02017 	ldw	r3,128(sp)
    3b5c:	dc401f17 	ldw	r17,124(sp)
    3b60:	dd800404 	addi	r22,sp,16
    3b64:	003eb506 	br	363c <__alt_mem_onchip_memory2_0+0xf700363c>
    3b68:	d9002d17 	ldw	r4,180(sp)
    3b6c:	d9801e04 	addi	r6,sp,120
    3b70:	b80b883a 	mov	r5,r23
    3b74:	0009c980 	call	9c98 <__sprint_r>
    3b78:	103b531e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3b7c:	d8c02017 	ldw	r3,128(sp)
    3b80:	dc401f17 	ldw	r17,124(sp)
    3b84:	da000404 	addi	r8,sp,16
    3b88:	003e8d06 	br	35c0 <__alt_mem_onchip_memory2_0+0xf70035c0>
    3b8c:	d9002d17 	ldw	r4,180(sp)
    3b90:	d9801e04 	addi	r6,sp,120
    3b94:	b80b883a 	mov	r5,r23
    3b98:	0009c980 	call	9c98 <__sprint_r>
    3b9c:	103b4a1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3ba0:	d8c02017 	ldw	r3,128(sp)
    3ba4:	dc401f17 	ldw	r17,124(sp)
    3ba8:	dd800404 	addi	r22,sp,16
    3bac:	003e8f06 	br	35ec <__alt_mem_onchip_memory2_0+0xf70035ec>
    3bb0:	0027883a 	mov	r19,zero
    3bb4:	003f4a06 	br	38e0 <__alt_mem_onchip_memory2_0+0xf70038e0>
    3bb8:	d9002d17 	ldw	r4,180(sp)
    3bbc:	d9801e04 	addi	r6,sp,120
    3bc0:	b80b883a 	mov	r5,r23
    3bc4:	0009c980 	call	9c98 <__sprint_r>
    3bc8:	103b3f1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3bcc:	d8c02017 	ldw	r3,128(sp)
    3bd0:	da000404 	addi	r8,sp,16
    3bd4:	003c7b06 	br	2dc4 <__alt_mem_onchip_memory2_0+0xf7002dc4>
    3bd8:	d9402a17 	ldw	r5,168(sp)
    3bdc:	04e7c83a 	sub	r19,zero,r19
    3be0:	07000b44 	movi	fp,45
    3be4:	9804c03a 	cmpne	r2,r19,zero
    3be8:	05adc83a 	sub	r22,zero,r22
    3bec:	df002785 	stb	fp,158(sp)
    3bf0:	b0adc83a 	sub	r22,r22,r2
    3bf4:	28017b16 	blt	r5,zero,41e4 <___vfprintf_internal_r+0x1d2c>
    3bf8:	00bfdfc4 	movi	r2,-129
    3bfc:	90a4703a 	and	r18,r18,r2
    3c00:	003b8906 	br	2a28 <__alt_mem_onchip_memory2_0+0xf7002a28>
    3c04:	d9003617 	ldw	r4,216(sp)
    3c08:	d9403817 	ldw	r5,224(sp)
    3c0c:	da003d15 	stw	r8,244(sp)
    3c10:	00098bc0 	call	98bc <__fpclassifyd>
    3c14:	da003d17 	ldw	r8,244(sp)
    3c18:	1000f026 	beq	r2,zero,3fdc <___vfprintf_internal_r+0x1b24>
    3c1c:	d9002a17 	ldw	r4,168(sp)
    3c20:	05bff7c4 	movi	r22,-33
    3c24:	00bfffc4 	movi	r2,-1
    3c28:	8dac703a 	and	r22,r17,r22
    3c2c:	20820026 	beq	r4,r2,4430 <___vfprintf_internal_r+0x1f78>
    3c30:	008011c4 	movi	r2,71
    3c34:	b081f726 	beq	r22,r2,4414 <___vfprintf_internal_r+0x1f5c>
    3c38:	d9003817 	ldw	r4,224(sp)
    3c3c:	90c04014 	ori	r3,r18,256
    3c40:	d8c02c15 	stw	r3,176(sp)
    3c44:	20021516 	blt	r4,zero,449c <___vfprintf_internal_r+0x1fe4>
    3c48:	dcc03817 	ldw	r19,224(sp)
    3c4c:	d8002905 	stb	zero,164(sp)
    3c50:	00801984 	movi	r2,102
    3c54:	8881f926 	beq	r17,r2,443c <___vfprintf_internal_r+0x1f84>
    3c58:	00801184 	movi	r2,70
    3c5c:	88821c26 	beq	r17,r2,44d0 <___vfprintf_internal_r+0x2018>
    3c60:	00801144 	movi	r2,69
    3c64:	b081ef26 	beq	r22,r2,4424 <___vfprintf_internal_r+0x1f6c>
    3c68:	d8c02a17 	ldw	r3,168(sp)
    3c6c:	d8802104 	addi	r2,sp,132
    3c70:	d8800315 	stw	r2,12(sp)
    3c74:	d9403617 	ldw	r5,216(sp)
    3c78:	d8802504 	addi	r2,sp,148
    3c7c:	d9002d17 	ldw	r4,180(sp)
    3c80:	d8800215 	stw	r2,8(sp)
    3c84:	d8802604 	addi	r2,sp,152
    3c88:	d8c00015 	stw	r3,0(sp)
    3c8c:	d8800115 	stw	r2,4(sp)
    3c90:	01c00084 	movi	r7,2
    3c94:	980d883a 	mov	r6,r19
    3c98:	d8c03c15 	stw	r3,240(sp)
    3c9c:	da003d15 	stw	r8,244(sp)
    3ca0:	0004be80 	call	4be8 <_dtoa_r>
    3ca4:	1021883a 	mov	r16,r2
    3ca8:	008019c4 	movi	r2,103
    3cac:	d8c03c17 	ldw	r3,240(sp)
    3cb0:	da003d17 	ldw	r8,244(sp)
    3cb4:	88817126 	beq	r17,r2,427c <___vfprintf_internal_r+0x1dc4>
    3cb8:	008011c4 	movi	r2,71
    3cbc:	88829126 	beq	r17,r2,4704 <___vfprintf_internal_r+0x224c>
    3cc0:	80f9883a 	add	fp,r16,r3
    3cc4:	d9003617 	ldw	r4,216(sp)
    3cc8:	000d883a 	mov	r6,zero
    3ccc:	000f883a 	mov	r7,zero
    3cd0:	980b883a 	mov	r5,r19
    3cd4:	da003d15 	stw	r8,244(sp)
    3cd8:	000dbf80 	call	dbf8 <__eqdf2>
    3cdc:	da003d17 	ldw	r8,244(sp)
    3ce0:	10018d26 	beq	r2,zero,4318 <___vfprintf_internal_r+0x1e60>
    3ce4:	d8802117 	ldw	r2,132(sp)
    3ce8:	1700062e 	bgeu	r2,fp,3d04 <___vfprintf_internal_r+0x184c>
    3cec:	01000c04 	movi	r4,48
    3cf0:	10c00044 	addi	r3,r2,1
    3cf4:	d8c02115 	stw	r3,132(sp)
    3cf8:	11000005 	stb	r4,0(r2)
    3cfc:	d8802117 	ldw	r2,132(sp)
    3d00:	173ffb36 	bltu	r2,fp,3cf0 <__alt_mem_onchip_memory2_0+0xf7003cf0>
    3d04:	1405c83a 	sub	r2,r2,r16
    3d08:	d8803315 	stw	r2,204(sp)
    3d0c:	008011c4 	movi	r2,71
    3d10:	b0817626 	beq	r22,r2,42ec <___vfprintf_internal_r+0x1e34>
    3d14:	00801944 	movi	r2,101
    3d18:	1442800e 	bge	r2,r17,471c <___vfprintf_internal_r+0x2264>
    3d1c:	d8c02617 	ldw	r3,152(sp)
    3d20:	00801984 	movi	r2,102
    3d24:	d8c03215 	stw	r3,200(sp)
    3d28:	8881fe26 	beq	r17,r2,4524 <___vfprintf_internal_r+0x206c>
    3d2c:	d8c03217 	ldw	r3,200(sp)
    3d30:	d9003317 	ldw	r4,204(sp)
    3d34:	1901dd16 	blt	r3,r4,44ac <___vfprintf_internal_r+0x1ff4>
    3d38:	9480004c 	andi	r18,r18,1
    3d3c:	90022b1e 	bne	r18,zero,45ec <___vfprintf_internal_r+0x2134>
    3d40:	1805883a 	mov	r2,r3
    3d44:	18028316 	blt	r3,zero,4754 <___vfprintf_internal_r+0x229c>
    3d48:	d8c03217 	ldw	r3,200(sp)
    3d4c:	044019c4 	movi	r17,103
    3d50:	d8c02b15 	stw	r3,172(sp)
    3d54:	df002907 	ldb	fp,164(sp)
    3d58:	e001531e 	bne	fp,zero,42a8 <___vfprintf_internal_r+0x1df0>
    3d5c:	df002783 	ldbu	fp,158(sp)
    3d60:	d8802915 	stw	r2,164(sp)
    3d64:	dc802c17 	ldw	r18,176(sp)
    3d68:	d8002a15 	stw	zero,168(sp)
    3d6c:	003baf06 	br	2c2c <__alt_mem_onchip_memory2_0+0xf7002c2c>
    3d70:	d8c02e17 	ldw	r3,184(sp)
    3d74:	d9002e17 	ldw	r4,184(sp)
    3d78:	d9402e17 	ldw	r5,184(sp)
    3d7c:	18c00017 	ldw	r3,0(r3)
    3d80:	21000117 	ldw	r4,4(r4)
    3d84:	29400204 	addi	r5,r5,8
    3d88:	d8c03615 	stw	r3,216(sp)
    3d8c:	d9003815 	stw	r4,224(sp)
    3d90:	d9402e15 	stw	r5,184(sp)
    3d94:	003b5006 	br	2ad8 <__alt_mem_onchip_memory2_0+0xf7002ad8>
    3d98:	ac400007 	ldb	r17,0(r21)
    3d9c:	003a2806 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    3da0:	9080100c 	andi	r2,r18,64
    3da4:	1000a826 	beq	r2,zero,4048 <___vfprintf_internal_r+0x1b90>
    3da8:	d8c02e17 	ldw	r3,184(sp)
    3dac:	002d883a 	mov	r22,zero
    3db0:	1cc0000b 	ldhu	r19,0(r3)
    3db4:	18c00104 	addi	r3,r3,4
    3db8:	d8c02e15 	stw	r3,184(sp)
    3dbc:	003caf06 	br	307c <__alt_mem_onchip_memory2_0+0xf700307c>
    3dc0:	d9002e17 	ldw	r4,184(sp)
    3dc4:	d9402a17 	ldw	r5,168(sp)
    3dc8:	002d883a 	mov	r22,zero
    3dcc:	20800104 	addi	r2,r4,4
    3dd0:	24c00017 	ldw	r19,0(r4)
    3dd4:	283ebb0e 	bge	r5,zero,38c4 <__alt_mem_onchip_memory2_0+0xf70038c4>
    3dd8:	003ef106 	br	39a0 <__alt_mem_onchip_memory2_0+0xf70039a0>
    3ddc:	9080040c 	andi	r2,r18,16
    3de0:	1000921e 	bne	r2,zero,402c <___vfprintf_internal_r+0x1b74>
    3de4:	9480100c 	andi	r18,r18,64
    3de8:	90013926 	beq	r18,zero,42d0 <___vfprintf_internal_r+0x1e18>
    3dec:	d9402e17 	ldw	r5,184(sp)
    3df0:	d8c02f17 	ldw	r3,188(sp)
    3df4:	28800017 	ldw	r2,0(r5)
    3df8:	29400104 	addi	r5,r5,4
    3dfc:	d9402e15 	stw	r5,184(sp)
    3e00:	10c0000d 	sth	r3,0(r2)
    3e04:	0039e406 	br	2598 <__alt_mem_onchip_memory2_0+0xf7002598>
    3e08:	9080100c 	andi	r2,r18,64
    3e0c:	10008026 	beq	r2,zero,4010 <___vfprintf_internal_r+0x1b58>
    3e10:	d8802e17 	ldw	r2,184(sp)
    3e14:	14c0000f 	ldh	r19,0(r2)
    3e18:	10800104 	addi	r2,r2,4
    3e1c:	d8802e15 	stw	r2,184(sp)
    3e20:	982dd7fa 	srai	r22,r19,31
    3e24:	b005883a 	mov	r2,r22
    3e28:	003af706 	br	2a08 <__alt_mem_onchip_memory2_0+0xf7002a08>
    3e2c:	9080100c 	andi	r2,r18,64
    3e30:	d8002785 	stb	zero,158(sp)
    3e34:	10008a1e 	bne	r2,zero,4060 <___vfprintf_internal_r+0x1ba8>
    3e38:	d9002e17 	ldw	r4,184(sp)
    3e3c:	d9402a17 	ldw	r5,168(sp)
    3e40:	002d883a 	mov	r22,zero
    3e44:	20800104 	addi	r2,r4,4
    3e48:	24c00017 	ldw	r19,0(r4)
    3e4c:	283e4b0e 	bge	r5,zero,377c <__alt_mem_onchip_memory2_0+0xf700377c>
    3e50:	9d86b03a 	or	r3,r19,r22
    3e54:	d8802e15 	stw	r2,184(sp)
    3e58:	183e4c1e 	bne	r3,zero,378c <__alt_mem_onchip_memory2_0+0xf700378c>
    3e5c:	0039883a 	mov	fp,zero
    3e60:	0005883a 	mov	r2,zero
    3e64:	003d4006 	br	3368 <__alt_mem_onchip_memory2_0+0xf7003368>
    3e68:	01400074 	movhi	r5,1
    3e6c:	29487f84 	addi	r5,r5,8702
    3e70:	d9402c15 	stw	r5,176(sp)
    3e74:	d9402c17 	ldw	r5,176(sp)
    3e78:	1c47883a 	add	r3,r3,r17
    3e7c:	10800044 	addi	r2,r2,1
    3e80:	41400015 	stw	r5,0(r8)
    3e84:	44400115 	stw	r17,4(r8)
    3e88:	d8c02015 	stw	r3,128(sp)
    3e8c:	d8801f15 	stw	r2,124(sp)
    3e90:	010001c4 	movi	r4,7
    3e94:	20bec816 	blt	r4,r2,39b8 <__alt_mem_onchip_memory2_0+0xf70039b8>
    3e98:	42000204 	addi	r8,r8,8
    3e9c:	003ecd06 	br	39d4 <__alt_mem_onchip_memory2_0+0xf70039d4>
    3ea0:	d9002a17 	ldw	r4,168(sp)
    3ea4:	d8002785 	stb	zero,158(sp)
    3ea8:	203d2d16 	blt	r4,zero,3360 <__alt_mem_onchip_memory2_0+0xf7003360>
    3eac:	00bfdfc4 	movi	r2,-129
    3eb0:	90a4703a 	and	r18,r18,r2
    3eb4:	003a6106 	br	283c <__alt_mem_onchip_memory2_0+0xf700283c>
    3eb8:	01000074 	movhi	r4,1
    3ebc:	21087f84 	addi	r4,r4,8702
    3ec0:	d9002c15 	stw	r4,176(sp)
    3ec4:	003bea06 	br	2e70 <__alt_mem_onchip_memory2_0+0xf7002e70>
    3ec8:	d9002d17 	ldw	r4,180(sp)
    3ecc:	d9801e04 	addi	r6,sp,120
    3ed0:	b80b883a 	mov	r5,r23
    3ed4:	0009c980 	call	9c98 <__sprint_r>
    3ed8:	103a7b1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3edc:	d8c02017 	ldw	r3,128(sp)
    3ee0:	da000404 	addi	r8,sp,16
    3ee4:	003d4106 	br	33ec <__alt_mem_onchip_memory2_0+0xf70033ec>
    3ee8:	d8801f17 	ldw	r2,124(sp)
    3eec:	01400074 	movhi	r5,1
    3ef0:	01000044 	movi	r4,1
    3ef4:	18c00044 	addi	r3,r3,1
    3ef8:	10800044 	addi	r2,r2,1
    3efc:	29487f04 	addi	r5,r5,8700
    3f00:	41000115 	stw	r4,4(r8)
    3f04:	41400015 	stw	r5,0(r8)
    3f08:	d8c02015 	stw	r3,128(sp)
    3f0c:	d8801f15 	stw	r2,124(sp)
    3f10:	010001c4 	movi	r4,7
    3f14:	20805c16 	blt	r4,r2,4088 <___vfprintf_internal_r+0x1bd0>
    3f18:	42000204 	addi	r8,r8,8
    3f1c:	8800041e 	bne	r17,zero,3f30 <___vfprintf_internal_r+0x1a78>
    3f20:	d8803317 	ldw	r2,204(sp)
    3f24:	1000021e 	bne	r2,zero,3f30 <___vfprintf_internal_r+0x1a78>
    3f28:	9080004c 	andi	r2,r18,1
    3f2c:	103be726 	beq	r2,zero,2ecc <__alt_mem_onchip_memory2_0+0xf7002ecc>
    3f30:	d9003717 	ldw	r4,220(sp)
    3f34:	d8801f17 	ldw	r2,124(sp)
    3f38:	d9403417 	ldw	r5,208(sp)
    3f3c:	20c7883a 	add	r3,r4,r3
    3f40:	10800044 	addi	r2,r2,1
    3f44:	41000115 	stw	r4,4(r8)
    3f48:	41400015 	stw	r5,0(r8)
    3f4c:	d8c02015 	stw	r3,128(sp)
    3f50:	d8801f15 	stw	r2,124(sp)
    3f54:	010001c4 	movi	r4,7
    3f58:	20812116 	blt	r4,r2,43e0 <___vfprintf_internal_r+0x1f28>
    3f5c:	42000204 	addi	r8,r8,8
    3f60:	0463c83a 	sub	r17,zero,r17
    3f64:	0440730e 	bge	zero,r17,4134 <___vfprintf_internal_r+0x1c7c>
    3f68:	05800404 	movi	r22,16
    3f6c:	b440860e 	bge	r22,r17,4188 <___vfprintf_internal_r+0x1cd0>
    3f70:	01400074 	movhi	r5,1
    3f74:	29487f84 	addi	r5,r5,8702
    3f78:	d9402c15 	stw	r5,176(sp)
    3f7c:	070001c4 	movi	fp,7
    3f80:	dcc02d17 	ldw	r19,180(sp)
    3f84:	00000306 	br	3f94 <___vfprintf_internal_r+0x1adc>
    3f88:	42000204 	addi	r8,r8,8
    3f8c:	8c7ffc04 	addi	r17,r17,-16
    3f90:	b440800e 	bge	r22,r17,4194 <___vfprintf_internal_r+0x1cdc>
    3f94:	18c00404 	addi	r3,r3,16
    3f98:	10800044 	addi	r2,r2,1
    3f9c:	45000015 	stw	r20,0(r8)
    3fa0:	45800115 	stw	r22,4(r8)
    3fa4:	d8c02015 	stw	r3,128(sp)
    3fa8:	d8801f15 	stw	r2,124(sp)
    3fac:	e0bff60e 	bge	fp,r2,3f88 <__alt_mem_onchip_memory2_0+0xf7003f88>
    3fb0:	d9801e04 	addi	r6,sp,120
    3fb4:	b80b883a 	mov	r5,r23
    3fb8:	9809883a 	mov	r4,r19
    3fbc:	0009c980 	call	9c98 <__sprint_r>
    3fc0:	103a411e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    3fc4:	d8c02017 	ldw	r3,128(sp)
    3fc8:	d8801f17 	ldw	r2,124(sp)
    3fcc:	da000404 	addi	r8,sp,16
    3fd0:	003fee06 	br	3f8c <__alt_mem_onchip_memory2_0+0xf7003f8c>
    3fd4:	00bfffc4 	movi	r2,-1
    3fd8:	003a3f06 	br	28d8 <__alt_mem_onchip_memory2_0+0xf70028d8>
    3fdc:	008011c4 	movi	r2,71
    3fe0:	1440b816 	blt	r2,r17,42c4 <___vfprintf_internal_r+0x1e0c>
    3fe4:	04000074 	movhi	r16,1
    3fe8:	84087104 	addi	r16,r16,8644
    3fec:	00c000c4 	movi	r3,3
    3ff0:	00bfdfc4 	movi	r2,-129
    3ff4:	d8c02915 	stw	r3,164(sp)
    3ff8:	90a4703a 	and	r18,r18,r2
    3ffc:	df002783 	ldbu	fp,158(sp)
    4000:	d8c02b15 	stw	r3,172(sp)
    4004:	d8002a15 	stw	zero,168(sp)
    4008:	d8003215 	stw	zero,200(sp)
    400c:	003b0706 	br	2c2c <__alt_mem_onchip_memory2_0+0xf7002c2c>
    4010:	d8c02e17 	ldw	r3,184(sp)
    4014:	1cc00017 	ldw	r19,0(r3)
    4018:	18c00104 	addi	r3,r3,4
    401c:	d8c02e15 	stw	r3,184(sp)
    4020:	982dd7fa 	srai	r22,r19,31
    4024:	b005883a 	mov	r2,r22
    4028:	003a7706 	br	2a08 <__alt_mem_onchip_memory2_0+0xf7002a08>
    402c:	d8c02e17 	ldw	r3,184(sp)
    4030:	d9002f17 	ldw	r4,188(sp)
    4034:	18800017 	ldw	r2,0(r3)
    4038:	18c00104 	addi	r3,r3,4
    403c:	d8c02e15 	stw	r3,184(sp)
    4040:	11000015 	stw	r4,0(r2)
    4044:	00395406 	br	2598 <__alt_mem_onchip_memory2_0+0xf7002598>
    4048:	d9002e17 	ldw	r4,184(sp)
    404c:	002d883a 	mov	r22,zero
    4050:	24c00017 	ldw	r19,0(r4)
    4054:	21000104 	addi	r4,r4,4
    4058:	d9002e15 	stw	r4,184(sp)
    405c:	003c0706 	br	307c <__alt_mem_onchip_memory2_0+0xf700307c>
    4060:	d9402e17 	ldw	r5,184(sp)
    4064:	d8c02a17 	ldw	r3,168(sp)
    4068:	002d883a 	mov	r22,zero
    406c:	28800104 	addi	r2,r5,4
    4070:	2cc0000b 	ldhu	r19,0(r5)
    4074:	183dc10e 	bge	r3,zero,377c <__alt_mem_onchip_memory2_0+0xf700377c>
    4078:	003f7506 	br	3e50 <__alt_mem_onchip_memory2_0+0xf7003e50>
    407c:	04000074 	movhi	r16,1
    4080:	84086f04 	addi	r16,r16,8636
    4084:	003aa706 	br	2b24 <__alt_mem_onchip_memory2_0+0xf7002b24>
    4088:	d9002d17 	ldw	r4,180(sp)
    408c:	d9801e04 	addi	r6,sp,120
    4090:	b80b883a 	mov	r5,r23
    4094:	0009c980 	call	9c98 <__sprint_r>
    4098:	103a0b1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    409c:	dc402617 	ldw	r17,152(sp)
    40a0:	d8c02017 	ldw	r3,128(sp)
    40a4:	da000404 	addi	r8,sp,16
    40a8:	003f9c06 	br	3f1c <__alt_mem_onchip_memory2_0+0xf7003f1c>
    40ac:	ac400043 	ldbu	r17,1(r21)
    40b0:	84000814 	ori	r16,r16,32
    40b4:	ad400044 	addi	r21,r21,1
    40b8:	8c403fcc 	andi	r17,r17,255
    40bc:	8c40201c 	xori	r17,r17,128
    40c0:	8c7fe004 	addi	r17,r17,-128
    40c4:	00395e06 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    40c8:	d8c02e15 	stw	r3,184(sp)
    40cc:	0039883a 	mov	fp,zero
    40d0:	003e3506 	br	39a8 <__alt_mem_onchip_memory2_0+0xf70039a8>
    40d4:	d9002d17 	ldw	r4,180(sp)
    40d8:	d9801e04 	addi	r6,sp,120
    40dc:	b80b883a 	mov	r5,r23
    40e0:	0009c980 	call	9c98 <__sprint_r>
    40e4:	1039f81e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    40e8:	d8c02017 	ldw	r3,128(sp)
    40ec:	da000404 	addi	r8,sp,16
    40f0:	003cd006 	br	3434 <__alt_mem_onchip_memory2_0+0xf7003434>
    40f4:	8009883a 	mov	r4,r16
    40f8:	df003d15 	stw	fp,244(sp)
    40fc:	00024200 	call	2420 <strlen>
    4100:	d8802b15 	stw	r2,172(sp)
    4104:	da003d17 	ldw	r8,244(sp)
    4108:	103c200e 	bge	r2,zero,318c <__alt_mem_onchip_memory2_0+0xf700318c>
    410c:	0005883a 	mov	r2,zero
    4110:	003c1e06 	br	318c <__alt_mem_onchip_memory2_0+0xf700318c>
    4114:	d9002d17 	ldw	r4,180(sp)
    4118:	d9801e04 	addi	r6,sp,120
    411c:	b80b883a 	mov	r5,r23
    4120:	0009c980 	call	9c98 <__sprint_r>
    4124:	1039e81e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    4128:	d8c02017 	ldw	r3,128(sp)
    412c:	d8801f17 	ldw	r2,124(sp)
    4130:	da000404 	addi	r8,sp,16
    4134:	d9403317 	ldw	r5,204(sp)
    4138:	10800044 	addi	r2,r2,1
    413c:	44000015 	stw	r16,0(r8)
    4140:	28c7883a 	add	r3,r5,r3
    4144:	003b5b06 	br	2eb4 <__alt_mem_onchip_memory2_0+0xf7002eb4>
    4148:	01000074 	movhi	r4,1
    414c:	21088384 	addi	r4,r4,8718
    4150:	d9003515 	stw	r4,212(sp)
    4154:	003af206 	br	2d20 <__alt_mem_onchip_memory2_0+0xf7002d20>
    4158:	013fffc4 	movi	r4,-1
    415c:	003a0806 	br	2980 <__alt_mem_onchip_memory2_0+0xf7002980>
    4160:	0023883a 	mov	r17,zero
    4164:	003d9d06 	br	37dc <__alt_mem_onchip_memory2_0+0xf70037dc>
    4168:	d9002d17 	ldw	r4,180(sp)
    416c:	d9801e04 	addi	r6,sp,120
    4170:	b80b883a 	mov	r5,r23
    4174:	0009c980 	call	9c98 <__sprint_r>
    4178:	1039d31e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    417c:	d8c02017 	ldw	r3,128(sp)
    4180:	da000404 	addi	r8,sp,16
    4184:	003d9406 	br	37d8 <__alt_mem_onchip_memory2_0+0xf70037d8>
    4188:	01000074 	movhi	r4,1
    418c:	21087f84 	addi	r4,r4,8702
    4190:	d9002c15 	stw	r4,176(sp)
    4194:	d9002c17 	ldw	r4,176(sp)
    4198:	1c47883a 	add	r3,r3,r17
    419c:	10800044 	addi	r2,r2,1
    41a0:	41000015 	stw	r4,0(r8)
    41a4:	44400115 	stw	r17,4(r8)
    41a8:	d8c02015 	stw	r3,128(sp)
    41ac:	d8801f15 	stw	r2,124(sp)
    41b0:	010001c4 	movi	r4,7
    41b4:	20bfd716 	blt	r4,r2,4114 <__alt_mem_onchip_memory2_0+0xf7004114>
    41b8:	42000204 	addi	r8,r8,8
    41bc:	003fdd06 	br	4134 <__alt_mem_onchip_memory2_0+0xf7004134>
    41c0:	d9002d17 	ldw	r4,180(sp)
    41c4:	d9801e04 	addi	r6,sp,120
    41c8:	b80b883a 	mov	r5,r23
    41cc:	0009c980 	call	9c98 <__sprint_r>
    41d0:	1039bd1e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    41d4:	d8802617 	ldw	r2,152(sp)
    41d8:	d8c02017 	ldw	r3,128(sp)
    41dc:	da000404 	addi	r8,sp,16
    41e0:	003e1006 	br	3a24 <__alt_mem_onchip_memory2_0+0xf7003a24>
    41e4:	00800044 	movi	r2,1
    41e8:	10803fcc 	andi	r2,r2,255
    41ec:	00c00044 	movi	r3,1
    41f0:	10fa0d26 	beq	r2,r3,2a28 <__alt_mem_onchip_memory2_0+0xf7002a28>
    41f4:	00c00084 	movi	r3,2
    41f8:	10fbaf26 	beq	r2,r3,30b8 <__alt_mem_onchip_memory2_0+0xf70030b8>
    41fc:	003a6d06 	br	2bb4 <__alt_mem_onchip_memory2_0+0xf7002bb4>
    4200:	01000074 	movhi	r4,1
    4204:	21088384 	addi	r4,r4,8718
    4208:	d9003515 	stw	r4,212(sp)
    420c:	003b5406 	br	2f60 <__alt_mem_onchip_memory2_0+0xf7002f60>
    4210:	d8802a17 	ldw	r2,168(sp)
    4214:	00c00184 	movi	r3,6
    4218:	1880012e 	bgeu	r3,r2,4220 <___vfprintf_internal_r+0x1d68>
    421c:	1805883a 	mov	r2,r3
    4220:	d8802b15 	stw	r2,172(sp)
    4224:	1000ef16 	blt	r2,zero,45e4 <___vfprintf_internal_r+0x212c>
    4228:	04000074 	movhi	r16,1
    422c:	d8802915 	stw	r2,164(sp)
    4230:	dcc02e15 	stw	r19,184(sp)
    4234:	d8002a15 	stw	zero,168(sp)
    4238:	d8003215 	stw	zero,200(sp)
    423c:	84087d04 	addi	r16,r16,8692
    4240:	0039883a 	mov	fp,zero
    4244:	003a8006 	br	2c48 <__alt_mem_onchip_memory2_0+0xf7002c48>
    4248:	0021883a 	mov	r16,zero
    424c:	003e0706 	br	3a6c <__alt_mem_onchip_memory2_0+0xf7003a6c>
    4250:	d9002d17 	ldw	r4,180(sp)
    4254:	d9801e04 	addi	r6,sp,120
    4258:	b80b883a 	mov	r5,r23
    425c:	0009c980 	call	9c98 <__sprint_r>
    4260:	1039991e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    4264:	d8802617 	ldw	r2,152(sp)
    4268:	d9403317 	ldw	r5,204(sp)
    426c:	d8c02017 	ldw	r3,128(sp)
    4270:	da000404 	addi	r8,sp,16
    4274:	2885c83a 	sub	r2,r5,r2
    4278:	003dfb06 	br	3a68 <__alt_mem_onchip_memory2_0+0xf7003a68>
    427c:	9080004c 	andi	r2,r18,1
    4280:	103e8f1e 	bne	r2,zero,3cc0 <__alt_mem_onchip_memory2_0+0xf7003cc0>
    4284:	d8802117 	ldw	r2,132(sp)
    4288:	003e9e06 	br	3d04 <__alt_mem_onchip_memory2_0+0xf7003d04>
    428c:	1025883a 	mov	r18,r2
    4290:	0039883a 	mov	fp,zero
    4294:	00800084 	movi	r2,2
    4298:	003fd306 	br	41e8 <__alt_mem_onchip_memory2_0+0xf70041e8>
    429c:	07000b44 	movi	fp,45
    42a0:	df002785 	stb	fp,158(sp)
    42a4:	003a1b06 	br	2b14 <__alt_mem_onchip_memory2_0+0xf7002b14>
    42a8:	00c00b44 	movi	r3,45
    42ac:	d8c02785 	stb	r3,158(sp)
    42b0:	d8802915 	stw	r2,164(sp)
    42b4:	dc802c17 	ldw	r18,176(sp)
    42b8:	d8002a15 	stw	zero,168(sp)
    42bc:	07000b44 	movi	fp,45
    42c0:	003a5e06 	br	2c3c <__alt_mem_onchip_memory2_0+0xf7002c3c>
    42c4:	04000074 	movhi	r16,1
    42c8:	84087204 	addi	r16,r16,8648
    42cc:	003f4706 	br	3fec <__alt_mem_onchip_memory2_0+0xf7003fec>
    42d0:	d9002e17 	ldw	r4,184(sp)
    42d4:	d9402f17 	ldw	r5,188(sp)
    42d8:	20800017 	ldw	r2,0(r4)
    42dc:	21000104 	addi	r4,r4,4
    42e0:	d9002e15 	stw	r4,184(sp)
    42e4:	11400015 	stw	r5,0(r2)
    42e8:	0038ab06 	br	2598 <__alt_mem_onchip_memory2_0+0xf7002598>
    42ec:	dd802617 	ldw	r22,152(sp)
    42f0:	00bfff44 	movi	r2,-3
    42f4:	b0801c16 	blt	r22,r2,4368 <___vfprintf_internal_r+0x1eb0>
    42f8:	d9402a17 	ldw	r5,168(sp)
    42fc:	2d801a16 	blt	r5,r22,4368 <___vfprintf_internal_r+0x1eb0>
    4300:	dd803215 	stw	r22,200(sp)
    4304:	003e8906 	br	3d2c <__alt_mem_onchip_memory2_0+0xf7003d2c>
    4308:	01000074 	movhi	r4,1
    430c:	21087f84 	addi	r4,r4,8702
    4310:	d9002c15 	stw	r4,176(sp)
    4314:	003c9106 	br	355c <__alt_mem_onchip_memory2_0+0xf700355c>
    4318:	e005883a 	mov	r2,fp
    431c:	003e7906 	br	3d04 <__alt_mem_onchip_memory2_0+0xf7003d04>
    4320:	d9002a17 	ldw	r4,168(sp)
    4324:	df002783 	ldbu	fp,158(sp)
    4328:	dcc02e15 	stw	r19,184(sp)
    432c:	d9002915 	stw	r4,164(sp)
    4330:	d9002b15 	stw	r4,172(sp)
    4334:	d8002a15 	stw	zero,168(sp)
    4338:	d8003215 	stw	zero,200(sp)
    433c:	003a3b06 	br	2c2c <__alt_mem_onchip_memory2_0+0xf7002c2c>
    4340:	9080004c 	andi	r2,r18,1
    4344:	0039883a 	mov	fp,zero
    4348:	10000426 	beq	r2,zero,435c <___vfprintf_internal_r+0x1ea4>
    434c:	00800c04 	movi	r2,48
    4350:	dc001dc4 	addi	r16,sp,119
    4354:	d8801dc5 	stb	r2,119(sp)
    4358:	003b6406 	br	30ec <__alt_mem_onchip_memory2_0+0xf70030ec>
    435c:	d8002b15 	stw	zero,172(sp)
    4360:	dc001e04 	addi	r16,sp,120
    4364:	003a2b06 	br	2c14 <__alt_mem_onchip_memory2_0+0xf7002c14>
    4368:	8c7fff84 	addi	r17,r17,-2
    436c:	b5bfffc4 	addi	r22,r22,-1
    4370:	dd802615 	stw	r22,152(sp)
    4374:	dc4022c5 	stb	r17,139(sp)
    4378:	b000bf16 	blt	r22,zero,4678 <___vfprintf_internal_r+0x21c0>
    437c:	00800ac4 	movi	r2,43
    4380:	d8802305 	stb	r2,140(sp)
    4384:	00800244 	movi	r2,9
    4388:	15807016 	blt	r2,r22,454c <___vfprintf_internal_r+0x2094>
    438c:	00800c04 	movi	r2,48
    4390:	b5800c04 	addi	r22,r22,48
    4394:	d8802345 	stb	r2,141(sp)
    4398:	dd802385 	stb	r22,142(sp)
    439c:	d88023c4 	addi	r2,sp,143
    43a0:	df0022c4 	addi	fp,sp,139
    43a4:	d8c03317 	ldw	r3,204(sp)
    43a8:	1739c83a 	sub	fp,r2,fp
    43ac:	d9003317 	ldw	r4,204(sp)
    43b0:	e0c7883a 	add	r3,fp,r3
    43b4:	df003a15 	stw	fp,232(sp)
    43b8:	d8c02b15 	stw	r3,172(sp)
    43bc:	00800044 	movi	r2,1
    43c0:	1100b30e 	bge	r2,r4,4690 <___vfprintf_internal_r+0x21d8>
    43c4:	d8c02b17 	ldw	r3,172(sp)
    43c8:	18c00044 	addi	r3,r3,1
    43cc:	d8c02b15 	stw	r3,172(sp)
    43d0:	1805883a 	mov	r2,r3
    43d4:	1800ac16 	blt	r3,zero,4688 <___vfprintf_internal_r+0x21d0>
    43d8:	d8003215 	stw	zero,200(sp)
    43dc:	003e5d06 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    43e0:	d9002d17 	ldw	r4,180(sp)
    43e4:	d9801e04 	addi	r6,sp,120
    43e8:	b80b883a 	mov	r5,r23
    43ec:	0009c980 	call	9c98 <__sprint_r>
    43f0:	1039351e 	bne	r2,zero,28c8 <__alt_mem_onchip_memory2_0+0xf70028c8>
    43f4:	dc402617 	ldw	r17,152(sp)
    43f8:	d8c02017 	ldw	r3,128(sp)
    43fc:	d8801f17 	ldw	r2,124(sp)
    4400:	da000404 	addi	r8,sp,16
    4404:	003ed606 	br	3f60 <__alt_mem_onchip_memory2_0+0xf7003f60>
    4408:	182b883a 	mov	r21,r3
    440c:	d8002a15 	stw	zero,168(sp)
    4410:	00388c06 	br	2644 <__alt_mem_onchip_memory2_0+0xf7002644>
    4414:	d8802a17 	ldw	r2,168(sp)
    4418:	103e071e 	bne	r2,zero,3c38 <__alt_mem_onchip_memory2_0+0xf7003c38>
    441c:	dc002a15 	stw	r16,168(sp)
    4420:	003e0506 	br	3c38 <__alt_mem_onchip_memory2_0+0xf7003c38>
    4424:	d9002a17 	ldw	r4,168(sp)
    4428:	20c00044 	addi	r3,r4,1
    442c:	003e0f06 	br	3c6c <__alt_mem_onchip_memory2_0+0xf7003c6c>
    4430:	01400184 	movi	r5,6
    4434:	d9402a15 	stw	r5,168(sp)
    4438:	003dff06 	br	3c38 <__alt_mem_onchip_memory2_0+0xf7003c38>
    443c:	d8802104 	addi	r2,sp,132
    4440:	d8800315 	stw	r2,12(sp)
    4444:	d8802504 	addi	r2,sp,148
    4448:	d8800215 	stw	r2,8(sp)
    444c:	d8802604 	addi	r2,sp,152
    4450:	d8800115 	stw	r2,4(sp)
    4454:	d8802a17 	ldw	r2,168(sp)
    4458:	d9403617 	ldw	r5,216(sp)
    445c:	d9002d17 	ldw	r4,180(sp)
    4460:	d8800015 	stw	r2,0(sp)
    4464:	01c000c4 	movi	r7,3
    4468:	980d883a 	mov	r6,r19
    446c:	da003d15 	stw	r8,244(sp)
    4470:	0004be80 	call	4be8 <_dtoa_r>
    4474:	d8c02a17 	ldw	r3,168(sp)
    4478:	da003d17 	ldw	r8,244(sp)
    447c:	1021883a 	mov	r16,r2
    4480:	10f9883a 	add	fp,r2,r3
    4484:	81000007 	ldb	r4,0(r16)
    4488:	00800c04 	movi	r2,48
    448c:	20805e26 	beq	r4,r2,4608 <___vfprintf_internal_r+0x2150>
    4490:	d8c02617 	ldw	r3,152(sp)
    4494:	e0f9883a 	add	fp,fp,r3
    4498:	003e0a06 	br	3cc4 <__alt_mem_onchip_memory2_0+0xf7003cc4>
    449c:	00c00b44 	movi	r3,45
    44a0:	24e0003c 	xorhi	r19,r4,32768
    44a4:	d8c02905 	stb	r3,164(sp)
    44a8:	003de906 	br	3c50 <__alt_mem_onchip_memory2_0+0xf7003c50>
    44ac:	d8c03217 	ldw	r3,200(sp)
    44b0:	00c07a0e 	bge	zero,r3,469c <___vfprintf_internal_r+0x21e4>
    44b4:	00800044 	movi	r2,1
    44b8:	d9003317 	ldw	r4,204(sp)
    44bc:	1105883a 	add	r2,r2,r4
    44c0:	d8802b15 	stw	r2,172(sp)
    44c4:	10004e16 	blt	r2,zero,4600 <___vfprintf_internal_r+0x2148>
    44c8:	044019c4 	movi	r17,103
    44cc:	003e2106 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    44d0:	d9002a17 	ldw	r4,168(sp)
    44d4:	d8802104 	addi	r2,sp,132
    44d8:	d8800315 	stw	r2,12(sp)
    44dc:	d9000015 	stw	r4,0(sp)
    44e0:	d8802504 	addi	r2,sp,148
    44e4:	d9403617 	ldw	r5,216(sp)
    44e8:	d9002d17 	ldw	r4,180(sp)
    44ec:	d8800215 	stw	r2,8(sp)
    44f0:	d8802604 	addi	r2,sp,152
    44f4:	d8800115 	stw	r2,4(sp)
    44f8:	01c000c4 	movi	r7,3
    44fc:	980d883a 	mov	r6,r19
    4500:	da003d15 	stw	r8,244(sp)
    4504:	0004be80 	call	4be8 <_dtoa_r>
    4508:	d8c02a17 	ldw	r3,168(sp)
    450c:	da003d17 	ldw	r8,244(sp)
    4510:	1021883a 	mov	r16,r2
    4514:	00801184 	movi	r2,70
    4518:	80f9883a 	add	fp,r16,r3
    451c:	88bfd926 	beq	r17,r2,4484 <__alt_mem_onchip_memory2_0+0xf7004484>
    4520:	003de806 	br	3cc4 <__alt_mem_onchip_memory2_0+0xf7003cc4>
    4524:	d9002a17 	ldw	r4,168(sp)
    4528:	00c04d0e 	bge	zero,r3,4660 <___vfprintf_internal_r+0x21a8>
    452c:	2000441e 	bne	r4,zero,4640 <___vfprintf_internal_r+0x2188>
    4530:	9480004c 	andi	r18,r18,1
    4534:	9000421e 	bne	r18,zero,4640 <___vfprintf_internal_r+0x2188>
    4538:	1805883a 	mov	r2,r3
    453c:	18006f16 	blt	r3,zero,46fc <___vfprintf_internal_r+0x2244>
    4540:	d8c03217 	ldw	r3,200(sp)
    4544:	d8c02b15 	stw	r3,172(sp)
    4548:	003e0206 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    454c:	df0022c4 	addi	fp,sp,139
    4550:	dc002a15 	stw	r16,168(sp)
    4554:	4027883a 	mov	r19,r8
    4558:	e021883a 	mov	r16,fp
    455c:	b009883a 	mov	r4,r22
    4560:	01400284 	movi	r5,10
    4564:	000c8240 	call	c824 <__modsi3>
    4568:	10800c04 	addi	r2,r2,48
    456c:	843fffc4 	addi	r16,r16,-1
    4570:	b009883a 	mov	r4,r22
    4574:	01400284 	movi	r5,10
    4578:	80800005 	stb	r2,0(r16)
    457c:	000c7a00 	call	c7a0 <__divsi3>
    4580:	102d883a 	mov	r22,r2
    4584:	00800244 	movi	r2,9
    4588:	15bff416 	blt	r2,r22,455c <__alt_mem_onchip_memory2_0+0xf700455c>
    458c:	9811883a 	mov	r8,r19
    4590:	b0800c04 	addi	r2,r22,48
    4594:	8027883a 	mov	r19,r16
    4598:	997fffc4 	addi	r5,r19,-1
    459c:	98bfffc5 	stb	r2,-1(r19)
    45a0:	dc002a17 	ldw	r16,168(sp)
    45a4:	2f006d2e 	bgeu	r5,fp,475c <___vfprintf_internal_r+0x22a4>
    45a8:	d9c02384 	addi	r7,sp,142
    45ac:	3ccfc83a 	sub	r7,r7,r19
    45b0:	d9002344 	addi	r4,sp,141
    45b4:	e1cf883a 	add	r7,fp,r7
    45b8:	00000106 	br	45c0 <___vfprintf_internal_r+0x2108>
    45bc:	28800003 	ldbu	r2,0(r5)
    45c0:	20800005 	stb	r2,0(r4)
    45c4:	21000044 	addi	r4,r4,1
    45c8:	29400044 	addi	r5,r5,1
    45cc:	393ffb1e 	bne	r7,r4,45bc <__alt_mem_onchip_memory2_0+0xf70045bc>
    45d0:	d8802304 	addi	r2,sp,140
    45d4:	14c5c83a 	sub	r2,r2,r19
    45d8:	d8c02344 	addi	r3,sp,141
    45dc:	1885883a 	add	r2,r3,r2
    45e0:	003f7006 	br	43a4 <__alt_mem_onchip_memory2_0+0xf70043a4>
    45e4:	0005883a 	mov	r2,zero
    45e8:	003f0f06 	br	4228 <__alt_mem_onchip_memory2_0+0xf7004228>
    45ec:	d8c03217 	ldw	r3,200(sp)
    45f0:	18c00044 	addi	r3,r3,1
    45f4:	d8c02b15 	stw	r3,172(sp)
    45f8:	1805883a 	mov	r2,r3
    45fc:	183fb20e 	bge	r3,zero,44c8 <__alt_mem_onchip_memory2_0+0xf70044c8>
    4600:	0005883a 	mov	r2,zero
    4604:	003fb006 	br	44c8 <__alt_mem_onchip_memory2_0+0xf70044c8>
    4608:	d9003617 	ldw	r4,216(sp)
    460c:	000d883a 	mov	r6,zero
    4610:	000f883a 	mov	r7,zero
    4614:	980b883a 	mov	r5,r19
    4618:	d8c03c15 	stw	r3,240(sp)
    461c:	da003d15 	stw	r8,244(sp)
    4620:	000dbf80 	call	dbf8 <__eqdf2>
    4624:	d8c03c17 	ldw	r3,240(sp)
    4628:	da003d17 	ldw	r8,244(sp)
    462c:	103f9826 	beq	r2,zero,4490 <__alt_mem_onchip_memory2_0+0xf7004490>
    4630:	00800044 	movi	r2,1
    4634:	10c7c83a 	sub	r3,r2,r3
    4638:	d8c02615 	stw	r3,152(sp)
    463c:	003f9506 	br	4494 <__alt_mem_onchip_memory2_0+0xf7004494>
    4640:	d9002a17 	ldw	r4,168(sp)
    4644:	d8c03217 	ldw	r3,200(sp)
    4648:	20800044 	addi	r2,r4,1
    464c:	1885883a 	add	r2,r3,r2
    4650:	d8802b15 	stw	r2,172(sp)
    4654:	103dbf0e 	bge	r2,zero,3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    4658:	0005883a 	mov	r2,zero
    465c:	003dbd06 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    4660:	2000201e 	bne	r4,zero,46e4 <___vfprintf_internal_r+0x222c>
    4664:	9480004c 	andi	r18,r18,1
    4668:	90001e1e 	bne	r18,zero,46e4 <___vfprintf_internal_r+0x222c>
    466c:	00800044 	movi	r2,1
    4670:	d8802b15 	stw	r2,172(sp)
    4674:	003db706 	br	3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    4678:	00800b44 	movi	r2,45
    467c:	05adc83a 	sub	r22,zero,r22
    4680:	d8802305 	stb	r2,140(sp)
    4684:	003f3f06 	br	4384 <__alt_mem_onchip_memory2_0+0xf7004384>
    4688:	0005883a 	mov	r2,zero
    468c:	003f5206 	br	43d8 <__alt_mem_onchip_memory2_0+0xf70043d8>
    4690:	90a4703a 	and	r18,r18,r2
    4694:	903f4e26 	beq	r18,zero,43d0 <__alt_mem_onchip_memory2_0+0xf70043d0>
    4698:	003f4a06 	br	43c4 <__alt_mem_onchip_memory2_0+0xf70043c4>
    469c:	00800084 	movi	r2,2
    46a0:	10c5c83a 	sub	r2,r2,r3
    46a4:	003f8406 	br	44b8 <__alt_mem_onchip_memory2_0+0xf70044b8>
    46a8:	d9402e17 	ldw	r5,184(sp)
    46ac:	d9002e17 	ldw	r4,184(sp)
    46b0:	ac400043 	ldbu	r17,1(r21)
    46b4:	29400017 	ldw	r5,0(r5)
    46b8:	20800104 	addi	r2,r4,4
    46bc:	d8802e15 	stw	r2,184(sp)
    46c0:	d9402a15 	stw	r5,168(sp)
    46c4:	182b883a 	mov	r21,r3
    46c8:	283e7b0e 	bge	r5,zero,40b8 <__alt_mem_onchip_memory2_0+0xf70040b8>
    46cc:	8c403fcc 	andi	r17,r17,255
    46d0:	017fffc4 	movi	r5,-1
    46d4:	8c40201c 	xori	r17,r17,128
    46d8:	d9402a15 	stw	r5,168(sp)
    46dc:	8c7fe004 	addi	r17,r17,-128
    46e0:	0037d706 	br	2640 <__alt_mem_onchip_memory2_0+0xf7002640>
    46e4:	d8c02a17 	ldw	r3,168(sp)
    46e8:	18c00084 	addi	r3,r3,2
    46ec:	d8c02b15 	stw	r3,172(sp)
    46f0:	1805883a 	mov	r2,r3
    46f4:	183d970e 	bge	r3,zero,3d54 <__alt_mem_onchip_memory2_0+0xf7003d54>
    46f8:	003fd706 	br	4658 <__alt_mem_onchip_memory2_0+0xf7004658>
    46fc:	0005883a 	mov	r2,zero
    4700:	003f8f06 	br	4540 <__alt_mem_onchip_memory2_0+0xf7004540>
    4704:	9080004c 	andi	r2,r18,1
    4708:	103f821e 	bne	r2,zero,4514 <__alt_mem_onchip_memory2_0+0xf7004514>
    470c:	d8802117 	ldw	r2,132(sp)
    4710:	1405c83a 	sub	r2,r2,r16
    4714:	d8803315 	stw	r2,204(sp)
    4718:	b47ef426 	beq	r22,r17,42ec <__alt_mem_onchip_memory2_0+0xf70042ec>
    471c:	dd802617 	ldw	r22,152(sp)
    4720:	003f1206 	br	436c <__alt_mem_onchip_memory2_0+0xf700436c>
    4724:	d8c02b03 	ldbu	r3,172(sp)
    4728:	d8c02785 	stb	r3,158(sp)
    472c:	0038df06 	br	2aac <__alt_mem_onchip_memory2_0+0xf7002aac>
    4730:	d8c02b03 	ldbu	r3,172(sp)
    4734:	d8c02785 	stb	r3,158(sp)
    4738:	0038aa06 	br	29e4 <__alt_mem_onchip_memory2_0+0xf70029e4>
    473c:	d8c02b03 	ldbu	r3,172(sp)
    4740:	d8c02785 	stb	r3,158(sp)
    4744:	003a4306 	br	3054 <__alt_mem_onchip_memory2_0+0xf7003054>
    4748:	d8c02b03 	ldbu	r3,172(sp)
    474c:	d8c02785 	stb	r3,158(sp)
    4750:	003af506 	br	3328 <__alt_mem_onchip_memory2_0+0xf7003328>
    4754:	0005883a 	mov	r2,zero
    4758:	003d7b06 	br	3d48 <__alt_mem_onchip_memory2_0+0xf7003d48>
    475c:	d8802344 	addi	r2,sp,141
    4760:	003f1006 	br	43a4 <__alt_mem_onchip_memory2_0+0xf70043a4>
    4764:	d8c02b03 	ldbu	r3,172(sp)
    4768:	d8c02785 	stb	r3,158(sp)
    476c:	0038fd06 	br	2b64 <__alt_mem_onchip_memory2_0+0xf7002b64>
    4770:	d8c02b03 	ldbu	r3,172(sp)
    4774:	d8c02785 	stb	r3,158(sp)
    4778:	003a9706 	br	31d8 <__alt_mem_onchip_memory2_0+0xf70031d8>
    477c:	d8c02b03 	ldbu	r3,172(sp)
    4780:	d8c02785 	stb	r3,158(sp)
    4784:	003a1806 	br	2fe8 <__alt_mem_onchip_memory2_0+0xf7002fe8>
    4788:	d8c02b03 	ldbu	r3,172(sp)
    478c:	d8c02785 	stb	r3,158(sp)
    4790:	003abe06 	br	328c <__alt_mem_onchip_memory2_0+0xf700328c>

00004794 <__vfprintf_internal>:
    4794:	00800074 	movhi	r2,1
    4798:	108fda04 	addi	r2,r2,16232
    479c:	300f883a 	mov	r7,r6
    47a0:	280d883a 	mov	r6,r5
    47a4:	200b883a 	mov	r5,r4
    47a8:	11000017 	ldw	r4,0(r2)
    47ac:	00024b81 	jmpi	24b8 <___vfprintf_internal_r>

000047b0 <__sbprintf>:
    47b0:	2880030b 	ldhu	r2,12(r5)
    47b4:	2ac01917 	ldw	r11,100(r5)
    47b8:	2a80038b 	ldhu	r10,14(r5)
    47bc:	2a400717 	ldw	r9,28(r5)
    47c0:	2a000917 	ldw	r8,36(r5)
    47c4:	defee204 	addi	sp,sp,-1144
    47c8:	00c10004 	movi	r3,1024
    47cc:	dc011a15 	stw	r16,1128(sp)
    47d0:	10bfff4c 	andi	r2,r2,65533
    47d4:	2821883a 	mov	r16,r5
    47d8:	d8cb883a 	add	r5,sp,r3
    47dc:	dc811c15 	stw	r18,1136(sp)
    47e0:	dc411b15 	stw	r17,1132(sp)
    47e4:	dfc11d15 	stw	ra,1140(sp)
    47e8:	2025883a 	mov	r18,r4
    47ec:	d881030d 	sth	r2,1036(sp)
    47f0:	dac11915 	stw	r11,1124(sp)
    47f4:	da81038d 	sth	r10,1038(sp)
    47f8:	da410715 	stw	r9,1052(sp)
    47fc:	da010915 	stw	r8,1060(sp)
    4800:	dec10015 	stw	sp,1024(sp)
    4804:	dec10415 	stw	sp,1040(sp)
    4808:	d8c10215 	stw	r3,1032(sp)
    480c:	d8c10515 	stw	r3,1044(sp)
    4810:	d8010615 	stw	zero,1048(sp)
    4814:	00024b80 	call	24b8 <___vfprintf_internal_r>
    4818:	1023883a 	mov	r17,r2
    481c:	10000416 	blt	r2,zero,4830 <__sbprintf+0x80>
    4820:	d9410004 	addi	r5,sp,1024
    4824:	9009883a 	mov	r4,r18
    4828:	000648c0 	call	648c <_fflush_r>
    482c:	10000d1e 	bne	r2,zero,4864 <__sbprintf+0xb4>
    4830:	d881030b 	ldhu	r2,1036(sp)
    4834:	1080100c 	andi	r2,r2,64
    4838:	10000326 	beq	r2,zero,4848 <__sbprintf+0x98>
    483c:	8080030b 	ldhu	r2,12(r16)
    4840:	10801014 	ori	r2,r2,64
    4844:	8080030d 	sth	r2,12(r16)
    4848:	8805883a 	mov	r2,r17
    484c:	dfc11d17 	ldw	ra,1140(sp)
    4850:	dc811c17 	ldw	r18,1136(sp)
    4854:	dc411b17 	ldw	r17,1132(sp)
    4858:	dc011a17 	ldw	r16,1128(sp)
    485c:	dec11e04 	addi	sp,sp,1144
    4860:	f800283a 	ret
    4864:	047fffc4 	movi	r17,-1
    4868:	003ff106 	br	4830 <__alt_mem_onchip_memory2_0+0xf7004830>

0000486c <__swsetup_r>:
    486c:	00800074 	movhi	r2,1
    4870:	defffd04 	addi	sp,sp,-12
    4874:	108fda04 	addi	r2,r2,16232
    4878:	dc400115 	stw	r17,4(sp)
    487c:	2023883a 	mov	r17,r4
    4880:	11000017 	ldw	r4,0(r2)
    4884:	dc000015 	stw	r16,0(sp)
    4888:	dfc00215 	stw	ra,8(sp)
    488c:	2821883a 	mov	r16,r5
    4890:	20000226 	beq	r4,zero,489c <__swsetup_r+0x30>
    4894:	20800e17 	ldw	r2,56(r4)
    4898:	10003126 	beq	r2,zero,4960 <__swsetup_r+0xf4>
    489c:	8080030b 	ldhu	r2,12(r16)
    48a0:	10c0020c 	andi	r3,r2,8
    48a4:	1009883a 	mov	r4,r2
    48a8:	18000f26 	beq	r3,zero,48e8 <__swsetup_r+0x7c>
    48ac:	80c00417 	ldw	r3,16(r16)
    48b0:	18001526 	beq	r3,zero,4908 <__swsetup_r+0x9c>
    48b4:	1100004c 	andi	r4,r2,1
    48b8:	20001c1e 	bne	r4,zero,492c <__swsetup_r+0xc0>
    48bc:	1080008c 	andi	r2,r2,2
    48c0:	1000291e 	bne	r2,zero,4968 <__swsetup_r+0xfc>
    48c4:	80800517 	ldw	r2,20(r16)
    48c8:	80800215 	stw	r2,8(r16)
    48cc:	18001c26 	beq	r3,zero,4940 <__swsetup_r+0xd4>
    48d0:	0005883a 	mov	r2,zero
    48d4:	dfc00217 	ldw	ra,8(sp)
    48d8:	dc400117 	ldw	r17,4(sp)
    48dc:	dc000017 	ldw	r16,0(sp)
    48e0:	dec00304 	addi	sp,sp,12
    48e4:	f800283a 	ret
    48e8:	2080040c 	andi	r2,r4,16
    48ec:	10002e26 	beq	r2,zero,49a8 <__swsetup_r+0x13c>
    48f0:	2080010c 	andi	r2,r4,4
    48f4:	10001e1e 	bne	r2,zero,4970 <__swsetup_r+0x104>
    48f8:	80c00417 	ldw	r3,16(r16)
    48fc:	20800214 	ori	r2,r4,8
    4900:	8080030d 	sth	r2,12(r16)
    4904:	183feb1e 	bne	r3,zero,48b4 <__alt_mem_onchip_memory2_0+0xf70048b4>
    4908:	1100a00c 	andi	r4,r2,640
    490c:	01408004 	movi	r5,512
    4910:	217fe826 	beq	r4,r5,48b4 <__alt_mem_onchip_memory2_0+0xf70048b4>
    4914:	800b883a 	mov	r5,r16
    4918:	8809883a 	mov	r4,r17
    491c:	00074280 	call	7428 <__smakebuf_r>
    4920:	8080030b 	ldhu	r2,12(r16)
    4924:	80c00417 	ldw	r3,16(r16)
    4928:	003fe206 	br	48b4 <__alt_mem_onchip_memory2_0+0xf70048b4>
    492c:	80800517 	ldw	r2,20(r16)
    4930:	80000215 	stw	zero,8(r16)
    4934:	0085c83a 	sub	r2,zero,r2
    4938:	80800615 	stw	r2,24(r16)
    493c:	183fe41e 	bne	r3,zero,48d0 <__alt_mem_onchip_memory2_0+0xf70048d0>
    4940:	80c0030b 	ldhu	r3,12(r16)
    4944:	0005883a 	mov	r2,zero
    4948:	1900200c 	andi	r4,r3,128
    494c:	203fe126 	beq	r4,zero,48d4 <__alt_mem_onchip_memory2_0+0xf70048d4>
    4950:	18c01014 	ori	r3,r3,64
    4954:	80c0030d 	sth	r3,12(r16)
    4958:	00bfffc4 	movi	r2,-1
    495c:	003fdd06 	br	48d4 <__alt_mem_onchip_memory2_0+0xf70048d4>
    4960:	00068780 	call	6878 <__sinit>
    4964:	003fcd06 	br	489c <__alt_mem_onchip_memory2_0+0xf700489c>
    4968:	0005883a 	mov	r2,zero
    496c:	003fd606 	br	48c8 <__alt_mem_onchip_memory2_0+0xf70048c8>
    4970:	81400c17 	ldw	r5,48(r16)
    4974:	28000626 	beq	r5,zero,4990 <__swsetup_r+0x124>
    4978:	80801004 	addi	r2,r16,64
    497c:	28800326 	beq	r5,r2,498c <__swsetup_r+0x120>
    4980:	8809883a 	mov	r4,r17
    4984:	00069ec0 	call	69ec <_free_r>
    4988:	8100030b 	ldhu	r4,12(r16)
    498c:	80000c15 	stw	zero,48(r16)
    4990:	80c00417 	ldw	r3,16(r16)
    4994:	00bff6c4 	movi	r2,-37
    4998:	1108703a 	and	r4,r2,r4
    499c:	80000115 	stw	zero,4(r16)
    49a0:	80c00015 	stw	r3,0(r16)
    49a4:	003fd506 	br	48fc <__alt_mem_onchip_memory2_0+0xf70048fc>
    49a8:	00800244 	movi	r2,9
    49ac:	88800015 	stw	r2,0(r17)
    49b0:	20801014 	ori	r2,r4,64
    49b4:	8080030d 	sth	r2,12(r16)
    49b8:	00bfffc4 	movi	r2,-1
    49bc:	003fc506 	br	48d4 <__alt_mem_onchip_memory2_0+0xf70048d4>

000049c0 <quorem>:
    49c0:	defff204 	addi	sp,sp,-56
    49c4:	ddc00b15 	stw	r23,44(sp)
    49c8:	20800417 	ldw	r2,16(r4)
    49cc:	2dc00417 	ldw	r23,16(r5)
    49d0:	dfc00d15 	stw	ra,52(sp)
    49d4:	df000c15 	stw	fp,48(sp)
    49d8:	dd800a15 	stw	r22,40(sp)
    49dc:	dd400915 	stw	r21,36(sp)
    49e0:	dd000815 	stw	r20,32(sp)
    49e4:	dcc00715 	stw	r19,28(sp)
    49e8:	dc800615 	stw	r18,24(sp)
    49ec:	dc400515 	stw	r17,20(sp)
    49f0:	dc000415 	stw	r16,16(sp)
    49f4:	15c07a16 	blt	r2,r23,4be0 <quorem+0x220>
    49f8:	bdffffc4 	addi	r23,r23,-1
    49fc:	bde9883a 	add	r20,r23,r23
    4a00:	28c00504 	addi	r3,r5,20
    4a04:	a529883a 	add	r20,r20,r20
    4a08:	1d39883a 	add	fp,r3,r20
    4a0c:	24c00504 	addi	r19,r4,20
    4a10:	d9400215 	stw	r5,8(sp)
    4a14:	9d29883a 	add	r20,r19,r20
    4a18:	e1400017 	ldw	r5,0(fp)
    4a1c:	d9000015 	stw	r4,0(sp)
    4a20:	a1000017 	ldw	r4,0(r20)
    4a24:	29400044 	addi	r5,r5,1
    4a28:	d8c00115 	stw	r3,4(sp)
    4a2c:	dd000315 	stw	r20,12(sp)
    4a30:	000c8980 	call	c898 <__udivsi3>
    4a34:	1025883a 	mov	r18,r2
    4a38:	10003026 	beq	r2,zero,4afc <quorem+0x13c>
    4a3c:	dc400117 	ldw	r17,4(sp)
    4a40:	9829883a 	mov	r20,r19
    4a44:	002d883a 	mov	r22,zero
    4a48:	0021883a 	mov	r16,zero
    4a4c:	8d400017 	ldw	r21,0(r17)
    4a50:	900b883a 	mov	r5,r18
    4a54:	8c400104 	addi	r17,r17,4
    4a58:	a93fffcc 	andi	r4,r21,65535
    4a5c:	000c9540 	call	c954 <__mulsi3>
    4a60:	a808d43a 	srli	r4,r21,16
    4a64:	900b883a 	mov	r5,r18
    4a68:	15ad883a 	add	r22,r2,r22
    4a6c:	000c9540 	call	c954 <__mulsi3>
    4a70:	a1000017 	ldw	r4,0(r20)
    4a74:	b00cd43a 	srli	r6,r22,16
    4a78:	b0ffffcc 	andi	r3,r22,65535
    4a7c:	217fffcc 	andi	r5,r4,65535
    4a80:	2c21883a 	add	r16,r5,r16
    4a84:	80c7c83a 	sub	r3,r16,r3
    4a88:	2008d43a 	srli	r4,r4,16
    4a8c:	1185883a 	add	r2,r2,r6
    4a90:	1821d43a 	srai	r16,r3,16
    4a94:	117fffcc 	andi	r5,r2,65535
    4a98:	2149c83a 	sub	r4,r4,r5
    4a9c:	2421883a 	add	r16,r4,r16
    4aa0:	8008943a 	slli	r4,r16,16
    4aa4:	18ffffcc 	andi	r3,r3,65535
    4aa8:	102cd43a 	srli	r22,r2,16
    4aac:	20c8b03a 	or	r4,r4,r3
    4ab0:	a1000015 	stw	r4,0(r20)
    4ab4:	8021d43a 	srai	r16,r16,16
    4ab8:	a5000104 	addi	r20,r20,4
    4abc:	e47fe32e 	bgeu	fp,r17,4a4c <__alt_mem_onchip_memory2_0+0xf7004a4c>
    4ac0:	d8c00317 	ldw	r3,12(sp)
    4ac4:	18800017 	ldw	r2,0(r3)
    4ac8:	10000c1e 	bne	r2,zero,4afc <quorem+0x13c>
    4acc:	18bfff04 	addi	r2,r3,-4
    4ad0:	9880082e 	bgeu	r19,r2,4af4 <quorem+0x134>
    4ad4:	18ffff17 	ldw	r3,-4(r3)
    4ad8:	18000326 	beq	r3,zero,4ae8 <quorem+0x128>
    4adc:	00000506 	br	4af4 <quorem+0x134>
    4ae0:	10c00017 	ldw	r3,0(r2)
    4ae4:	1800031e 	bne	r3,zero,4af4 <quorem+0x134>
    4ae8:	10bfff04 	addi	r2,r2,-4
    4aec:	bdffffc4 	addi	r23,r23,-1
    4af0:	98bffb36 	bltu	r19,r2,4ae0 <__alt_mem_onchip_memory2_0+0xf7004ae0>
    4af4:	d8c00017 	ldw	r3,0(sp)
    4af8:	1dc00415 	stw	r23,16(r3)
    4afc:	d9400217 	ldw	r5,8(sp)
    4b00:	d9000017 	ldw	r4,0(sp)
    4b04:	0008c240 	call	8c24 <__mcmp>
    4b08:	10002816 	blt	r2,zero,4bac <quorem+0x1ec>
    4b0c:	dc400117 	ldw	r17,4(sp)
    4b10:	94800044 	addi	r18,r18,1
    4b14:	980d883a 	mov	r6,r19
    4b18:	0007883a 	mov	r3,zero
    4b1c:	31000017 	ldw	r4,0(r6)
    4b20:	89400017 	ldw	r5,0(r17)
    4b24:	31800104 	addi	r6,r6,4
    4b28:	20bfffcc 	andi	r2,r4,65535
    4b2c:	10c7883a 	add	r3,r2,r3
    4b30:	28bfffcc 	andi	r2,r5,65535
    4b34:	1885c83a 	sub	r2,r3,r2
    4b38:	280ad43a 	srli	r5,r5,16
    4b3c:	2008d43a 	srli	r4,r4,16
    4b40:	1007d43a 	srai	r3,r2,16
    4b44:	10bfffcc 	andi	r2,r2,65535
    4b48:	2149c83a 	sub	r4,r4,r5
    4b4c:	20c9883a 	add	r4,r4,r3
    4b50:	200a943a 	slli	r5,r4,16
    4b54:	8c400104 	addi	r17,r17,4
    4b58:	2007d43a 	srai	r3,r4,16
    4b5c:	2884b03a 	or	r2,r5,r2
    4b60:	30bfff15 	stw	r2,-4(r6)
    4b64:	e47fed2e 	bgeu	fp,r17,4b1c <__alt_mem_onchip_memory2_0+0xf7004b1c>
    4b68:	bdc5883a 	add	r2,r23,r23
    4b6c:	1085883a 	add	r2,r2,r2
    4b70:	9887883a 	add	r3,r19,r2
    4b74:	18800017 	ldw	r2,0(r3)
    4b78:	10000c1e 	bne	r2,zero,4bac <quorem+0x1ec>
    4b7c:	18bfff04 	addi	r2,r3,-4
    4b80:	9880082e 	bgeu	r19,r2,4ba4 <quorem+0x1e4>
    4b84:	18ffff17 	ldw	r3,-4(r3)
    4b88:	18000326 	beq	r3,zero,4b98 <quorem+0x1d8>
    4b8c:	00000506 	br	4ba4 <quorem+0x1e4>
    4b90:	10c00017 	ldw	r3,0(r2)
    4b94:	1800031e 	bne	r3,zero,4ba4 <quorem+0x1e4>
    4b98:	10bfff04 	addi	r2,r2,-4
    4b9c:	bdffffc4 	addi	r23,r23,-1
    4ba0:	98bffb36 	bltu	r19,r2,4b90 <__alt_mem_onchip_memory2_0+0xf7004b90>
    4ba4:	d8c00017 	ldw	r3,0(sp)
    4ba8:	1dc00415 	stw	r23,16(r3)
    4bac:	9005883a 	mov	r2,r18
    4bb0:	dfc00d17 	ldw	ra,52(sp)
    4bb4:	df000c17 	ldw	fp,48(sp)
    4bb8:	ddc00b17 	ldw	r23,44(sp)
    4bbc:	dd800a17 	ldw	r22,40(sp)
    4bc0:	dd400917 	ldw	r21,36(sp)
    4bc4:	dd000817 	ldw	r20,32(sp)
    4bc8:	dcc00717 	ldw	r19,28(sp)
    4bcc:	dc800617 	ldw	r18,24(sp)
    4bd0:	dc400517 	ldw	r17,20(sp)
    4bd4:	dc000417 	ldw	r16,16(sp)
    4bd8:	dec00e04 	addi	sp,sp,56
    4bdc:	f800283a 	ret
    4be0:	0005883a 	mov	r2,zero
    4be4:	003ff206 	br	4bb0 <__alt_mem_onchip_memory2_0+0xf7004bb0>

00004be8 <_dtoa_r>:
    4be8:	20801017 	ldw	r2,64(r4)
    4bec:	deffde04 	addi	sp,sp,-136
    4bf0:	df002015 	stw	fp,128(sp)
    4bf4:	dcc01b15 	stw	r19,108(sp)
    4bf8:	dc801a15 	stw	r18,104(sp)
    4bfc:	dc401915 	stw	r17,100(sp)
    4c00:	dc001815 	stw	r16,96(sp)
    4c04:	dfc02115 	stw	ra,132(sp)
    4c08:	ddc01f15 	stw	r23,124(sp)
    4c0c:	dd801e15 	stw	r22,120(sp)
    4c10:	dd401d15 	stw	r21,116(sp)
    4c14:	dd001c15 	stw	r20,112(sp)
    4c18:	d9c00315 	stw	r7,12(sp)
    4c1c:	2039883a 	mov	fp,r4
    4c20:	3023883a 	mov	r17,r6
    4c24:	2825883a 	mov	r18,r5
    4c28:	dc002417 	ldw	r16,144(sp)
    4c2c:	3027883a 	mov	r19,r6
    4c30:	10000826 	beq	r2,zero,4c54 <_dtoa_r+0x6c>
    4c34:	21801117 	ldw	r6,68(r4)
    4c38:	00c00044 	movi	r3,1
    4c3c:	100b883a 	mov	r5,r2
    4c40:	1986983a 	sll	r3,r3,r6
    4c44:	11800115 	stw	r6,4(r2)
    4c48:	10c00215 	stw	r3,8(r2)
    4c4c:	00083480 	call	8348 <_Bfree>
    4c50:	e0001015 	stw	zero,64(fp)
    4c54:	88002e16 	blt	r17,zero,4d10 <_dtoa_r+0x128>
    4c58:	80000015 	stw	zero,0(r16)
    4c5c:	889ffc2c 	andhi	r2,r17,32752
    4c60:	00dffc34 	movhi	r3,32752
    4c64:	10c01c26 	beq	r2,r3,4cd8 <_dtoa_r+0xf0>
    4c68:	000d883a 	mov	r6,zero
    4c6c:	000f883a 	mov	r7,zero
    4c70:	9009883a 	mov	r4,r18
    4c74:	980b883a 	mov	r5,r19
    4c78:	000dbf80 	call	dbf8 <__eqdf2>
    4c7c:	10002b1e 	bne	r2,zero,4d2c <_dtoa_r+0x144>
    4c80:	d9c02317 	ldw	r7,140(sp)
    4c84:	00800044 	movi	r2,1
    4c88:	38800015 	stw	r2,0(r7)
    4c8c:	d8802517 	ldw	r2,148(sp)
    4c90:	10019e26 	beq	r2,zero,530c <_dtoa_r+0x724>
    4c94:	d8c02517 	ldw	r3,148(sp)
    4c98:	00800074 	movhi	r2,1
    4c9c:	10887f44 	addi	r2,r2,8701
    4ca0:	18800015 	stw	r2,0(r3)
    4ca4:	10bfffc4 	addi	r2,r2,-1
    4ca8:	dfc02117 	ldw	ra,132(sp)
    4cac:	df002017 	ldw	fp,128(sp)
    4cb0:	ddc01f17 	ldw	r23,124(sp)
    4cb4:	dd801e17 	ldw	r22,120(sp)
    4cb8:	dd401d17 	ldw	r21,116(sp)
    4cbc:	dd001c17 	ldw	r20,112(sp)
    4cc0:	dcc01b17 	ldw	r19,108(sp)
    4cc4:	dc801a17 	ldw	r18,104(sp)
    4cc8:	dc401917 	ldw	r17,100(sp)
    4ccc:	dc001817 	ldw	r16,96(sp)
    4cd0:	dec02204 	addi	sp,sp,136
    4cd4:	f800283a 	ret
    4cd8:	d8c02317 	ldw	r3,140(sp)
    4cdc:	0089c3c4 	movi	r2,9999
    4ce0:	18800015 	stw	r2,0(r3)
    4ce4:	90017726 	beq	r18,zero,52c4 <_dtoa_r+0x6dc>
    4ce8:	00800074 	movhi	r2,1
    4cec:	10888b04 	addi	r2,r2,8748
    4cf0:	d9002517 	ldw	r4,148(sp)
    4cf4:	203fec26 	beq	r4,zero,4ca8 <__alt_mem_onchip_memory2_0+0xf7004ca8>
    4cf8:	10c000c7 	ldb	r3,3(r2)
    4cfc:	1801781e 	bne	r3,zero,52e0 <_dtoa_r+0x6f8>
    4d00:	10c000c4 	addi	r3,r2,3
    4d04:	d9802517 	ldw	r6,148(sp)
    4d08:	30c00015 	stw	r3,0(r6)
    4d0c:	003fe606 	br	4ca8 <__alt_mem_onchip_memory2_0+0xf7004ca8>
    4d10:	04e00034 	movhi	r19,32768
    4d14:	9cffffc4 	addi	r19,r19,-1
    4d18:	00800044 	movi	r2,1
    4d1c:	8ce6703a 	and	r19,r17,r19
    4d20:	80800015 	stw	r2,0(r16)
    4d24:	9823883a 	mov	r17,r19
    4d28:	003fcc06 	br	4c5c <__alt_mem_onchip_memory2_0+0xf7004c5c>
    4d2c:	d8800204 	addi	r2,sp,8
    4d30:	d8800015 	stw	r2,0(sp)
    4d34:	d9c00104 	addi	r7,sp,4
    4d38:	900b883a 	mov	r5,r18
    4d3c:	980d883a 	mov	r6,r19
    4d40:	e009883a 	mov	r4,fp
    4d44:	8820d53a 	srli	r16,r17,20
    4d48:	0008ff00 	call	8ff0 <__d2b>
    4d4c:	d8800915 	stw	r2,36(sp)
    4d50:	8001651e 	bne	r16,zero,52e8 <_dtoa_r+0x700>
    4d54:	dd800217 	ldw	r22,8(sp)
    4d58:	dc000117 	ldw	r16,4(sp)
    4d5c:	00800804 	movi	r2,32
    4d60:	b421883a 	add	r16,r22,r16
    4d64:	80c10c84 	addi	r3,r16,1074
    4d68:	10c2d10e 	bge	r2,r3,58b0 <_dtoa_r+0xcc8>
    4d6c:	00801004 	movi	r2,64
    4d70:	81010484 	addi	r4,r16,1042
    4d74:	10c7c83a 	sub	r3,r2,r3
    4d78:	9108d83a 	srl	r4,r18,r4
    4d7c:	88e2983a 	sll	r17,r17,r3
    4d80:	2448b03a 	or	r4,r4,r17
    4d84:	000f1140 	call	f114 <__floatunsidf>
    4d88:	017f8434 	movhi	r5,65040
    4d8c:	01800044 	movi	r6,1
    4d90:	1009883a 	mov	r4,r2
    4d94:	194b883a 	add	r5,r3,r5
    4d98:	843fffc4 	addi	r16,r16,-1
    4d9c:	d9801115 	stw	r6,68(sp)
    4da0:	000d883a 	mov	r6,zero
    4da4:	01cffe34 	movhi	r7,16376
    4da8:	000e6bc0 	call	e6bc <__subdf3>
    4dac:	0198dbf4 	movhi	r6,25455
    4db0:	01cff4f4 	movhi	r7,16339
    4db4:	3190d844 	addi	r6,r6,17249
    4db8:	39e1e9c4 	addi	r7,r7,-30809
    4dbc:	1009883a 	mov	r4,r2
    4dc0:	180b883a 	mov	r5,r3
    4dc4:	000de500 	call	de50 <__muldf3>
    4dc8:	01a2d874 	movhi	r6,35681
    4dcc:	01cff1f4 	movhi	r7,16327
    4dd0:	31b22cc4 	addi	r6,r6,-14157
    4dd4:	39e28a04 	addi	r7,r7,-30168
    4dd8:	180b883a 	mov	r5,r3
    4ddc:	1009883a 	mov	r4,r2
    4de0:	000c97c0 	call	c97c <__adddf3>
    4de4:	8009883a 	mov	r4,r16
    4de8:	1029883a 	mov	r20,r2
    4dec:	1823883a 	mov	r17,r3
    4df0:	000f0380 	call	f038 <__floatsidf>
    4df4:	019427f4 	movhi	r6,20639
    4df8:	01cff4f4 	movhi	r7,16339
    4dfc:	319e7ec4 	addi	r6,r6,31227
    4e00:	39d104c4 	addi	r7,r7,17427
    4e04:	1009883a 	mov	r4,r2
    4e08:	180b883a 	mov	r5,r3
    4e0c:	000de500 	call	de50 <__muldf3>
    4e10:	100d883a 	mov	r6,r2
    4e14:	180f883a 	mov	r7,r3
    4e18:	a009883a 	mov	r4,r20
    4e1c:	880b883a 	mov	r5,r17
    4e20:	000c97c0 	call	c97c <__adddf3>
    4e24:	1009883a 	mov	r4,r2
    4e28:	180b883a 	mov	r5,r3
    4e2c:	1029883a 	mov	r20,r2
    4e30:	1823883a 	mov	r17,r3
    4e34:	000efb80 	call	efb8 <__fixdfsi>
    4e38:	000d883a 	mov	r6,zero
    4e3c:	000f883a 	mov	r7,zero
    4e40:	a009883a 	mov	r4,r20
    4e44:	880b883a 	mov	r5,r17
    4e48:	d8800515 	stw	r2,20(sp)
    4e4c:	000dd5c0 	call	dd5c <__ledf2>
    4e50:	10028716 	blt	r2,zero,5870 <_dtoa_r+0xc88>
    4e54:	d8c00517 	ldw	r3,20(sp)
    4e58:	00800584 	movi	r2,22
    4e5c:	10c27536 	bltu	r2,r3,5834 <_dtoa_r+0xc4c>
    4e60:	180490fa 	slli	r2,r3,3
    4e64:	00c00074 	movhi	r3,1
    4e68:	18c8a704 	addi	r3,r3,8860
    4e6c:	1885883a 	add	r2,r3,r2
    4e70:	11000017 	ldw	r4,0(r2)
    4e74:	11400117 	ldw	r5,4(r2)
    4e78:	900d883a 	mov	r6,r18
    4e7c:	980f883a 	mov	r7,r19
    4e80:	000dc800 	call	dc80 <__gedf2>
    4e84:	00828d0e 	bge	zero,r2,58bc <_dtoa_r+0xcd4>
    4e88:	d9000517 	ldw	r4,20(sp)
    4e8c:	d8000e15 	stw	zero,56(sp)
    4e90:	213fffc4 	addi	r4,r4,-1
    4e94:	d9000515 	stw	r4,20(sp)
    4e98:	b42dc83a 	sub	r22,r22,r16
    4e9c:	b5bfffc4 	addi	r22,r22,-1
    4ea0:	b0026f16 	blt	r22,zero,5860 <_dtoa_r+0xc78>
    4ea4:	d8000815 	stw	zero,32(sp)
    4ea8:	d9c00517 	ldw	r7,20(sp)
    4eac:	38026416 	blt	r7,zero,5840 <_dtoa_r+0xc58>
    4eb0:	b1ed883a 	add	r22,r22,r7
    4eb4:	d9c00d15 	stw	r7,52(sp)
    4eb8:	d8000a15 	stw	zero,40(sp)
    4ebc:	d9800317 	ldw	r6,12(sp)
    4ec0:	00800244 	movi	r2,9
    4ec4:	11811436 	bltu	r2,r6,5318 <_dtoa_r+0x730>
    4ec8:	00800144 	movi	r2,5
    4ecc:	1184e10e 	bge	r2,r6,6254 <_dtoa_r+0x166c>
    4ed0:	31bfff04 	addi	r6,r6,-4
    4ed4:	d9800315 	stw	r6,12(sp)
    4ed8:	0023883a 	mov	r17,zero
    4edc:	d9800317 	ldw	r6,12(sp)
    4ee0:	008000c4 	movi	r2,3
    4ee4:	30836726 	beq	r6,r2,5c84 <_dtoa_r+0x109c>
    4ee8:	1183410e 	bge	r2,r6,5bf0 <_dtoa_r+0x1008>
    4eec:	d9c00317 	ldw	r7,12(sp)
    4ef0:	00800104 	movi	r2,4
    4ef4:	38827c26 	beq	r7,r2,58e8 <_dtoa_r+0xd00>
    4ef8:	00800144 	movi	r2,5
    4efc:	3884c41e 	bne	r7,r2,6210 <_dtoa_r+0x1628>
    4f00:	00800044 	movi	r2,1
    4f04:	d8800b15 	stw	r2,44(sp)
    4f08:	d8c00517 	ldw	r3,20(sp)
    4f0c:	d9002217 	ldw	r4,136(sp)
    4f10:	1907883a 	add	r3,r3,r4
    4f14:	19800044 	addi	r6,r3,1
    4f18:	d8c00c15 	stw	r3,48(sp)
    4f1c:	d9800615 	stw	r6,24(sp)
    4f20:	0183a40e 	bge	zero,r6,5db4 <_dtoa_r+0x11cc>
    4f24:	d9800617 	ldw	r6,24(sp)
    4f28:	3021883a 	mov	r16,r6
    4f2c:	e0001115 	stw	zero,68(fp)
    4f30:	008005c4 	movi	r2,23
    4f34:	1184c92e 	bgeu	r2,r6,625c <_dtoa_r+0x1674>
    4f38:	00c00044 	movi	r3,1
    4f3c:	00800104 	movi	r2,4
    4f40:	1085883a 	add	r2,r2,r2
    4f44:	11000504 	addi	r4,r2,20
    4f48:	180b883a 	mov	r5,r3
    4f4c:	18c00044 	addi	r3,r3,1
    4f50:	313ffb2e 	bgeu	r6,r4,4f40 <__alt_mem_onchip_memory2_0+0xf7004f40>
    4f54:	e1401115 	stw	r5,68(fp)
    4f58:	e009883a 	mov	r4,fp
    4f5c:	00082a00 	call	82a0 <_Balloc>
    4f60:	d8800715 	stw	r2,28(sp)
    4f64:	e0801015 	stw	r2,64(fp)
    4f68:	00800384 	movi	r2,14
    4f6c:	1400f736 	bltu	r2,r16,534c <_dtoa_r+0x764>
    4f70:	8800f626 	beq	r17,zero,534c <_dtoa_r+0x764>
    4f74:	d9c00517 	ldw	r7,20(sp)
    4f78:	01c39a0e 	bge	zero,r7,5de4 <_dtoa_r+0x11fc>
    4f7c:	388003cc 	andi	r2,r7,15
    4f80:	100490fa 	slli	r2,r2,3
    4f84:	382bd13a 	srai	r21,r7,4
    4f88:	00c00074 	movhi	r3,1
    4f8c:	18c8a704 	addi	r3,r3,8860
    4f90:	1885883a 	add	r2,r3,r2
    4f94:	a8c0040c 	andi	r3,r21,16
    4f98:	12400017 	ldw	r9,0(r2)
    4f9c:	12000117 	ldw	r8,4(r2)
    4fa0:	18037926 	beq	r3,zero,5d88 <_dtoa_r+0x11a0>
    4fa4:	00800074 	movhi	r2,1
    4fa8:	10889d04 	addi	r2,r2,8820
    4fac:	11800817 	ldw	r6,32(r2)
    4fb0:	11c00917 	ldw	r7,36(r2)
    4fb4:	9009883a 	mov	r4,r18
    4fb8:	980b883a 	mov	r5,r19
    4fbc:	da001715 	stw	r8,92(sp)
    4fc0:	da401615 	stw	r9,88(sp)
    4fc4:	000d2280 	call	d228 <__divdf3>
    4fc8:	da001717 	ldw	r8,92(sp)
    4fcc:	da401617 	ldw	r9,88(sp)
    4fd0:	ad4003cc 	andi	r21,r21,15
    4fd4:	040000c4 	movi	r16,3
    4fd8:	1023883a 	mov	r17,r2
    4fdc:	1829883a 	mov	r20,r3
    4fe0:	a8001126 	beq	r21,zero,5028 <_dtoa_r+0x440>
    4fe4:	05c00074 	movhi	r23,1
    4fe8:	bdc89d04 	addi	r23,r23,8820
    4fec:	4805883a 	mov	r2,r9
    4ff0:	4007883a 	mov	r3,r8
    4ff4:	a980004c 	andi	r6,r21,1
    4ff8:	1009883a 	mov	r4,r2
    4ffc:	a82bd07a 	srai	r21,r21,1
    5000:	180b883a 	mov	r5,r3
    5004:	30000426 	beq	r6,zero,5018 <_dtoa_r+0x430>
    5008:	b9800017 	ldw	r6,0(r23)
    500c:	b9c00117 	ldw	r7,4(r23)
    5010:	84000044 	addi	r16,r16,1
    5014:	000de500 	call	de50 <__muldf3>
    5018:	bdc00204 	addi	r23,r23,8
    501c:	a83ff51e 	bne	r21,zero,4ff4 <__alt_mem_onchip_memory2_0+0xf7004ff4>
    5020:	1013883a 	mov	r9,r2
    5024:	1811883a 	mov	r8,r3
    5028:	480d883a 	mov	r6,r9
    502c:	400f883a 	mov	r7,r8
    5030:	8809883a 	mov	r4,r17
    5034:	a00b883a 	mov	r5,r20
    5038:	000d2280 	call	d228 <__divdf3>
    503c:	d8800f15 	stw	r2,60(sp)
    5040:	d8c01015 	stw	r3,64(sp)
    5044:	d8c00e17 	ldw	r3,56(sp)
    5048:	18000626 	beq	r3,zero,5064 <_dtoa_r+0x47c>
    504c:	d9000f17 	ldw	r4,60(sp)
    5050:	d9401017 	ldw	r5,64(sp)
    5054:	000d883a 	mov	r6,zero
    5058:	01cffc34 	movhi	r7,16368
    505c:	000dd5c0 	call	dd5c <__ledf2>
    5060:	10040b16 	blt	r2,zero,6090 <_dtoa_r+0x14a8>
    5064:	8009883a 	mov	r4,r16
    5068:	000f0380 	call	f038 <__floatsidf>
    506c:	d9800f17 	ldw	r6,60(sp)
    5070:	d9c01017 	ldw	r7,64(sp)
    5074:	1009883a 	mov	r4,r2
    5078:	180b883a 	mov	r5,r3
    507c:	000de500 	call	de50 <__muldf3>
    5080:	000d883a 	mov	r6,zero
    5084:	01d00734 	movhi	r7,16412
    5088:	1009883a 	mov	r4,r2
    508c:	180b883a 	mov	r5,r3
    5090:	000c97c0 	call	c97c <__adddf3>
    5094:	1021883a 	mov	r16,r2
    5098:	d8800617 	ldw	r2,24(sp)
    509c:	047f3034 	movhi	r17,64704
    50a0:	1c63883a 	add	r17,r3,r17
    50a4:	10031826 	beq	r2,zero,5d08 <_dtoa_r+0x1120>
    50a8:	d8c00517 	ldw	r3,20(sp)
    50ac:	db000617 	ldw	r12,24(sp)
    50b0:	d8c01315 	stw	r3,76(sp)
    50b4:	d9000b17 	ldw	r4,44(sp)
    50b8:	20038f26 	beq	r4,zero,5ef8 <_dtoa_r+0x1310>
    50bc:	60bfffc4 	addi	r2,r12,-1
    50c0:	100490fa 	slli	r2,r2,3
    50c4:	00c00074 	movhi	r3,1
    50c8:	18c8a704 	addi	r3,r3,8860
    50cc:	1885883a 	add	r2,r3,r2
    50d0:	11800017 	ldw	r6,0(r2)
    50d4:	11c00117 	ldw	r7,4(r2)
    50d8:	d8800717 	ldw	r2,28(sp)
    50dc:	0009883a 	mov	r4,zero
    50e0:	014ff834 	movhi	r5,16352
    50e4:	db001615 	stw	r12,88(sp)
    50e8:	15c00044 	addi	r23,r2,1
    50ec:	000d2280 	call	d228 <__divdf3>
    50f0:	800d883a 	mov	r6,r16
    50f4:	880f883a 	mov	r7,r17
    50f8:	1009883a 	mov	r4,r2
    50fc:	180b883a 	mov	r5,r3
    5100:	000e6bc0 	call	e6bc <__subdf3>
    5104:	d9401017 	ldw	r5,64(sp)
    5108:	d9000f17 	ldw	r4,60(sp)
    510c:	102b883a 	mov	r21,r2
    5110:	d8c01215 	stw	r3,72(sp)
    5114:	000efb80 	call	efb8 <__fixdfsi>
    5118:	1009883a 	mov	r4,r2
    511c:	1029883a 	mov	r20,r2
    5120:	000f0380 	call	f038 <__floatsidf>
    5124:	d9000f17 	ldw	r4,60(sp)
    5128:	d9401017 	ldw	r5,64(sp)
    512c:	100d883a 	mov	r6,r2
    5130:	180f883a 	mov	r7,r3
    5134:	000e6bc0 	call	e6bc <__subdf3>
    5138:	1823883a 	mov	r17,r3
    513c:	d8c00717 	ldw	r3,28(sp)
    5140:	d9401217 	ldw	r5,72(sp)
    5144:	a2000c04 	addi	r8,r20,48
    5148:	1021883a 	mov	r16,r2
    514c:	1a000005 	stb	r8,0(r3)
    5150:	800d883a 	mov	r6,r16
    5154:	880f883a 	mov	r7,r17
    5158:	a809883a 	mov	r4,r21
    515c:	4029883a 	mov	r20,r8
    5160:	000dc800 	call	dc80 <__gedf2>
    5164:	00841d16 	blt	zero,r2,61dc <_dtoa_r+0x15f4>
    5168:	800d883a 	mov	r6,r16
    516c:	880f883a 	mov	r7,r17
    5170:	0009883a 	mov	r4,zero
    5174:	014ffc34 	movhi	r5,16368
    5178:	000e6bc0 	call	e6bc <__subdf3>
    517c:	d9401217 	ldw	r5,72(sp)
    5180:	100d883a 	mov	r6,r2
    5184:	180f883a 	mov	r7,r3
    5188:	a809883a 	mov	r4,r21
    518c:	000dc800 	call	dc80 <__gedf2>
    5190:	db001617 	ldw	r12,88(sp)
    5194:	00840e16 	blt	zero,r2,61d0 <_dtoa_r+0x15e8>
    5198:	00800044 	movi	r2,1
    519c:	13006b0e 	bge	r2,r12,534c <_dtoa_r+0x764>
    51a0:	d9000717 	ldw	r4,28(sp)
    51a4:	dd800f15 	stw	r22,60(sp)
    51a8:	dcc01015 	stw	r19,64(sp)
    51ac:	2319883a 	add	r12,r4,r12
    51b0:	dcc01217 	ldw	r19,72(sp)
    51b4:	602d883a 	mov	r22,r12
    51b8:	dc801215 	stw	r18,72(sp)
    51bc:	b825883a 	mov	r18,r23
    51c0:	00000906 	br	51e8 <_dtoa_r+0x600>
    51c4:	000e6bc0 	call	e6bc <__subdf3>
    51c8:	a80d883a 	mov	r6,r21
    51cc:	980f883a 	mov	r7,r19
    51d0:	1009883a 	mov	r4,r2
    51d4:	180b883a 	mov	r5,r3
    51d8:	000dd5c0 	call	dd5c <__ledf2>
    51dc:	1003e816 	blt	r2,zero,6180 <_dtoa_r+0x1598>
    51e0:	b825883a 	mov	r18,r23
    51e4:	bd83e926 	beq	r23,r22,618c <_dtoa_r+0x15a4>
    51e8:	a809883a 	mov	r4,r21
    51ec:	980b883a 	mov	r5,r19
    51f0:	000d883a 	mov	r6,zero
    51f4:	01d00934 	movhi	r7,16420
    51f8:	000de500 	call	de50 <__muldf3>
    51fc:	000d883a 	mov	r6,zero
    5200:	01d00934 	movhi	r7,16420
    5204:	8009883a 	mov	r4,r16
    5208:	880b883a 	mov	r5,r17
    520c:	102b883a 	mov	r21,r2
    5210:	1827883a 	mov	r19,r3
    5214:	000de500 	call	de50 <__muldf3>
    5218:	180b883a 	mov	r5,r3
    521c:	1009883a 	mov	r4,r2
    5220:	1821883a 	mov	r16,r3
    5224:	1023883a 	mov	r17,r2
    5228:	000efb80 	call	efb8 <__fixdfsi>
    522c:	1009883a 	mov	r4,r2
    5230:	1029883a 	mov	r20,r2
    5234:	000f0380 	call	f038 <__floatsidf>
    5238:	8809883a 	mov	r4,r17
    523c:	800b883a 	mov	r5,r16
    5240:	100d883a 	mov	r6,r2
    5244:	180f883a 	mov	r7,r3
    5248:	000e6bc0 	call	e6bc <__subdf3>
    524c:	a5000c04 	addi	r20,r20,48
    5250:	a80d883a 	mov	r6,r21
    5254:	980f883a 	mov	r7,r19
    5258:	1009883a 	mov	r4,r2
    525c:	180b883a 	mov	r5,r3
    5260:	95000005 	stb	r20,0(r18)
    5264:	1021883a 	mov	r16,r2
    5268:	1823883a 	mov	r17,r3
    526c:	000dd5c0 	call	dd5c <__ledf2>
    5270:	bdc00044 	addi	r23,r23,1
    5274:	800d883a 	mov	r6,r16
    5278:	880f883a 	mov	r7,r17
    527c:	0009883a 	mov	r4,zero
    5280:	014ffc34 	movhi	r5,16368
    5284:	103fcf0e 	bge	r2,zero,51c4 <__alt_mem_onchip_memory2_0+0xf70051c4>
    5288:	d8c01317 	ldw	r3,76(sp)
    528c:	d8c00515 	stw	r3,20(sp)
    5290:	d9400917 	ldw	r5,36(sp)
    5294:	e009883a 	mov	r4,fp
    5298:	00083480 	call	8348 <_Bfree>
    529c:	d9000517 	ldw	r4,20(sp)
    52a0:	d9802317 	ldw	r6,140(sp)
    52a4:	d9c02517 	ldw	r7,148(sp)
    52a8:	b8000005 	stb	zero,0(r23)
    52ac:	20800044 	addi	r2,r4,1
    52b0:	30800015 	stw	r2,0(r6)
    52b4:	3802aa26 	beq	r7,zero,5d60 <_dtoa_r+0x1178>
    52b8:	3dc00015 	stw	r23,0(r7)
    52bc:	d8800717 	ldw	r2,28(sp)
    52c0:	003e7906 	br	4ca8 <__alt_mem_onchip_memory2_0+0xf7004ca8>
    52c4:	00800434 	movhi	r2,16
    52c8:	10bfffc4 	addi	r2,r2,-1
    52cc:	88a2703a 	and	r17,r17,r2
    52d0:	883e851e 	bne	r17,zero,4ce8 <__alt_mem_onchip_memory2_0+0xf7004ce8>
    52d4:	00800074 	movhi	r2,1
    52d8:	10888804 	addi	r2,r2,8736
    52dc:	003e8406 	br	4cf0 <__alt_mem_onchip_memory2_0+0xf7004cf0>
    52e0:	10c00204 	addi	r3,r2,8
    52e4:	003e8706 	br	4d04 <__alt_mem_onchip_memory2_0+0xf7004d04>
    52e8:	01400434 	movhi	r5,16
    52ec:	297fffc4 	addi	r5,r5,-1
    52f0:	994a703a 	and	r5,r19,r5
    52f4:	9009883a 	mov	r4,r18
    52f8:	843f0044 	addi	r16,r16,-1023
    52fc:	294ffc34 	orhi	r5,r5,16368
    5300:	dd800217 	ldw	r22,8(sp)
    5304:	d8001115 	stw	zero,68(sp)
    5308:	003ea506 	br	4da0 <__alt_mem_onchip_memory2_0+0xf7004da0>
    530c:	00800074 	movhi	r2,1
    5310:	10887f04 	addi	r2,r2,8700
    5314:	003e6406 	br	4ca8 <__alt_mem_onchip_memory2_0+0xf7004ca8>
    5318:	e0001115 	stw	zero,68(fp)
    531c:	000b883a 	mov	r5,zero
    5320:	e009883a 	mov	r4,fp
    5324:	00082a00 	call	82a0 <_Balloc>
    5328:	01bfffc4 	movi	r6,-1
    532c:	01c00044 	movi	r7,1
    5330:	d8800715 	stw	r2,28(sp)
    5334:	d9800c15 	stw	r6,48(sp)
    5338:	e0801015 	stw	r2,64(fp)
    533c:	d8000315 	stw	zero,12(sp)
    5340:	d9c00b15 	stw	r7,44(sp)
    5344:	d9800615 	stw	r6,24(sp)
    5348:	d8002215 	stw	zero,136(sp)
    534c:	d8800117 	ldw	r2,4(sp)
    5350:	10008916 	blt	r2,zero,5578 <_dtoa_r+0x990>
    5354:	d9000517 	ldw	r4,20(sp)
    5358:	00c00384 	movi	r3,14
    535c:	19008616 	blt	r3,r4,5578 <_dtoa_r+0x990>
    5360:	200490fa 	slli	r2,r4,3
    5364:	00c00074 	movhi	r3,1
    5368:	d9802217 	ldw	r6,136(sp)
    536c:	18c8a704 	addi	r3,r3,8860
    5370:	1885883a 	add	r2,r3,r2
    5374:	14000017 	ldw	r16,0(r2)
    5378:	14400117 	ldw	r17,4(r2)
    537c:	30016316 	blt	r6,zero,590c <_dtoa_r+0xd24>
    5380:	800d883a 	mov	r6,r16
    5384:	880f883a 	mov	r7,r17
    5388:	9009883a 	mov	r4,r18
    538c:	980b883a 	mov	r5,r19
    5390:	000d2280 	call	d228 <__divdf3>
    5394:	180b883a 	mov	r5,r3
    5398:	1009883a 	mov	r4,r2
    539c:	000efb80 	call	efb8 <__fixdfsi>
    53a0:	1009883a 	mov	r4,r2
    53a4:	102b883a 	mov	r21,r2
    53a8:	000f0380 	call	f038 <__floatsidf>
    53ac:	800d883a 	mov	r6,r16
    53b0:	880f883a 	mov	r7,r17
    53b4:	1009883a 	mov	r4,r2
    53b8:	180b883a 	mov	r5,r3
    53bc:	000de500 	call	de50 <__muldf3>
    53c0:	100d883a 	mov	r6,r2
    53c4:	180f883a 	mov	r7,r3
    53c8:	9009883a 	mov	r4,r18
    53cc:	980b883a 	mov	r5,r19
    53d0:	000e6bc0 	call	e6bc <__subdf3>
    53d4:	d9c00717 	ldw	r7,28(sp)
    53d8:	1009883a 	mov	r4,r2
    53dc:	a8800c04 	addi	r2,r21,48
    53e0:	38800005 	stb	r2,0(r7)
    53e4:	3dc00044 	addi	r23,r7,1
    53e8:	d9c00617 	ldw	r7,24(sp)
    53ec:	01800044 	movi	r6,1
    53f0:	180b883a 	mov	r5,r3
    53f4:	2005883a 	mov	r2,r4
    53f8:	39803826 	beq	r7,r6,54dc <_dtoa_r+0x8f4>
    53fc:	000d883a 	mov	r6,zero
    5400:	01d00934 	movhi	r7,16420
    5404:	000de500 	call	de50 <__muldf3>
    5408:	000d883a 	mov	r6,zero
    540c:	000f883a 	mov	r7,zero
    5410:	1009883a 	mov	r4,r2
    5414:	180b883a 	mov	r5,r3
    5418:	1025883a 	mov	r18,r2
    541c:	1827883a 	mov	r19,r3
    5420:	000dbf80 	call	dbf8 <__eqdf2>
    5424:	103f9a26 	beq	r2,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5428:	d9c00617 	ldw	r7,24(sp)
    542c:	d8c00717 	ldw	r3,28(sp)
    5430:	b829883a 	mov	r20,r23
    5434:	38bfffc4 	addi	r2,r7,-1
    5438:	18ad883a 	add	r22,r3,r2
    543c:	00000a06 	br	5468 <_dtoa_r+0x880>
    5440:	000de500 	call	de50 <__muldf3>
    5444:	000d883a 	mov	r6,zero
    5448:	000f883a 	mov	r7,zero
    544c:	1009883a 	mov	r4,r2
    5450:	180b883a 	mov	r5,r3
    5454:	1025883a 	mov	r18,r2
    5458:	1827883a 	mov	r19,r3
    545c:	b829883a 	mov	r20,r23
    5460:	000dbf80 	call	dbf8 <__eqdf2>
    5464:	103f8a26 	beq	r2,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5468:	800d883a 	mov	r6,r16
    546c:	880f883a 	mov	r7,r17
    5470:	9009883a 	mov	r4,r18
    5474:	980b883a 	mov	r5,r19
    5478:	000d2280 	call	d228 <__divdf3>
    547c:	180b883a 	mov	r5,r3
    5480:	1009883a 	mov	r4,r2
    5484:	000efb80 	call	efb8 <__fixdfsi>
    5488:	1009883a 	mov	r4,r2
    548c:	102b883a 	mov	r21,r2
    5490:	000f0380 	call	f038 <__floatsidf>
    5494:	800d883a 	mov	r6,r16
    5498:	880f883a 	mov	r7,r17
    549c:	1009883a 	mov	r4,r2
    54a0:	180b883a 	mov	r5,r3
    54a4:	000de500 	call	de50 <__muldf3>
    54a8:	100d883a 	mov	r6,r2
    54ac:	180f883a 	mov	r7,r3
    54b0:	9009883a 	mov	r4,r18
    54b4:	980b883a 	mov	r5,r19
    54b8:	000e6bc0 	call	e6bc <__subdf3>
    54bc:	aa000c04 	addi	r8,r21,48
    54c0:	a2000005 	stb	r8,0(r20)
    54c4:	000d883a 	mov	r6,zero
    54c8:	01d00934 	movhi	r7,16420
    54cc:	1009883a 	mov	r4,r2
    54d0:	180b883a 	mov	r5,r3
    54d4:	a5c00044 	addi	r23,r20,1
    54d8:	b53fd91e 	bne	r22,r20,5440 <__alt_mem_onchip_memory2_0+0xf7005440>
    54dc:	100d883a 	mov	r6,r2
    54e0:	180f883a 	mov	r7,r3
    54e4:	1009883a 	mov	r4,r2
    54e8:	180b883a 	mov	r5,r3
    54ec:	000c97c0 	call	c97c <__adddf3>
    54f0:	100d883a 	mov	r6,r2
    54f4:	180f883a 	mov	r7,r3
    54f8:	8009883a 	mov	r4,r16
    54fc:	880b883a 	mov	r5,r17
    5500:	1027883a 	mov	r19,r2
    5504:	1825883a 	mov	r18,r3
    5508:	000dd5c0 	call	dd5c <__ledf2>
    550c:	10000816 	blt	r2,zero,5530 <_dtoa_r+0x948>
    5510:	980d883a 	mov	r6,r19
    5514:	900f883a 	mov	r7,r18
    5518:	8009883a 	mov	r4,r16
    551c:	880b883a 	mov	r5,r17
    5520:	000dbf80 	call	dbf8 <__eqdf2>
    5524:	103f5a1e 	bne	r2,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5528:	ad40004c 	andi	r21,r21,1
    552c:	a83f5826 	beq	r21,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5530:	bd3fffc3 	ldbu	r20,-1(r23)
    5534:	b8bfffc4 	addi	r2,r23,-1
    5538:	1007883a 	mov	r3,r2
    553c:	01400e44 	movi	r5,57
    5540:	d9800717 	ldw	r6,28(sp)
    5544:	00000506 	br	555c <_dtoa_r+0x974>
    5548:	18ffffc4 	addi	r3,r3,-1
    554c:	11824726 	beq	r2,r6,5e6c <_dtoa_r+0x1284>
    5550:	1d000003 	ldbu	r20,0(r3)
    5554:	102f883a 	mov	r23,r2
    5558:	10bfffc4 	addi	r2,r2,-1
    555c:	a1003fcc 	andi	r4,r20,255
    5560:	2100201c 	xori	r4,r4,128
    5564:	213fe004 	addi	r4,r4,-128
    5568:	217ff726 	beq	r4,r5,5548 <__alt_mem_onchip_memory2_0+0xf7005548>
    556c:	a2000044 	addi	r8,r20,1
    5570:	12000005 	stb	r8,0(r2)
    5574:	003f4606 	br	5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5578:	d9000b17 	ldw	r4,44(sp)
    557c:	2000c826 	beq	r4,zero,58a0 <_dtoa_r+0xcb8>
    5580:	d9800317 	ldw	r6,12(sp)
    5584:	00c00044 	movi	r3,1
    5588:	1980f90e 	bge	r3,r6,5970 <_dtoa_r+0xd88>
    558c:	d8800617 	ldw	r2,24(sp)
    5590:	d8c00a17 	ldw	r3,40(sp)
    5594:	157fffc4 	addi	r21,r2,-1
    5598:	1d41f316 	blt	r3,r21,5d68 <_dtoa_r+0x1180>
    559c:	1d6bc83a 	sub	r21,r3,r21
    55a0:	d9c00617 	ldw	r7,24(sp)
    55a4:	3802aa16 	blt	r7,zero,6050 <_dtoa_r+0x1468>
    55a8:	dd000817 	ldw	r20,32(sp)
    55ac:	d8800617 	ldw	r2,24(sp)
    55b0:	d8c00817 	ldw	r3,32(sp)
    55b4:	01400044 	movi	r5,1
    55b8:	e009883a 	mov	r4,fp
    55bc:	1887883a 	add	r3,r3,r2
    55c0:	d8c00815 	stw	r3,32(sp)
    55c4:	b0ad883a 	add	r22,r22,r2
    55c8:	00086d40 	call	86d4 <__i2b>
    55cc:	1023883a 	mov	r17,r2
    55d0:	a0000826 	beq	r20,zero,55f4 <_dtoa_r+0xa0c>
    55d4:	0580070e 	bge	zero,r22,55f4 <_dtoa_r+0xa0c>
    55d8:	a005883a 	mov	r2,r20
    55dc:	b500b916 	blt	r22,r20,58c4 <_dtoa_r+0xcdc>
    55e0:	d9000817 	ldw	r4,32(sp)
    55e4:	a0a9c83a 	sub	r20,r20,r2
    55e8:	b0adc83a 	sub	r22,r22,r2
    55ec:	2089c83a 	sub	r4,r4,r2
    55f0:	d9000815 	stw	r4,32(sp)
    55f4:	d9800a17 	ldw	r6,40(sp)
    55f8:	0181810e 	bge	zero,r6,5c00 <_dtoa_r+0x1018>
    55fc:	d9c00b17 	ldw	r7,44(sp)
    5600:	3800b326 	beq	r7,zero,58d0 <_dtoa_r+0xce8>
    5604:	a800b226 	beq	r21,zero,58d0 <_dtoa_r+0xce8>
    5608:	880b883a 	mov	r5,r17
    560c:	a80d883a 	mov	r6,r21
    5610:	e009883a 	mov	r4,fp
    5614:	000899c0 	call	899c <__pow5mult>
    5618:	d9800917 	ldw	r6,36(sp)
    561c:	100b883a 	mov	r5,r2
    5620:	e009883a 	mov	r4,fp
    5624:	1023883a 	mov	r17,r2
    5628:	00087100 	call	8710 <__multiply>
    562c:	1021883a 	mov	r16,r2
    5630:	d8800a17 	ldw	r2,40(sp)
    5634:	d9400917 	ldw	r5,36(sp)
    5638:	e009883a 	mov	r4,fp
    563c:	1545c83a 	sub	r2,r2,r21
    5640:	d8800a15 	stw	r2,40(sp)
    5644:	00083480 	call	8348 <_Bfree>
    5648:	d8c00a17 	ldw	r3,40(sp)
    564c:	18009f1e 	bne	r3,zero,58cc <_dtoa_r+0xce4>
    5650:	05c00044 	movi	r23,1
    5654:	e009883a 	mov	r4,fp
    5658:	b80b883a 	mov	r5,r23
    565c:	00086d40 	call	86d4 <__i2b>
    5660:	d9000d17 	ldw	r4,52(sp)
    5664:	102b883a 	mov	r21,r2
    5668:	2000ce26 	beq	r4,zero,59a4 <_dtoa_r+0xdbc>
    566c:	200d883a 	mov	r6,r4
    5670:	100b883a 	mov	r5,r2
    5674:	e009883a 	mov	r4,fp
    5678:	000899c0 	call	899c <__pow5mult>
    567c:	d9800317 	ldw	r6,12(sp)
    5680:	102b883a 	mov	r21,r2
    5684:	b981810e 	bge	r23,r6,5c8c <_dtoa_r+0x10a4>
    5688:	0027883a 	mov	r19,zero
    568c:	a8800417 	ldw	r2,16(r21)
    5690:	05c00804 	movi	r23,32
    5694:	10800104 	addi	r2,r2,4
    5698:	1085883a 	add	r2,r2,r2
    569c:	1085883a 	add	r2,r2,r2
    56a0:	a885883a 	add	r2,r21,r2
    56a4:	11000017 	ldw	r4,0(r2)
    56a8:	00085bc0 	call	85bc <__hi0bits>
    56ac:	b885c83a 	sub	r2,r23,r2
    56b0:	1585883a 	add	r2,r2,r22
    56b4:	108007cc 	andi	r2,r2,31
    56b8:	1000b326 	beq	r2,zero,5988 <_dtoa_r+0xda0>
    56bc:	00c00804 	movi	r3,32
    56c0:	1887c83a 	sub	r3,r3,r2
    56c4:	01000104 	movi	r4,4
    56c8:	20c2cd0e 	bge	r4,r3,6200 <_dtoa_r+0x1618>
    56cc:	00c00704 	movi	r3,28
    56d0:	1885c83a 	sub	r2,r3,r2
    56d4:	d8c00817 	ldw	r3,32(sp)
    56d8:	a0a9883a 	add	r20,r20,r2
    56dc:	b0ad883a 	add	r22,r22,r2
    56e0:	1887883a 	add	r3,r3,r2
    56e4:	d8c00815 	stw	r3,32(sp)
    56e8:	d9800817 	ldw	r6,32(sp)
    56ec:	0180040e 	bge	zero,r6,5700 <_dtoa_r+0xb18>
    56f0:	800b883a 	mov	r5,r16
    56f4:	e009883a 	mov	r4,fp
    56f8:	0008adc0 	call	8adc <__lshift>
    56fc:	1021883a 	mov	r16,r2
    5700:	0580050e 	bge	zero,r22,5718 <_dtoa_r+0xb30>
    5704:	a80b883a 	mov	r5,r21
    5708:	b00d883a 	mov	r6,r22
    570c:	e009883a 	mov	r4,fp
    5710:	0008adc0 	call	8adc <__lshift>
    5714:	102b883a 	mov	r21,r2
    5718:	d9c00e17 	ldw	r7,56(sp)
    571c:	3801211e 	bne	r7,zero,5ba4 <_dtoa_r+0xfbc>
    5720:	d9800617 	ldw	r6,24(sp)
    5724:	0181380e 	bge	zero,r6,5c08 <_dtoa_r+0x1020>
    5728:	d8c00b17 	ldw	r3,44(sp)
    572c:	1800ab1e 	bne	r3,zero,59dc <_dtoa_r+0xdf4>
    5730:	dc800717 	ldw	r18,28(sp)
    5734:	dcc00617 	ldw	r19,24(sp)
    5738:	9029883a 	mov	r20,r18
    573c:	00000206 	br	5748 <_dtoa_r+0xb60>
    5740:	00083700 	call	8370 <__multadd>
    5744:	1021883a 	mov	r16,r2
    5748:	a80b883a 	mov	r5,r21
    574c:	8009883a 	mov	r4,r16
    5750:	00049c00 	call	49c0 <quorem>
    5754:	10800c04 	addi	r2,r2,48
    5758:	90800005 	stb	r2,0(r18)
    575c:	94800044 	addi	r18,r18,1
    5760:	9507c83a 	sub	r3,r18,r20
    5764:	000f883a 	mov	r7,zero
    5768:	01800284 	movi	r6,10
    576c:	800b883a 	mov	r5,r16
    5770:	e009883a 	mov	r4,fp
    5774:	1cfff216 	blt	r3,r19,5740 <__alt_mem_onchip_memory2_0+0xf7005740>
    5778:	1011883a 	mov	r8,r2
    577c:	d8800617 	ldw	r2,24(sp)
    5780:	0082370e 	bge	zero,r2,6060 <_dtoa_r+0x1478>
    5784:	d9000717 	ldw	r4,28(sp)
    5788:	0025883a 	mov	r18,zero
    578c:	20af883a 	add	r23,r4,r2
    5790:	01800044 	movi	r6,1
    5794:	800b883a 	mov	r5,r16
    5798:	e009883a 	mov	r4,fp
    579c:	da001715 	stw	r8,92(sp)
    57a0:	0008adc0 	call	8adc <__lshift>
    57a4:	a80b883a 	mov	r5,r21
    57a8:	1009883a 	mov	r4,r2
    57ac:	d8800915 	stw	r2,36(sp)
    57b0:	0008c240 	call	8c24 <__mcmp>
    57b4:	da001717 	ldw	r8,92(sp)
    57b8:	0081800e 	bge	zero,r2,5dbc <_dtoa_r+0x11d4>
    57bc:	b93fffc3 	ldbu	r4,-1(r23)
    57c0:	b8bfffc4 	addi	r2,r23,-1
    57c4:	1007883a 	mov	r3,r2
    57c8:	01800e44 	movi	r6,57
    57cc:	d9c00717 	ldw	r7,28(sp)
    57d0:	00000506 	br	57e8 <_dtoa_r+0xc00>
    57d4:	18ffffc4 	addi	r3,r3,-1
    57d8:	11c12326 	beq	r2,r7,5c68 <_dtoa_r+0x1080>
    57dc:	19000003 	ldbu	r4,0(r3)
    57e0:	102f883a 	mov	r23,r2
    57e4:	10bfffc4 	addi	r2,r2,-1
    57e8:	21403fcc 	andi	r5,r4,255
    57ec:	2940201c 	xori	r5,r5,128
    57f0:	297fe004 	addi	r5,r5,-128
    57f4:	29bff726 	beq	r5,r6,57d4 <__alt_mem_onchip_memory2_0+0xf70057d4>
    57f8:	21000044 	addi	r4,r4,1
    57fc:	11000005 	stb	r4,0(r2)
    5800:	a80b883a 	mov	r5,r21
    5804:	e009883a 	mov	r4,fp
    5808:	00083480 	call	8348 <_Bfree>
    580c:	883ea026 	beq	r17,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5810:	90000426 	beq	r18,zero,5824 <_dtoa_r+0xc3c>
    5814:	94400326 	beq	r18,r17,5824 <_dtoa_r+0xc3c>
    5818:	900b883a 	mov	r5,r18
    581c:	e009883a 	mov	r4,fp
    5820:	00083480 	call	8348 <_Bfree>
    5824:	880b883a 	mov	r5,r17
    5828:	e009883a 	mov	r4,fp
    582c:	00083480 	call	8348 <_Bfree>
    5830:	003e9706 	br	5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    5834:	01800044 	movi	r6,1
    5838:	d9800e15 	stw	r6,56(sp)
    583c:	003d9606 	br	4e98 <__alt_mem_onchip_memory2_0+0xf7004e98>
    5840:	d8800817 	ldw	r2,32(sp)
    5844:	d8c00517 	ldw	r3,20(sp)
    5848:	d8000d15 	stw	zero,52(sp)
    584c:	10c5c83a 	sub	r2,r2,r3
    5850:	00c9c83a 	sub	r4,zero,r3
    5854:	d8800815 	stw	r2,32(sp)
    5858:	d9000a15 	stw	r4,40(sp)
    585c:	003d9706 	br	4ebc <__alt_mem_onchip_memory2_0+0xf7004ebc>
    5860:	05adc83a 	sub	r22,zero,r22
    5864:	dd800815 	stw	r22,32(sp)
    5868:	002d883a 	mov	r22,zero
    586c:	003d8e06 	br	4ea8 <__alt_mem_onchip_memory2_0+0xf7004ea8>
    5870:	d9000517 	ldw	r4,20(sp)
    5874:	000f0380 	call	f038 <__floatsidf>
    5878:	100d883a 	mov	r6,r2
    587c:	180f883a 	mov	r7,r3
    5880:	a009883a 	mov	r4,r20
    5884:	880b883a 	mov	r5,r17
    5888:	000dbf80 	call	dbf8 <__eqdf2>
    588c:	103d7126 	beq	r2,zero,4e54 <__alt_mem_onchip_memory2_0+0xf7004e54>
    5890:	d9c00517 	ldw	r7,20(sp)
    5894:	39ffffc4 	addi	r7,r7,-1
    5898:	d9c00515 	stw	r7,20(sp)
    589c:	003d6d06 	br	4e54 <__alt_mem_onchip_memory2_0+0xf7004e54>
    58a0:	dd400a17 	ldw	r21,40(sp)
    58a4:	dd000817 	ldw	r20,32(sp)
    58a8:	0023883a 	mov	r17,zero
    58ac:	003f4806 	br	55d0 <__alt_mem_onchip_memory2_0+0xf70055d0>
    58b0:	10e3c83a 	sub	r17,r2,r3
    58b4:	9448983a 	sll	r4,r18,r17
    58b8:	003d3206 	br	4d84 <__alt_mem_onchip_memory2_0+0xf7004d84>
    58bc:	d8000e15 	stw	zero,56(sp)
    58c0:	003d7506 	br	4e98 <__alt_mem_onchip_memory2_0+0xf7004e98>
    58c4:	b005883a 	mov	r2,r22
    58c8:	003f4506 	br	55e0 <__alt_mem_onchip_memory2_0+0xf70055e0>
    58cc:	dc000915 	stw	r16,36(sp)
    58d0:	d9800a17 	ldw	r6,40(sp)
    58d4:	d9400917 	ldw	r5,36(sp)
    58d8:	e009883a 	mov	r4,fp
    58dc:	000899c0 	call	899c <__pow5mult>
    58e0:	1021883a 	mov	r16,r2
    58e4:	003f5a06 	br	5650 <__alt_mem_onchip_memory2_0+0xf7005650>
    58e8:	01c00044 	movi	r7,1
    58ec:	d9c00b15 	stw	r7,44(sp)
    58f0:	d8802217 	ldw	r2,136(sp)
    58f4:	0081280e 	bge	zero,r2,5d98 <_dtoa_r+0x11b0>
    58f8:	100d883a 	mov	r6,r2
    58fc:	1021883a 	mov	r16,r2
    5900:	d8800c15 	stw	r2,48(sp)
    5904:	d8800615 	stw	r2,24(sp)
    5908:	003d8806 	br	4f2c <__alt_mem_onchip_memory2_0+0xf7004f2c>
    590c:	d8800617 	ldw	r2,24(sp)
    5910:	00be9b16 	blt	zero,r2,5380 <__alt_mem_onchip_memory2_0+0xf7005380>
    5914:	10010f1e 	bne	r2,zero,5d54 <_dtoa_r+0x116c>
    5918:	880b883a 	mov	r5,r17
    591c:	000d883a 	mov	r6,zero
    5920:	01d00534 	movhi	r7,16404
    5924:	8009883a 	mov	r4,r16
    5928:	000de500 	call	de50 <__muldf3>
    592c:	900d883a 	mov	r6,r18
    5930:	980f883a 	mov	r7,r19
    5934:	1009883a 	mov	r4,r2
    5938:	180b883a 	mov	r5,r3
    593c:	000dc800 	call	dc80 <__gedf2>
    5940:	002b883a 	mov	r21,zero
    5944:	0023883a 	mov	r17,zero
    5948:	1000bf16 	blt	r2,zero,5c48 <_dtoa_r+0x1060>
    594c:	d9802217 	ldw	r6,136(sp)
    5950:	ddc00717 	ldw	r23,28(sp)
    5954:	018c303a 	nor	r6,zero,r6
    5958:	d9800515 	stw	r6,20(sp)
    595c:	a80b883a 	mov	r5,r21
    5960:	e009883a 	mov	r4,fp
    5964:	00083480 	call	8348 <_Bfree>
    5968:	883e4926 	beq	r17,zero,5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    596c:	003fad06 	br	5824 <__alt_mem_onchip_memory2_0+0xf7005824>
    5970:	d9c01117 	ldw	r7,68(sp)
    5974:	3801bc26 	beq	r7,zero,6068 <_dtoa_r+0x1480>
    5978:	10810cc4 	addi	r2,r2,1075
    597c:	dd400a17 	ldw	r21,40(sp)
    5980:	dd000817 	ldw	r20,32(sp)
    5984:	003f0a06 	br	55b0 <__alt_mem_onchip_memory2_0+0xf70055b0>
    5988:	00800704 	movi	r2,28
    598c:	d9000817 	ldw	r4,32(sp)
    5990:	a0a9883a 	add	r20,r20,r2
    5994:	b0ad883a 	add	r22,r22,r2
    5998:	2089883a 	add	r4,r4,r2
    599c:	d9000815 	stw	r4,32(sp)
    59a0:	003f5106 	br	56e8 <__alt_mem_onchip_memory2_0+0xf70056e8>
    59a4:	d8c00317 	ldw	r3,12(sp)
    59a8:	b8c1fc0e 	bge	r23,r3,619c <_dtoa_r+0x15b4>
    59ac:	0027883a 	mov	r19,zero
    59b0:	b805883a 	mov	r2,r23
    59b4:	003f3e06 	br	56b0 <__alt_mem_onchip_memory2_0+0xf70056b0>
    59b8:	880b883a 	mov	r5,r17
    59bc:	e009883a 	mov	r4,fp
    59c0:	000f883a 	mov	r7,zero
    59c4:	01800284 	movi	r6,10
    59c8:	00083700 	call	8370 <__multadd>
    59cc:	d9000c17 	ldw	r4,48(sp)
    59d0:	1023883a 	mov	r17,r2
    59d4:	0102040e 	bge	zero,r4,61e8 <_dtoa_r+0x1600>
    59d8:	d9000615 	stw	r4,24(sp)
    59dc:	0500050e 	bge	zero,r20,59f4 <_dtoa_r+0xe0c>
    59e0:	880b883a 	mov	r5,r17
    59e4:	a00d883a 	mov	r6,r20
    59e8:	e009883a 	mov	r4,fp
    59ec:	0008adc0 	call	8adc <__lshift>
    59f0:	1023883a 	mov	r17,r2
    59f4:	9801241e 	bne	r19,zero,5e88 <_dtoa_r+0x12a0>
    59f8:	8829883a 	mov	r20,r17
    59fc:	d9000617 	ldw	r4,24(sp)
    5a00:	dcc00717 	ldw	r19,28(sp)
    5a04:	9480004c 	andi	r18,r18,1
    5a08:	20bfffc4 	addi	r2,r4,-1
    5a0c:	9885883a 	add	r2,r19,r2
    5a10:	d8800415 	stw	r2,16(sp)
    5a14:	dc800615 	stw	r18,24(sp)
    5a18:	a80b883a 	mov	r5,r21
    5a1c:	8009883a 	mov	r4,r16
    5a20:	00049c00 	call	49c0 <quorem>
    5a24:	880b883a 	mov	r5,r17
    5a28:	8009883a 	mov	r4,r16
    5a2c:	102f883a 	mov	r23,r2
    5a30:	0008c240 	call	8c24 <__mcmp>
    5a34:	a80b883a 	mov	r5,r21
    5a38:	a00d883a 	mov	r6,r20
    5a3c:	e009883a 	mov	r4,fp
    5a40:	102d883a 	mov	r22,r2
    5a44:	0008c840 	call	8c84 <__mdiff>
    5a48:	1007883a 	mov	r3,r2
    5a4c:	10800317 	ldw	r2,12(r2)
    5a50:	bc800c04 	addi	r18,r23,48
    5a54:	180b883a 	mov	r5,r3
    5a58:	10004e1e 	bne	r2,zero,5b94 <_dtoa_r+0xfac>
    5a5c:	8009883a 	mov	r4,r16
    5a60:	d8c01615 	stw	r3,88(sp)
    5a64:	0008c240 	call	8c24 <__mcmp>
    5a68:	d8c01617 	ldw	r3,88(sp)
    5a6c:	e009883a 	mov	r4,fp
    5a70:	d8801615 	stw	r2,88(sp)
    5a74:	180b883a 	mov	r5,r3
    5a78:	00083480 	call	8348 <_Bfree>
    5a7c:	d8801617 	ldw	r2,88(sp)
    5a80:	1000041e 	bne	r2,zero,5a94 <_dtoa_r+0xeac>
    5a84:	d9800317 	ldw	r6,12(sp)
    5a88:	3000021e 	bne	r6,zero,5a94 <_dtoa_r+0xeac>
    5a8c:	d8c00617 	ldw	r3,24(sp)
    5a90:	18003726 	beq	r3,zero,5b70 <_dtoa_r+0xf88>
    5a94:	b0002016 	blt	r22,zero,5b18 <_dtoa_r+0xf30>
    5a98:	b000041e 	bne	r22,zero,5aac <_dtoa_r+0xec4>
    5a9c:	d9000317 	ldw	r4,12(sp)
    5aa0:	2000021e 	bne	r4,zero,5aac <_dtoa_r+0xec4>
    5aa4:	d8c00617 	ldw	r3,24(sp)
    5aa8:	18001b26 	beq	r3,zero,5b18 <_dtoa_r+0xf30>
    5aac:	00810716 	blt	zero,r2,5ecc <_dtoa_r+0x12e4>
    5ab0:	d8c00417 	ldw	r3,16(sp)
    5ab4:	9d800044 	addi	r22,r19,1
    5ab8:	9c800005 	stb	r18,0(r19)
    5abc:	b02f883a 	mov	r23,r22
    5ac0:	98c10626 	beq	r19,r3,5edc <_dtoa_r+0x12f4>
    5ac4:	800b883a 	mov	r5,r16
    5ac8:	000f883a 	mov	r7,zero
    5acc:	01800284 	movi	r6,10
    5ad0:	e009883a 	mov	r4,fp
    5ad4:	00083700 	call	8370 <__multadd>
    5ad8:	1021883a 	mov	r16,r2
    5adc:	000f883a 	mov	r7,zero
    5ae0:	01800284 	movi	r6,10
    5ae4:	880b883a 	mov	r5,r17
    5ae8:	e009883a 	mov	r4,fp
    5aec:	8d002526 	beq	r17,r20,5b84 <_dtoa_r+0xf9c>
    5af0:	00083700 	call	8370 <__multadd>
    5af4:	a00b883a 	mov	r5,r20
    5af8:	000f883a 	mov	r7,zero
    5afc:	01800284 	movi	r6,10
    5b00:	e009883a 	mov	r4,fp
    5b04:	1023883a 	mov	r17,r2
    5b08:	00083700 	call	8370 <__multadd>
    5b0c:	1029883a 	mov	r20,r2
    5b10:	b027883a 	mov	r19,r22
    5b14:	003fc006 	br	5a18 <__alt_mem_onchip_memory2_0+0xf7005a18>
    5b18:	9011883a 	mov	r8,r18
    5b1c:	00800e0e 	bge	zero,r2,5b58 <_dtoa_r+0xf70>
    5b20:	800b883a 	mov	r5,r16
    5b24:	01800044 	movi	r6,1
    5b28:	e009883a 	mov	r4,fp
    5b2c:	da001715 	stw	r8,92(sp)
    5b30:	0008adc0 	call	8adc <__lshift>
    5b34:	a80b883a 	mov	r5,r21
    5b38:	1009883a 	mov	r4,r2
    5b3c:	1021883a 	mov	r16,r2
    5b40:	0008c240 	call	8c24 <__mcmp>
    5b44:	da001717 	ldw	r8,92(sp)
    5b48:	0081960e 	bge	zero,r2,61a4 <_dtoa_r+0x15bc>
    5b4c:	00800e44 	movi	r2,57
    5b50:	40817026 	beq	r8,r2,6114 <_dtoa_r+0x152c>
    5b54:	ba000c44 	addi	r8,r23,49
    5b58:	8825883a 	mov	r18,r17
    5b5c:	9dc00044 	addi	r23,r19,1
    5b60:	9a000005 	stb	r8,0(r19)
    5b64:	a023883a 	mov	r17,r20
    5b68:	dc000915 	stw	r16,36(sp)
    5b6c:	003f2406 	br	5800 <__alt_mem_onchip_memory2_0+0xf7005800>
    5b70:	00800e44 	movi	r2,57
    5b74:	9011883a 	mov	r8,r18
    5b78:	90816626 	beq	r18,r2,6114 <_dtoa_r+0x152c>
    5b7c:	05bff516 	blt	zero,r22,5b54 <__alt_mem_onchip_memory2_0+0xf7005b54>
    5b80:	003ff506 	br	5b58 <__alt_mem_onchip_memory2_0+0xf7005b58>
    5b84:	00083700 	call	8370 <__multadd>
    5b88:	1023883a 	mov	r17,r2
    5b8c:	1029883a 	mov	r20,r2
    5b90:	003fdf06 	br	5b10 <__alt_mem_onchip_memory2_0+0xf7005b10>
    5b94:	e009883a 	mov	r4,fp
    5b98:	00083480 	call	8348 <_Bfree>
    5b9c:	00800044 	movi	r2,1
    5ba0:	003fbc06 	br	5a94 <__alt_mem_onchip_memory2_0+0xf7005a94>
    5ba4:	a80b883a 	mov	r5,r21
    5ba8:	8009883a 	mov	r4,r16
    5bac:	0008c240 	call	8c24 <__mcmp>
    5bb0:	103edb0e 	bge	r2,zero,5720 <__alt_mem_onchip_memory2_0+0xf7005720>
    5bb4:	800b883a 	mov	r5,r16
    5bb8:	000f883a 	mov	r7,zero
    5bbc:	01800284 	movi	r6,10
    5bc0:	e009883a 	mov	r4,fp
    5bc4:	00083700 	call	8370 <__multadd>
    5bc8:	1021883a 	mov	r16,r2
    5bcc:	d8800517 	ldw	r2,20(sp)
    5bd0:	d8c00b17 	ldw	r3,44(sp)
    5bd4:	10bfffc4 	addi	r2,r2,-1
    5bd8:	d8800515 	stw	r2,20(sp)
    5bdc:	183f761e 	bne	r3,zero,59b8 <__alt_mem_onchip_memory2_0+0xf70059b8>
    5be0:	d9000c17 	ldw	r4,48(sp)
    5be4:	0101730e 	bge	zero,r4,61b4 <_dtoa_r+0x15cc>
    5be8:	d9000615 	stw	r4,24(sp)
    5bec:	003ed006 	br	5730 <__alt_mem_onchip_memory2_0+0xf7005730>
    5bf0:	00800084 	movi	r2,2
    5bf4:	3081861e 	bne	r6,r2,6210 <_dtoa_r+0x1628>
    5bf8:	d8000b15 	stw	zero,44(sp)
    5bfc:	003f3c06 	br	58f0 <__alt_mem_onchip_memory2_0+0xf70058f0>
    5c00:	dc000917 	ldw	r16,36(sp)
    5c04:	003e9206 	br	5650 <__alt_mem_onchip_memory2_0+0xf7005650>
    5c08:	d9c00317 	ldw	r7,12(sp)
    5c0c:	00800084 	movi	r2,2
    5c10:	11fec50e 	bge	r2,r7,5728 <__alt_mem_onchip_memory2_0+0xf7005728>
    5c14:	d9000617 	ldw	r4,24(sp)
    5c18:	20013c1e 	bne	r4,zero,610c <_dtoa_r+0x1524>
    5c1c:	a80b883a 	mov	r5,r21
    5c20:	000f883a 	mov	r7,zero
    5c24:	01800144 	movi	r6,5
    5c28:	e009883a 	mov	r4,fp
    5c2c:	00083700 	call	8370 <__multadd>
    5c30:	100b883a 	mov	r5,r2
    5c34:	8009883a 	mov	r4,r16
    5c38:	102b883a 	mov	r21,r2
    5c3c:	0008c240 	call	8c24 <__mcmp>
    5c40:	dc000915 	stw	r16,36(sp)
    5c44:	00bf410e 	bge	zero,r2,594c <__alt_mem_onchip_memory2_0+0xf700594c>
    5c48:	d9c00717 	ldw	r7,28(sp)
    5c4c:	00800c44 	movi	r2,49
    5c50:	38800005 	stb	r2,0(r7)
    5c54:	d8800517 	ldw	r2,20(sp)
    5c58:	3dc00044 	addi	r23,r7,1
    5c5c:	10800044 	addi	r2,r2,1
    5c60:	d8800515 	stw	r2,20(sp)
    5c64:	003f3d06 	br	595c <__alt_mem_onchip_memory2_0+0xf700595c>
    5c68:	d9800517 	ldw	r6,20(sp)
    5c6c:	d9c00717 	ldw	r7,28(sp)
    5c70:	00800c44 	movi	r2,49
    5c74:	31800044 	addi	r6,r6,1
    5c78:	d9800515 	stw	r6,20(sp)
    5c7c:	38800005 	stb	r2,0(r7)
    5c80:	003edf06 	br	5800 <__alt_mem_onchip_memory2_0+0xf7005800>
    5c84:	d8000b15 	stw	zero,44(sp)
    5c88:	003c9f06 	br	4f08 <__alt_mem_onchip_memory2_0+0xf7004f08>
    5c8c:	903e7e1e 	bne	r18,zero,5688 <__alt_mem_onchip_memory2_0+0xf7005688>
    5c90:	00800434 	movhi	r2,16
    5c94:	10bfffc4 	addi	r2,r2,-1
    5c98:	9884703a 	and	r2,r19,r2
    5c9c:	1000ea1e 	bne	r2,zero,6048 <_dtoa_r+0x1460>
    5ca0:	9cdffc2c 	andhi	r19,r19,32752
    5ca4:	9800e826 	beq	r19,zero,6048 <_dtoa_r+0x1460>
    5ca8:	d9c00817 	ldw	r7,32(sp)
    5cac:	b5800044 	addi	r22,r22,1
    5cb0:	04c00044 	movi	r19,1
    5cb4:	39c00044 	addi	r7,r7,1
    5cb8:	d9c00815 	stw	r7,32(sp)
    5cbc:	d8800d17 	ldw	r2,52(sp)
    5cc0:	103e721e 	bne	r2,zero,568c <__alt_mem_onchip_memory2_0+0xf700568c>
    5cc4:	00800044 	movi	r2,1
    5cc8:	003e7906 	br	56b0 <__alt_mem_onchip_memory2_0+0xf70056b0>
    5ccc:	8009883a 	mov	r4,r16
    5cd0:	000f0380 	call	f038 <__floatsidf>
    5cd4:	d9800f17 	ldw	r6,60(sp)
    5cd8:	d9c01017 	ldw	r7,64(sp)
    5cdc:	1009883a 	mov	r4,r2
    5ce0:	180b883a 	mov	r5,r3
    5ce4:	000de500 	call	de50 <__muldf3>
    5ce8:	000d883a 	mov	r6,zero
    5cec:	01d00734 	movhi	r7,16412
    5cf0:	1009883a 	mov	r4,r2
    5cf4:	180b883a 	mov	r5,r3
    5cf8:	000c97c0 	call	c97c <__adddf3>
    5cfc:	047f3034 	movhi	r17,64704
    5d00:	1021883a 	mov	r16,r2
    5d04:	1c63883a 	add	r17,r3,r17
    5d08:	d9000f17 	ldw	r4,60(sp)
    5d0c:	d9401017 	ldw	r5,64(sp)
    5d10:	000d883a 	mov	r6,zero
    5d14:	01d00534 	movhi	r7,16404
    5d18:	000e6bc0 	call	e6bc <__subdf3>
    5d1c:	800d883a 	mov	r6,r16
    5d20:	880f883a 	mov	r7,r17
    5d24:	1009883a 	mov	r4,r2
    5d28:	180b883a 	mov	r5,r3
    5d2c:	102b883a 	mov	r21,r2
    5d30:	1829883a 	mov	r20,r3
    5d34:	000dc800 	call	dc80 <__gedf2>
    5d38:	00806c16 	blt	zero,r2,5eec <_dtoa_r+0x1304>
    5d3c:	89e0003c 	xorhi	r7,r17,32768
    5d40:	800d883a 	mov	r6,r16
    5d44:	a809883a 	mov	r4,r21
    5d48:	a00b883a 	mov	r5,r20
    5d4c:	000dd5c0 	call	dd5c <__ledf2>
    5d50:	103d7e0e 	bge	r2,zero,534c <__alt_mem_onchip_memory2_0+0xf700534c>
    5d54:	002b883a 	mov	r21,zero
    5d58:	0023883a 	mov	r17,zero
    5d5c:	003efb06 	br	594c <__alt_mem_onchip_memory2_0+0xf700594c>
    5d60:	d8800717 	ldw	r2,28(sp)
    5d64:	003bd006 	br	4ca8 <__alt_mem_onchip_memory2_0+0xf7004ca8>
    5d68:	d9000a17 	ldw	r4,40(sp)
    5d6c:	d9800d17 	ldw	r6,52(sp)
    5d70:	dd400a15 	stw	r21,40(sp)
    5d74:	a905c83a 	sub	r2,r21,r4
    5d78:	308d883a 	add	r6,r6,r2
    5d7c:	d9800d15 	stw	r6,52(sp)
    5d80:	002b883a 	mov	r21,zero
    5d84:	003e0606 	br	55a0 <__alt_mem_onchip_memory2_0+0xf70055a0>
    5d88:	9023883a 	mov	r17,r18
    5d8c:	9829883a 	mov	r20,r19
    5d90:	04000084 	movi	r16,2
    5d94:	003c9206 	br	4fe0 <__alt_mem_onchip_memory2_0+0xf7004fe0>
    5d98:	04000044 	movi	r16,1
    5d9c:	dc000c15 	stw	r16,48(sp)
    5da0:	dc000615 	stw	r16,24(sp)
    5da4:	dc002215 	stw	r16,136(sp)
    5da8:	e0001115 	stw	zero,68(fp)
    5dac:	000b883a 	mov	r5,zero
    5db0:	003c6906 	br	4f58 <__alt_mem_onchip_memory2_0+0xf7004f58>
    5db4:	3021883a 	mov	r16,r6
    5db8:	003ffb06 	br	5da8 <__alt_mem_onchip_memory2_0+0xf7005da8>
    5dbc:	1000021e 	bne	r2,zero,5dc8 <_dtoa_r+0x11e0>
    5dc0:	4200004c 	andi	r8,r8,1
    5dc4:	403e7d1e 	bne	r8,zero,57bc <__alt_mem_onchip_memory2_0+0xf70057bc>
    5dc8:	01000c04 	movi	r4,48
    5dcc:	00000106 	br	5dd4 <_dtoa_r+0x11ec>
    5dd0:	102f883a 	mov	r23,r2
    5dd4:	b8bfffc4 	addi	r2,r23,-1
    5dd8:	10c00007 	ldb	r3,0(r2)
    5ddc:	193ffc26 	beq	r3,r4,5dd0 <__alt_mem_onchip_memory2_0+0xf7005dd0>
    5de0:	003e8706 	br	5800 <__alt_mem_onchip_memory2_0+0xf7005800>
    5de4:	d8800517 	ldw	r2,20(sp)
    5de8:	00a3c83a 	sub	r17,zero,r2
    5dec:	8800a426 	beq	r17,zero,6080 <_dtoa_r+0x1498>
    5df0:	888003cc 	andi	r2,r17,15
    5df4:	100490fa 	slli	r2,r2,3
    5df8:	00c00074 	movhi	r3,1
    5dfc:	18c8a704 	addi	r3,r3,8860
    5e00:	1885883a 	add	r2,r3,r2
    5e04:	11800017 	ldw	r6,0(r2)
    5e08:	11c00117 	ldw	r7,4(r2)
    5e0c:	9009883a 	mov	r4,r18
    5e10:	980b883a 	mov	r5,r19
    5e14:	8823d13a 	srai	r17,r17,4
    5e18:	000de500 	call	de50 <__muldf3>
    5e1c:	d8800f15 	stw	r2,60(sp)
    5e20:	d8c01015 	stw	r3,64(sp)
    5e24:	8800e826 	beq	r17,zero,61c8 <_dtoa_r+0x15e0>
    5e28:	05000074 	movhi	r20,1
    5e2c:	a5089d04 	addi	r20,r20,8820
    5e30:	04000084 	movi	r16,2
    5e34:	8980004c 	andi	r6,r17,1
    5e38:	1009883a 	mov	r4,r2
    5e3c:	8823d07a 	srai	r17,r17,1
    5e40:	180b883a 	mov	r5,r3
    5e44:	30000426 	beq	r6,zero,5e58 <_dtoa_r+0x1270>
    5e48:	a1800017 	ldw	r6,0(r20)
    5e4c:	a1c00117 	ldw	r7,4(r20)
    5e50:	84000044 	addi	r16,r16,1
    5e54:	000de500 	call	de50 <__muldf3>
    5e58:	a5000204 	addi	r20,r20,8
    5e5c:	883ff51e 	bne	r17,zero,5e34 <__alt_mem_onchip_memory2_0+0xf7005e34>
    5e60:	d8800f15 	stw	r2,60(sp)
    5e64:	d8c01015 	stw	r3,64(sp)
    5e68:	003c7606 	br	5044 <__alt_mem_onchip_memory2_0+0xf7005044>
    5e6c:	00c00c04 	movi	r3,48
    5e70:	10c00005 	stb	r3,0(r2)
    5e74:	d8c00517 	ldw	r3,20(sp)
    5e78:	bd3fffc3 	ldbu	r20,-1(r23)
    5e7c:	18c00044 	addi	r3,r3,1
    5e80:	d8c00515 	stw	r3,20(sp)
    5e84:	003db906 	br	556c <__alt_mem_onchip_memory2_0+0xf700556c>
    5e88:	89400117 	ldw	r5,4(r17)
    5e8c:	e009883a 	mov	r4,fp
    5e90:	00082a00 	call	82a0 <_Balloc>
    5e94:	89800417 	ldw	r6,16(r17)
    5e98:	89400304 	addi	r5,r17,12
    5e9c:	11000304 	addi	r4,r2,12
    5ea0:	31800084 	addi	r6,r6,2
    5ea4:	318d883a 	add	r6,r6,r6
    5ea8:	318d883a 	add	r6,r6,r6
    5eac:	1027883a 	mov	r19,r2
    5eb0:	0007ed40 	call	7ed4 <memcpy>
    5eb4:	01800044 	movi	r6,1
    5eb8:	980b883a 	mov	r5,r19
    5ebc:	e009883a 	mov	r4,fp
    5ec0:	0008adc0 	call	8adc <__lshift>
    5ec4:	1029883a 	mov	r20,r2
    5ec8:	003ecc06 	br	59fc <__alt_mem_onchip_memory2_0+0xf70059fc>
    5ecc:	00800e44 	movi	r2,57
    5ed0:	90809026 	beq	r18,r2,6114 <_dtoa_r+0x152c>
    5ed4:	92000044 	addi	r8,r18,1
    5ed8:	003f1f06 	br	5b58 <__alt_mem_onchip_memory2_0+0xf7005b58>
    5edc:	9011883a 	mov	r8,r18
    5ee0:	8825883a 	mov	r18,r17
    5ee4:	a023883a 	mov	r17,r20
    5ee8:	003e2906 	br	5790 <__alt_mem_onchip_memory2_0+0xf7005790>
    5eec:	002b883a 	mov	r21,zero
    5ef0:	0023883a 	mov	r17,zero
    5ef4:	003f5406 	br	5c48 <__alt_mem_onchip_memory2_0+0xf7005c48>
    5ef8:	61bfffc4 	addi	r6,r12,-1
    5efc:	300490fa 	slli	r2,r6,3
    5f00:	00c00074 	movhi	r3,1
    5f04:	18c8a704 	addi	r3,r3,8860
    5f08:	1885883a 	add	r2,r3,r2
    5f0c:	11000017 	ldw	r4,0(r2)
    5f10:	11400117 	ldw	r5,4(r2)
    5f14:	d8800717 	ldw	r2,28(sp)
    5f18:	880f883a 	mov	r7,r17
    5f1c:	d9801215 	stw	r6,72(sp)
    5f20:	800d883a 	mov	r6,r16
    5f24:	db001615 	stw	r12,88(sp)
    5f28:	15c00044 	addi	r23,r2,1
    5f2c:	000de500 	call	de50 <__muldf3>
    5f30:	d9401017 	ldw	r5,64(sp)
    5f34:	d9000f17 	ldw	r4,60(sp)
    5f38:	d8c01515 	stw	r3,84(sp)
    5f3c:	d8801415 	stw	r2,80(sp)
    5f40:	000efb80 	call	efb8 <__fixdfsi>
    5f44:	1009883a 	mov	r4,r2
    5f48:	1021883a 	mov	r16,r2
    5f4c:	000f0380 	call	f038 <__floatsidf>
    5f50:	d9000f17 	ldw	r4,60(sp)
    5f54:	d9401017 	ldw	r5,64(sp)
    5f58:	100d883a 	mov	r6,r2
    5f5c:	180f883a 	mov	r7,r3
    5f60:	000e6bc0 	call	e6bc <__subdf3>
    5f64:	1829883a 	mov	r20,r3
    5f68:	d8c00717 	ldw	r3,28(sp)
    5f6c:	84000c04 	addi	r16,r16,48
    5f70:	1023883a 	mov	r17,r2
    5f74:	1c000005 	stb	r16,0(r3)
    5f78:	db001617 	ldw	r12,88(sp)
    5f7c:	00800044 	movi	r2,1
    5f80:	60802226 	beq	r12,r2,600c <_dtoa_r+0x1424>
    5f84:	d9c00717 	ldw	r7,28(sp)
    5f88:	8805883a 	mov	r2,r17
    5f8c:	b82b883a 	mov	r21,r23
    5f90:	3b19883a 	add	r12,r7,r12
    5f94:	6023883a 	mov	r17,r12
    5f98:	a007883a 	mov	r3,r20
    5f9c:	dc800f15 	stw	r18,60(sp)
    5fa0:	000d883a 	mov	r6,zero
    5fa4:	01d00934 	movhi	r7,16420
    5fa8:	1009883a 	mov	r4,r2
    5fac:	180b883a 	mov	r5,r3
    5fb0:	000de500 	call	de50 <__muldf3>
    5fb4:	180b883a 	mov	r5,r3
    5fb8:	1009883a 	mov	r4,r2
    5fbc:	1829883a 	mov	r20,r3
    5fc0:	1025883a 	mov	r18,r2
    5fc4:	000efb80 	call	efb8 <__fixdfsi>
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	1021883a 	mov	r16,r2
    5fd0:	000f0380 	call	f038 <__floatsidf>
    5fd4:	100d883a 	mov	r6,r2
    5fd8:	180f883a 	mov	r7,r3
    5fdc:	9009883a 	mov	r4,r18
    5fe0:	a00b883a 	mov	r5,r20
    5fe4:	84000c04 	addi	r16,r16,48
    5fe8:	000e6bc0 	call	e6bc <__subdf3>
    5fec:	ad400044 	addi	r21,r21,1
    5ff0:	ac3fffc5 	stb	r16,-1(r21)
    5ff4:	ac7fea1e 	bne	r21,r17,5fa0 <__alt_mem_onchip_memory2_0+0xf7005fa0>
    5ff8:	1023883a 	mov	r17,r2
    5ffc:	d8801217 	ldw	r2,72(sp)
    6000:	dc800f17 	ldw	r18,60(sp)
    6004:	1829883a 	mov	r20,r3
    6008:	b8af883a 	add	r23,r23,r2
    600c:	d9001417 	ldw	r4,80(sp)
    6010:	d9401517 	ldw	r5,84(sp)
    6014:	000d883a 	mov	r6,zero
    6018:	01cff834 	movhi	r7,16352
    601c:	000c97c0 	call	c97c <__adddf3>
    6020:	880d883a 	mov	r6,r17
    6024:	a00f883a 	mov	r7,r20
    6028:	1009883a 	mov	r4,r2
    602c:	180b883a 	mov	r5,r3
    6030:	000dd5c0 	call	dd5c <__ledf2>
    6034:	10003e0e 	bge	r2,zero,6130 <_dtoa_r+0x1548>
    6038:	d9001317 	ldw	r4,76(sp)
    603c:	bd3fffc3 	ldbu	r20,-1(r23)
    6040:	d9000515 	stw	r4,20(sp)
    6044:	003d3b06 	br	5534 <__alt_mem_onchip_memory2_0+0xf7005534>
    6048:	0027883a 	mov	r19,zero
    604c:	003f1b06 	br	5cbc <__alt_mem_onchip_memory2_0+0xf7005cbc>
    6050:	d8800817 	ldw	r2,32(sp)
    6054:	11e9c83a 	sub	r20,r2,r7
    6058:	0005883a 	mov	r2,zero
    605c:	003d5406 	br	55b0 <__alt_mem_onchip_memory2_0+0xf70055b0>
    6060:	00800044 	movi	r2,1
    6064:	003dc706 	br	5784 <__alt_mem_onchip_memory2_0+0xf7005784>
    6068:	d8c00217 	ldw	r3,8(sp)
    606c:	00800d84 	movi	r2,54
    6070:	dd400a17 	ldw	r21,40(sp)
    6074:	10c5c83a 	sub	r2,r2,r3
    6078:	dd000817 	ldw	r20,32(sp)
    607c:	003d4c06 	br	55b0 <__alt_mem_onchip_memory2_0+0xf70055b0>
    6080:	dc800f15 	stw	r18,60(sp)
    6084:	dcc01015 	stw	r19,64(sp)
    6088:	04000084 	movi	r16,2
    608c:	003bed06 	br	5044 <__alt_mem_onchip_memory2_0+0xf7005044>
    6090:	d9000617 	ldw	r4,24(sp)
    6094:	203f0d26 	beq	r4,zero,5ccc <__alt_mem_onchip_memory2_0+0xf7005ccc>
    6098:	d9800c17 	ldw	r6,48(sp)
    609c:	01bcab0e 	bge	zero,r6,534c <__alt_mem_onchip_memory2_0+0xf700534c>
    60a0:	d9401017 	ldw	r5,64(sp)
    60a4:	d9000f17 	ldw	r4,60(sp)
    60a8:	000d883a 	mov	r6,zero
    60ac:	01d00934 	movhi	r7,16420
    60b0:	000de500 	call	de50 <__muldf3>
    60b4:	81000044 	addi	r4,r16,1
    60b8:	d8800f15 	stw	r2,60(sp)
    60bc:	d8c01015 	stw	r3,64(sp)
    60c0:	000f0380 	call	f038 <__floatsidf>
    60c4:	d9800f17 	ldw	r6,60(sp)
    60c8:	d9c01017 	ldw	r7,64(sp)
    60cc:	1009883a 	mov	r4,r2
    60d0:	180b883a 	mov	r5,r3
    60d4:	000de500 	call	de50 <__muldf3>
    60d8:	01d00734 	movhi	r7,16412
    60dc:	000d883a 	mov	r6,zero
    60e0:	1009883a 	mov	r4,r2
    60e4:	180b883a 	mov	r5,r3
    60e8:	000c97c0 	call	c97c <__adddf3>
    60ec:	d9c00517 	ldw	r7,20(sp)
    60f0:	047f3034 	movhi	r17,64704
    60f4:	1021883a 	mov	r16,r2
    60f8:	39ffffc4 	addi	r7,r7,-1
    60fc:	d9c01315 	stw	r7,76(sp)
    6100:	1c63883a 	add	r17,r3,r17
    6104:	db000c17 	ldw	r12,48(sp)
    6108:	003bea06 	br	50b4 <__alt_mem_onchip_memory2_0+0xf70050b4>
    610c:	dc000915 	stw	r16,36(sp)
    6110:	003e0e06 	br	594c <__alt_mem_onchip_memory2_0+0xf700594c>
    6114:	01000e44 	movi	r4,57
    6118:	8825883a 	mov	r18,r17
    611c:	9dc00044 	addi	r23,r19,1
    6120:	99000005 	stb	r4,0(r19)
    6124:	a023883a 	mov	r17,r20
    6128:	dc000915 	stw	r16,36(sp)
    612c:	003da406 	br	57c0 <__alt_mem_onchip_memory2_0+0xf70057c0>
    6130:	d9801417 	ldw	r6,80(sp)
    6134:	d9c01517 	ldw	r7,84(sp)
    6138:	0009883a 	mov	r4,zero
    613c:	014ff834 	movhi	r5,16352
    6140:	000e6bc0 	call	e6bc <__subdf3>
    6144:	880d883a 	mov	r6,r17
    6148:	a00f883a 	mov	r7,r20
    614c:	1009883a 	mov	r4,r2
    6150:	180b883a 	mov	r5,r3
    6154:	000dc800 	call	dc80 <__gedf2>
    6158:	00bc7c0e 	bge	zero,r2,534c <__alt_mem_onchip_memory2_0+0xf700534c>
    615c:	01000c04 	movi	r4,48
    6160:	00000106 	br	6168 <_dtoa_r+0x1580>
    6164:	102f883a 	mov	r23,r2
    6168:	b8bfffc4 	addi	r2,r23,-1
    616c:	10c00007 	ldb	r3,0(r2)
    6170:	193ffc26 	beq	r3,r4,6164 <__alt_mem_onchip_memory2_0+0xf7006164>
    6174:	d9801317 	ldw	r6,76(sp)
    6178:	d9800515 	stw	r6,20(sp)
    617c:	003c4406 	br	5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    6180:	d9801317 	ldw	r6,76(sp)
    6184:	d9800515 	stw	r6,20(sp)
    6188:	003cea06 	br	5534 <__alt_mem_onchip_memory2_0+0xf7005534>
    618c:	dd800f17 	ldw	r22,60(sp)
    6190:	dcc01017 	ldw	r19,64(sp)
    6194:	dc801217 	ldw	r18,72(sp)
    6198:	003c6c06 	br	534c <__alt_mem_onchip_memory2_0+0xf700534c>
    619c:	903e031e 	bne	r18,zero,59ac <__alt_mem_onchip_memory2_0+0xf70059ac>
    61a0:	003ebb06 	br	5c90 <__alt_mem_onchip_memory2_0+0xf7005c90>
    61a4:	103e6c1e 	bne	r2,zero,5b58 <__alt_mem_onchip_memory2_0+0xf7005b58>
    61a8:	4080004c 	andi	r2,r8,1
    61ac:	103e6a26 	beq	r2,zero,5b58 <__alt_mem_onchip_memory2_0+0xf7005b58>
    61b0:	003e6606 	br	5b4c <__alt_mem_onchip_memory2_0+0xf7005b4c>
    61b4:	d8c00317 	ldw	r3,12(sp)
    61b8:	00800084 	movi	r2,2
    61bc:	10c02916 	blt	r2,r3,6264 <_dtoa_r+0x167c>
    61c0:	d9000c17 	ldw	r4,48(sp)
    61c4:	003e8806 	br	5be8 <__alt_mem_onchip_memory2_0+0xf7005be8>
    61c8:	04000084 	movi	r16,2
    61cc:	003b9d06 	br	5044 <__alt_mem_onchip_memory2_0+0xf7005044>
    61d0:	d9001317 	ldw	r4,76(sp)
    61d4:	d9000515 	stw	r4,20(sp)
    61d8:	003cd606 	br	5534 <__alt_mem_onchip_memory2_0+0xf7005534>
    61dc:	d8801317 	ldw	r2,76(sp)
    61e0:	d8800515 	stw	r2,20(sp)
    61e4:	003c2a06 	br	5290 <__alt_mem_onchip_memory2_0+0xf7005290>
    61e8:	d9800317 	ldw	r6,12(sp)
    61ec:	00800084 	movi	r2,2
    61f0:	11801516 	blt	r2,r6,6248 <_dtoa_r+0x1660>
    61f4:	d9c00c17 	ldw	r7,48(sp)
    61f8:	d9c00615 	stw	r7,24(sp)
    61fc:	003df706 	br	59dc <__alt_mem_onchip_memory2_0+0xf70059dc>
    6200:	193d3926 	beq	r3,r4,56e8 <__alt_mem_onchip_memory2_0+0xf70056e8>
    6204:	00c00f04 	movi	r3,60
    6208:	1885c83a 	sub	r2,r3,r2
    620c:	003ddf06 	br	598c <__alt_mem_onchip_memory2_0+0xf700598c>
    6210:	e009883a 	mov	r4,fp
    6214:	e0001115 	stw	zero,68(fp)
    6218:	000b883a 	mov	r5,zero
    621c:	00082a00 	call	82a0 <_Balloc>
    6220:	d8800715 	stw	r2,28(sp)
    6224:	d8c00717 	ldw	r3,28(sp)
    6228:	00bfffc4 	movi	r2,-1
    622c:	01000044 	movi	r4,1
    6230:	d8800c15 	stw	r2,48(sp)
    6234:	e0c01015 	stw	r3,64(fp)
    6238:	d9000b15 	stw	r4,44(sp)
    623c:	d8800615 	stw	r2,24(sp)
    6240:	d8002215 	stw	zero,136(sp)
    6244:	003c4106 	br	534c <__alt_mem_onchip_memory2_0+0xf700534c>
    6248:	d8c00c17 	ldw	r3,48(sp)
    624c:	d8c00615 	stw	r3,24(sp)
    6250:	003e7006 	br	5c14 <__alt_mem_onchip_memory2_0+0xf7005c14>
    6254:	04400044 	movi	r17,1
    6258:	003b2006 	br	4edc <__alt_mem_onchip_memory2_0+0xf7004edc>
    625c:	000b883a 	mov	r5,zero
    6260:	003b3d06 	br	4f58 <__alt_mem_onchip_memory2_0+0xf7004f58>
    6264:	d8800c17 	ldw	r2,48(sp)
    6268:	d8800615 	stw	r2,24(sp)
    626c:	003e6906 	br	5c14 <__alt_mem_onchip_memory2_0+0xf7005c14>

00006270 <__sflush_r>:
    6270:	2880030b 	ldhu	r2,12(r5)
    6274:	defffb04 	addi	sp,sp,-20
    6278:	dcc00315 	stw	r19,12(sp)
    627c:	dc400115 	stw	r17,4(sp)
    6280:	dfc00415 	stw	ra,16(sp)
    6284:	dc800215 	stw	r18,8(sp)
    6288:	dc000015 	stw	r16,0(sp)
    628c:	10c0020c 	andi	r3,r2,8
    6290:	2823883a 	mov	r17,r5
    6294:	2027883a 	mov	r19,r4
    6298:	1800311e 	bne	r3,zero,6360 <__sflush_r+0xf0>
    629c:	28c00117 	ldw	r3,4(r5)
    62a0:	10820014 	ori	r2,r2,2048
    62a4:	2880030d 	sth	r2,12(r5)
    62a8:	00c04b0e 	bge	zero,r3,63d8 <__sflush_r+0x168>
    62ac:	8a000a17 	ldw	r8,40(r17)
    62b0:	40002326 	beq	r8,zero,6340 <__sflush_r+0xd0>
    62b4:	9c000017 	ldw	r16,0(r19)
    62b8:	10c4000c 	andi	r3,r2,4096
    62bc:	98000015 	stw	zero,0(r19)
    62c0:	18004826 	beq	r3,zero,63e4 <__sflush_r+0x174>
    62c4:	89801417 	ldw	r6,80(r17)
    62c8:	10c0010c 	andi	r3,r2,4
    62cc:	18000626 	beq	r3,zero,62e8 <__sflush_r+0x78>
    62d0:	88c00117 	ldw	r3,4(r17)
    62d4:	88800c17 	ldw	r2,48(r17)
    62d8:	30cdc83a 	sub	r6,r6,r3
    62dc:	10000226 	beq	r2,zero,62e8 <__sflush_r+0x78>
    62e0:	88800f17 	ldw	r2,60(r17)
    62e4:	308dc83a 	sub	r6,r6,r2
    62e8:	89400717 	ldw	r5,28(r17)
    62ec:	000f883a 	mov	r7,zero
    62f0:	9809883a 	mov	r4,r19
    62f4:	403ee83a 	callr	r8
    62f8:	00ffffc4 	movi	r3,-1
    62fc:	10c04426 	beq	r2,r3,6410 <__sflush_r+0x1a0>
    6300:	88c0030b 	ldhu	r3,12(r17)
    6304:	89000417 	ldw	r4,16(r17)
    6308:	88000115 	stw	zero,4(r17)
    630c:	197dffcc 	andi	r5,r3,63487
    6310:	8940030d 	sth	r5,12(r17)
    6314:	89000015 	stw	r4,0(r17)
    6318:	18c4000c 	andi	r3,r3,4096
    631c:	18002c1e 	bne	r3,zero,63d0 <__sflush_r+0x160>
    6320:	89400c17 	ldw	r5,48(r17)
    6324:	9c000015 	stw	r16,0(r19)
    6328:	28000526 	beq	r5,zero,6340 <__sflush_r+0xd0>
    632c:	88801004 	addi	r2,r17,64
    6330:	28800226 	beq	r5,r2,633c <__sflush_r+0xcc>
    6334:	9809883a 	mov	r4,r19
    6338:	00069ec0 	call	69ec <_free_r>
    633c:	88000c15 	stw	zero,48(r17)
    6340:	0005883a 	mov	r2,zero
    6344:	dfc00417 	ldw	ra,16(sp)
    6348:	dcc00317 	ldw	r19,12(sp)
    634c:	dc800217 	ldw	r18,8(sp)
    6350:	dc400117 	ldw	r17,4(sp)
    6354:	dc000017 	ldw	r16,0(sp)
    6358:	dec00504 	addi	sp,sp,20
    635c:	f800283a 	ret
    6360:	2c800417 	ldw	r18,16(r5)
    6364:	903ff626 	beq	r18,zero,6340 <__alt_mem_onchip_memory2_0+0xf7006340>
    6368:	2c000017 	ldw	r16,0(r5)
    636c:	108000cc 	andi	r2,r2,3
    6370:	2c800015 	stw	r18,0(r5)
    6374:	84a1c83a 	sub	r16,r16,r18
    6378:	1000131e 	bne	r2,zero,63c8 <__sflush_r+0x158>
    637c:	28800517 	ldw	r2,20(r5)
    6380:	88800215 	stw	r2,8(r17)
    6384:	04000316 	blt	zero,r16,6394 <__sflush_r+0x124>
    6388:	003fed06 	br	6340 <__alt_mem_onchip_memory2_0+0xf7006340>
    638c:	90a5883a 	add	r18,r18,r2
    6390:	043feb0e 	bge	zero,r16,6340 <__alt_mem_onchip_memory2_0+0xf7006340>
    6394:	88800917 	ldw	r2,36(r17)
    6398:	89400717 	ldw	r5,28(r17)
    639c:	800f883a 	mov	r7,r16
    63a0:	900d883a 	mov	r6,r18
    63a4:	9809883a 	mov	r4,r19
    63a8:	103ee83a 	callr	r2
    63ac:	80a1c83a 	sub	r16,r16,r2
    63b0:	00bff616 	blt	zero,r2,638c <__alt_mem_onchip_memory2_0+0xf700638c>
    63b4:	88c0030b 	ldhu	r3,12(r17)
    63b8:	00bfffc4 	movi	r2,-1
    63bc:	18c01014 	ori	r3,r3,64
    63c0:	88c0030d 	sth	r3,12(r17)
    63c4:	003fdf06 	br	6344 <__alt_mem_onchip_memory2_0+0xf7006344>
    63c8:	0005883a 	mov	r2,zero
    63cc:	003fec06 	br	6380 <__alt_mem_onchip_memory2_0+0xf7006380>
    63d0:	88801415 	stw	r2,80(r17)
    63d4:	003fd206 	br	6320 <__alt_mem_onchip_memory2_0+0xf7006320>
    63d8:	28c00f17 	ldw	r3,60(r5)
    63dc:	00ffb316 	blt	zero,r3,62ac <__alt_mem_onchip_memory2_0+0xf70062ac>
    63e0:	003fd706 	br	6340 <__alt_mem_onchip_memory2_0+0xf7006340>
    63e4:	89400717 	ldw	r5,28(r17)
    63e8:	000d883a 	mov	r6,zero
    63ec:	01c00044 	movi	r7,1
    63f0:	9809883a 	mov	r4,r19
    63f4:	403ee83a 	callr	r8
    63f8:	100d883a 	mov	r6,r2
    63fc:	00bfffc4 	movi	r2,-1
    6400:	30801426 	beq	r6,r2,6454 <__sflush_r+0x1e4>
    6404:	8880030b 	ldhu	r2,12(r17)
    6408:	8a000a17 	ldw	r8,40(r17)
    640c:	003fae06 	br	62c8 <__alt_mem_onchip_memory2_0+0xf70062c8>
    6410:	98c00017 	ldw	r3,0(r19)
    6414:	183fba26 	beq	r3,zero,6300 <__alt_mem_onchip_memory2_0+0xf7006300>
    6418:	01000744 	movi	r4,29
    641c:	19000626 	beq	r3,r4,6438 <__sflush_r+0x1c8>
    6420:	01000584 	movi	r4,22
    6424:	19000426 	beq	r3,r4,6438 <__sflush_r+0x1c8>
    6428:	88c0030b 	ldhu	r3,12(r17)
    642c:	18c01014 	ori	r3,r3,64
    6430:	88c0030d 	sth	r3,12(r17)
    6434:	003fc306 	br	6344 <__alt_mem_onchip_memory2_0+0xf7006344>
    6438:	8880030b 	ldhu	r2,12(r17)
    643c:	88c00417 	ldw	r3,16(r17)
    6440:	88000115 	stw	zero,4(r17)
    6444:	10bdffcc 	andi	r2,r2,63487
    6448:	8880030d 	sth	r2,12(r17)
    644c:	88c00015 	stw	r3,0(r17)
    6450:	003fb306 	br	6320 <__alt_mem_onchip_memory2_0+0xf7006320>
    6454:	98800017 	ldw	r2,0(r19)
    6458:	103fea26 	beq	r2,zero,6404 <__alt_mem_onchip_memory2_0+0xf7006404>
    645c:	00c00744 	movi	r3,29
    6460:	10c00226 	beq	r2,r3,646c <__sflush_r+0x1fc>
    6464:	00c00584 	movi	r3,22
    6468:	10c0031e 	bne	r2,r3,6478 <__sflush_r+0x208>
    646c:	9c000015 	stw	r16,0(r19)
    6470:	0005883a 	mov	r2,zero
    6474:	003fb306 	br	6344 <__alt_mem_onchip_memory2_0+0xf7006344>
    6478:	88c0030b 	ldhu	r3,12(r17)
    647c:	3005883a 	mov	r2,r6
    6480:	18c01014 	ori	r3,r3,64
    6484:	88c0030d 	sth	r3,12(r17)
    6488:	003fae06 	br	6344 <__alt_mem_onchip_memory2_0+0xf7006344>

0000648c <_fflush_r>:
    648c:	defffd04 	addi	sp,sp,-12
    6490:	dc000115 	stw	r16,4(sp)
    6494:	dfc00215 	stw	ra,8(sp)
    6498:	2021883a 	mov	r16,r4
    649c:	20000226 	beq	r4,zero,64a8 <_fflush_r+0x1c>
    64a0:	20800e17 	ldw	r2,56(r4)
    64a4:	10000c26 	beq	r2,zero,64d8 <_fflush_r+0x4c>
    64a8:	2880030f 	ldh	r2,12(r5)
    64ac:	1000051e 	bne	r2,zero,64c4 <_fflush_r+0x38>
    64b0:	0005883a 	mov	r2,zero
    64b4:	dfc00217 	ldw	ra,8(sp)
    64b8:	dc000117 	ldw	r16,4(sp)
    64bc:	dec00304 	addi	sp,sp,12
    64c0:	f800283a 	ret
    64c4:	8009883a 	mov	r4,r16
    64c8:	dfc00217 	ldw	ra,8(sp)
    64cc:	dc000117 	ldw	r16,4(sp)
    64d0:	dec00304 	addi	sp,sp,12
    64d4:	00062701 	jmpi	6270 <__sflush_r>
    64d8:	d9400015 	stw	r5,0(sp)
    64dc:	00068780 	call	6878 <__sinit>
    64e0:	d9400017 	ldw	r5,0(sp)
    64e4:	003ff006 	br	64a8 <__alt_mem_onchip_memory2_0+0xf70064a8>

000064e8 <fflush>:
    64e8:	20000526 	beq	r4,zero,6500 <fflush+0x18>
    64ec:	00800074 	movhi	r2,1
    64f0:	108fda04 	addi	r2,r2,16232
    64f4:	200b883a 	mov	r5,r4
    64f8:	11000017 	ldw	r4,0(r2)
    64fc:	000648c1 	jmpi	648c <_fflush_r>
    6500:	00800074 	movhi	r2,1
    6504:	108fd904 	addi	r2,r2,16228
    6508:	11000017 	ldw	r4,0(r2)
    650c:	01400034 	movhi	r5,0
    6510:	29592304 	addi	r5,r5,25740
    6514:	00072881 	jmpi	7288 <_fwalk_reent>

00006518 <__fp_unlock>:
    6518:	0005883a 	mov	r2,zero
    651c:	f800283a 	ret

00006520 <_cleanup_r>:
    6520:	01400074 	movhi	r5,1
    6524:	296d0904 	addi	r5,r5,-19420
    6528:	00072881 	jmpi	7288 <_fwalk_reent>

0000652c <__sinit.part.1>:
    652c:	defff704 	addi	sp,sp,-36
    6530:	00c00034 	movhi	r3,0
    6534:	dfc00815 	stw	ra,32(sp)
    6538:	ddc00715 	stw	r23,28(sp)
    653c:	dd800615 	stw	r22,24(sp)
    6540:	dd400515 	stw	r21,20(sp)
    6544:	dd000415 	stw	r20,16(sp)
    6548:	dcc00315 	stw	r19,12(sp)
    654c:	dc800215 	stw	r18,8(sp)
    6550:	dc400115 	stw	r17,4(sp)
    6554:	dc000015 	stw	r16,0(sp)
    6558:	18d94804 	addi	r3,r3,25888
    655c:	24000117 	ldw	r16,4(r4)
    6560:	20c00f15 	stw	r3,60(r4)
    6564:	2080bb04 	addi	r2,r4,748
    6568:	00c000c4 	movi	r3,3
    656c:	20c0b915 	stw	r3,740(r4)
    6570:	2080ba15 	stw	r2,744(r4)
    6574:	2000b815 	stw	zero,736(r4)
    6578:	05c00204 	movi	r23,8
    657c:	00800104 	movi	r2,4
    6580:	2025883a 	mov	r18,r4
    6584:	b80d883a 	mov	r6,r23
    6588:	81001704 	addi	r4,r16,92
    658c:	000b883a 	mov	r5,zero
    6590:	80000015 	stw	zero,0(r16)
    6594:	80000115 	stw	zero,4(r16)
    6598:	80000215 	stw	zero,8(r16)
    659c:	8080030d 	sth	r2,12(r16)
    65a0:	80001915 	stw	zero,100(r16)
    65a4:	8000038d 	sth	zero,14(r16)
    65a8:	80000415 	stw	zero,16(r16)
    65ac:	80000515 	stw	zero,20(r16)
    65b0:	80000615 	stw	zero,24(r16)
    65b4:	00081780 	call	8178 <memset>
    65b8:	05800074 	movhi	r22,1
    65bc:	94400217 	ldw	r17,8(r18)
    65c0:	05400074 	movhi	r21,1
    65c4:	05000074 	movhi	r20,1
    65c8:	04c00074 	movhi	r19,1
    65cc:	b5a66104 	addi	r22,r22,-26236
    65d0:	ad667804 	addi	r21,r21,-26144
    65d4:	a5269704 	addi	r20,r20,-26020
    65d8:	9ce6ae04 	addi	r19,r19,-25928
    65dc:	85800815 	stw	r22,32(r16)
    65e0:	85400915 	stw	r21,36(r16)
    65e4:	85000a15 	stw	r20,40(r16)
    65e8:	84c00b15 	stw	r19,44(r16)
    65ec:	84000715 	stw	r16,28(r16)
    65f0:	00800284 	movi	r2,10
    65f4:	8880030d 	sth	r2,12(r17)
    65f8:	00800044 	movi	r2,1
    65fc:	b80d883a 	mov	r6,r23
    6600:	89001704 	addi	r4,r17,92
    6604:	000b883a 	mov	r5,zero
    6608:	88000015 	stw	zero,0(r17)
    660c:	88000115 	stw	zero,4(r17)
    6610:	88000215 	stw	zero,8(r17)
    6614:	88001915 	stw	zero,100(r17)
    6618:	8880038d 	sth	r2,14(r17)
    661c:	88000415 	stw	zero,16(r17)
    6620:	88000515 	stw	zero,20(r17)
    6624:	88000615 	stw	zero,24(r17)
    6628:	00081780 	call	8178 <memset>
    662c:	94000317 	ldw	r16,12(r18)
    6630:	00800484 	movi	r2,18
    6634:	8c400715 	stw	r17,28(r17)
    6638:	8d800815 	stw	r22,32(r17)
    663c:	8d400915 	stw	r21,36(r17)
    6640:	8d000a15 	stw	r20,40(r17)
    6644:	8cc00b15 	stw	r19,44(r17)
    6648:	8080030d 	sth	r2,12(r16)
    664c:	00800084 	movi	r2,2
    6650:	80000015 	stw	zero,0(r16)
    6654:	80000115 	stw	zero,4(r16)
    6658:	80000215 	stw	zero,8(r16)
    665c:	80001915 	stw	zero,100(r16)
    6660:	8080038d 	sth	r2,14(r16)
    6664:	80000415 	stw	zero,16(r16)
    6668:	80000515 	stw	zero,20(r16)
    666c:	80000615 	stw	zero,24(r16)
    6670:	b80d883a 	mov	r6,r23
    6674:	000b883a 	mov	r5,zero
    6678:	81001704 	addi	r4,r16,92
    667c:	00081780 	call	8178 <memset>
    6680:	00800044 	movi	r2,1
    6684:	84000715 	stw	r16,28(r16)
    6688:	85800815 	stw	r22,32(r16)
    668c:	85400915 	stw	r21,36(r16)
    6690:	85000a15 	stw	r20,40(r16)
    6694:	84c00b15 	stw	r19,44(r16)
    6698:	90800e15 	stw	r2,56(r18)
    669c:	dfc00817 	ldw	ra,32(sp)
    66a0:	ddc00717 	ldw	r23,28(sp)
    66a4:	dd800617 	ldw	r22,24(sp)
    66a8:	dd400517 	ldw	r21,20(sp)
    66ac:	dd000417 	ldw	r20,16(sp)
    66b0:	dcc00317 	ldw	r19,12(sp)
    66b4:	dc800217 	ldw	r18,8(sp)
    66b8:	dc400117 	ldw	r17,4(sp)
    66bc:	dc000017 	ldw	r16,0(sp)
    66c0:	dec00904 	addi	sp,sp,36
    66c4:	f800283a 	ret

000066c8 <__fp_lock>:
    66c8:	0005883a 	mov	r2,zero
    66cc:	f800283a 	ret

000066d0 <__sfmoreglue>:
    66d0:	defffc04 	addi	sp,sp,-16
    66d4:	dc800215 	stw	r18,8(sp)
    66d8:	2825883a 	mov	r18,r5
    66dc:	dc000015 	stw	r16,0(sp)
    66e0:	01401a04 	movi	r5,104
    66e4:	2021883a 	mov	r16,r4
    66e8:	913fffc4 	addi	r4,r18,-1
    66ec:	dfc00315 	stw	ra,12(sp)
    66f0:	dc400115 	stw	r17,4(sp)
    66f4:	000c9540 	call	c954 <__mulsi3>
    66f8:	8009883a 	mov	r4,r16
    66fc:	11401d04 	addi	r5,r2,116
    6700:	1023883a 	mov	r17,r2
    6704:	00075e40 	call	75e4 <_malloc_r>
    6708:	1021883a 	mov	r16,r2
    670c:	10000726 	beq	r2,zero,672c <__sfmoreglue+0x5c>
    6710:	11000304 	addi	r4,r2,12
    6714:	10000015 	stw	zero,0(r2)
    6718:	14800115 	stw	r18,4(r2)
    671c:	11000215 	stw	r4,8(r2)
    6720:	89801a04 	addi	r6,r17,104
    6724:	000b883a 	mov	r5,zero
    6728:	00081780 	call	8178 <memset>
    672c:	8005883a 	mov	r2,r16
    6730:	dfc00317 	ldw	ra,12(sp)
    6734:	dc800217 	ldw	r18,8(sp)
    6738:	dc400117 	ldw	r17,4(sp)
    673c:	dc000017 	ldw	r16,0(sp)
    6740:	dec00404 	addi	sp,sp,16
    6744:	f800283a 	ret

00006748 <__sfp>:
    6748:	defffb04 	addi	sp,sp,-20
    674c:	dc000015 	stw	r16,0(sp)
    6750:	04000074 	movhi	r16,1
    6754:	840fd904 	addi	r16,r16,16228
    6758:	dcc00315 	stw	r19,12(sp)
    675c:	2027883a 	mov	r19,r4
    6760:	81000017 	ldw	r4,0(r16)
    6764:	dfc00415 	stw	ra,16(sp)
    6768:	dc800215 	stw	r18,8(sp)
    676c:	20800e17 	ldw	r2,56(r4)
    6770:	dc400115 	stw	r17,4(sp)
    6774:	1000021e 	bne	r2,zero,6780 <__sfp+0x38>
    6778:	000652c0 	call	652c <__sinit.part.1>
    677c:	81000017 	ldw	r4,0(r16)
    6780:	2480b804 	addi	r18,r4,736
    6784:	047fffc4 	movi	r17,-1
    6788:	91000117 	ldw	r4,4(r18)
    678c:	94000217 	ldw	r16,8(r18)
    6790:	213fffc4 	addi	r4,r4,-1
    6794:	20000a16 	blt	r4,zero,67c0 <__sfp+0x78>
    6798:	8080030f 	ldh	r2,12(r16)
    679c:	10000c26 	beq	r2,zero,67d0 <__sfp+0x88>
    67a0:	80c01d04 	addi	r3,r16,116
    67a4:	00000206 	br	67b0 <__sfp+0x68>
    67a8:	18bfe60f 	ldh	r2,-104(r3)
    67ac:	10000826 	beq	r2,zero,67d0 <__sfp+0x88>
    67b0:	213fffc4 	addi	r4,r4,-1
    67b4:	1c3ffd04 	addi	r16,r3,-12
    67b8:	18c01a04 	addi	r3,r3,104
    67bc:	247ffa1e 	bne	r4,r17,67a8 <__alt_mem_onchip_memory2_0+0xf70067a8>
    67c0:	90800017 	ldw	r2,0(r18)
    67c4:	10001d26 	beq	r2,zero,683c <__sfp+0xf4>
    67c8:	1025883a 	mov	r18,r2
    67cc:	003fee06 	br	6788 <__alt_mem_onchip_memory2_0+0xf7006788>
    67d0:	00bfffc4 	movi	r2,-1
    67d4:	8080038d 	sth	r2,14(r16)
    67d8:	00800044 	movi	r2,1
    67dc:	8080030d 	sth	r2,12(r16)
    67e0:	80001915 	stw	zero,100(r16)
    67e4:	80000015 	stw	zero,0(r16)
    67e8:	80000215 	stw	zero,8(r16)
    67ec:	80000115 	stw	zero,4(r16)
    67f0:	80000415 	stw	zero,16(r16)
    67f4:	80000515 	stw	zero,20(r16)
    67f8:	80000615 	stw	zero,24(r16)
    67fc:	01800204 	movi	r6,8
    6800:	000b883a 	mov	r5,zero
    6804:	81001704 	addi	r4,r16,92
    6808:	00081780 	call	8178 <memset>
    680c:	8005883a 	mov	r2,r16
    6810:	80000c15 	stw	zero,48(r16)
    6814:	80000d15 	stw	zero,52(r16)
    6818:	80001115 	stw	zero,68(r16)
    681c:	80001215 	stw	zero,72(r16)
    6820:	dfc00417 	ldw	ra,16(sp)
    6824:	dcc00317 	ldw	r19,12(sp)
    6828:	dc800217 	ldw	r18,8(sp)
    682c:	dc400117 	ldw	r17,4(sp)
    6830:	dc000017 	ldw	r16,0(sp)
    6834:	dec00504 	addi	sp,sp,20
    6838:	f800283a 	ret
    683c:	01400104 	movi	r5,4
    6840:	9809883a 	mov	r4,r19
    6844:	00066d00 	call	66d0 <__sfmoreglue>
    6848:	90800015 	stw	r2,0(r18)
    684c:	103fde1e 	bne	r2,zero,67c8 <__alt_mem_onchip_memory2_0+0xf70067c8>
    6850:	00800304 	movi	r2,12
    6854:	98800015 	stw	r2,0(r19)
    6858:	0005883a 	mov	r2,zero
    685c:	003ff006 	br	6820 <__alt_mem_onchip_memory2_0+0xf7006820>

00006860 <_cleanup>:
    6860:	00800074 	movhi	r2,1
    6864:	108fd904 	addi	r2,r2,16228
    6868:	11000017 	ldw	r4,0(r2)
    686c:	01400074 	movhi	r5,1
    6870:	296d0904 	addi	r5,r5,-19420
    6874:	00072881 	jmpi	7288 <_fwalk_reent>

00006878 <__sinit>:
    6878:	20800e17 	ldw	r2,56(r4)
    687c:	10000126 	beq	r2,zero,6884 <__sinit+0xc>
    6880:	f800283a 	ret
    6884:	000652c1 	jmpi	652c <__sinit.part.1>

00006888 <__sfp_lock_acquire>:
    6888:	f800283a 	ret

0000688c <__sfp_lock_release>:
    688c:	f800283a 	ret

00006890 <__sinit_lock_acquire>:
    6890:	f800283a 	ret

00006894 <__sinit_lock_release>:
    6894:	f800283a 	ret

00006898 <__fp_lock_all>:
    6898:	00800074 	movhi	r2,1
    689c:	108fda04 	addi	r2,r2,16232
    68a0:	11000017 	ldw	r4,0(r2)
    68a4:	01400034 	movhi	r5,0
    68a8:	2959b204 	addi	r5,r5,26312
    68ac:	00071c41 	jmpi	71c4 <_fwalk>

000068b0 <__fp_unlock_all>:
    68b0:	00800074 	movhi	r2,1
    68b4:	108fda04 	addi	r2,r2,16232
    68b8:	11000017 	ldw	r4,0(r2)
    68bc:	01400034 	movhi	r5,0
    68c0:	29594604 	addi	r5,r5,25880
    68c4:	00071c41 	jmpi	71c4 <_fwalk>

000068c8 <_malloc_trim_r>:
    68c8:	defffb04 	addi	sp,sp,-20
    68cc:	dcc00315 	stw	r19,12(sp)
    68d0:	04c00074 	movhi	r19,1
    68d4:	dc800215 	stw	r18,8(sp)
    68d8:	dc400115 	stw	r17,4(sp)
    68dc:	dc000015 	stw	r16,0(sp)
    68e0:	dfc00415 	stw	ra,16(sp)
    68e4:	2821883a 	mov	r16,r5
    68e8:	9cca5504 	addi	r19,r19,10580
    68ec:	2025883a 	mov	r18,r4
    68f0:	000f7bc0 	call	f7bc <__malloc_lock>
    68f4:	98800217 	ldw	r2,8(r19)
    68f8:	14400117 	ldw	r17,4(r2)
    68fc:	00bfff04 	movi	r2,-4
    6900:	88a2703a 	and	r17,r17,r2
    6904:	8c21c83a 	sub	r16,r17,r16
    6908:	8403fbc4 	addi	r16,r16,4079
    690c:	8020d33a 	srli	r16,r16,12
    6910:	0083ffc4 	movi	r2,4095
    6914:	843fffc4 	addi	r16,r16,-1
    6918:	8020933a 	slli	r16,r16,12
    691c:	1400060e 	bge	r2,r16,6938 <_malloc_trim_r+0x70>
    6920:	000b883a 	mov	r5,zero
    6924:	9009883a 	mov	r4,r18
    6928:	00099300 	call	9930 <_sbrk_r>
    692c:	98c00217 	ldw	r3,8(r19)
    6930:	1c47883a 	add	r3,r3,r17
    6934:	10c00a26 	beq	r2,r3,6960 <_malloc_trim_r+0x98>
    6938:	9009883a 	mov	r4,r18
    693c:	000f7e00 	call	f7e0 <__malloc_unlock>
    6940:	0005883a 	mov	r2,zero
    6944:	dfc00417 	ldw	ra,16(sp)
    6948:	dcc00317 	ldw	r19,12(sp)
    694c:	dc800217 	ldw	r18,8(sp)
    6950:	dc400117 	ldw	r17,4(sp)
    6954:	dc000017 	ldw	r16,0(sp)
    6958:	dec00504 	addi	sp,sp,20
    695c:	f800283a 	ret
    6960:	040bc83a 	sub	r5,zero,r16
    6964:	9009883a 	mov	r4,r18
    6968:	00099300 	call	9930 <_sbrk_r>
    696c:	00ffffc4 	movi	r3,-1
    6970:	10c00d26 	beq	r2,r3,69a8 <_malloc_trim_r+0xe0>
    6974:	00c00074 	movhi	r3,1
    6978:	18d6b304 	addi	r3,r3,23244
    697c:	18800017 	ldw	r2,0(r3)
    6980:	99000217 	ldw	r4,8(r19)
    6984:	8c23c83a 	sub	r17,r17,r16
    6988:	8c400054 	ori	r17,r17,1
    698c:	1421c83a 	sub	r16,r2,r16
    6990:	24400115 	stw	r17,4(r4)
    6994:	9009883a 	mov	r4,r18
    6998:	1c000015 	stw	r16,0(r3)
    699c:	000f7e00 	call	f7e0 <__malloc_unlock>
    69a0:	00800044 	movi	r2,1
    69a4:	003fe706 	br	6944 <__alt_mem_onchip_memory2_0+0xf7006944>
    69a8:	000b883a 	mov	r5,zero
    69ac:	9009883a 	mov	r4,r18
    69b0:	00099300 	call	9930 <_sbrk_r>
    69b4:	99000217 	ldw	r4,8(r19)
    69b8:	014003c4 	movi	r5,15
    69bc:	1107c83a 	sub	r3,r2,r4
    69c0:	28ffdd0e 	bge	r5,r3,6938 <__alt_mem_onchip_memory2_0+0xf7006938>
    69c4:	01400074 	movhi	r5,1
    69c8:	294fdc04 	addi	r5,r5,16240
    69cc:	29400017 	ldw	r5,0(r5)
    69d0:	18c00054 	ori	r3,r3,1
    69d4:	20c00115 	stw	r3,4(r4)
    69d8:	00c00074 	movhi	r3,1
    69dc:	1145c83a 	sub	r2,r2,r5
    69e0:	18d6b304 	addi	r3,r3,23244
    69e4:	18800015 	stw	r2,0(r3)
    69e8:	003fd306 	br	6938 <__alt_mem_onchip_memory2_0+0xf7006938>

000069ec <_free_r>:
    69ec:	28004126 	beq	r5,zero,6af4 <_free_r+0x108>
    69f0:	defffd04 	addi	sp,sp,-12
    69f4:	dc400115 	stw	r17,4(sp)
    69f8:	dc000015 	stw	r16,0(sp)
    69fc:	2023883a 	mov	r17,r4
    6a00:	2821883a 	mov	r16,r5
    6a04:	dfc00215 	stw	ra,8(sp)
    6a08:	000f7bc0 	call	f7bc <__malloc_lock>
    6a0c:	81ffff17 	ldw	r7,-4(r16)
    6a10:	00bfff84 	movi	r2,-2
    6a14:	01000074 	movhi	r4,1
    6a18:	81bffe04 	addi	r6,r16,-8
    6a1c:	3884703a 	and	r2,r7,r2
    6a20:	210a5504 	addi	r4,r4,10580
    6a24:	308b883a 	add	r5,r6,r2
    6a28:	2a400117 	ldw	r9,4(r5)
    6a2c:	22000217 	ldw	r8,8(r4)
    6a30:	00ffff04 	movi	r3,-4
    6a34:	48c6703a 	and	r3,r9,r3
    6a38:	2a005726 	beq	r5,r8,6b98 <_free_r+0x1ac>
    6a3c:	28c00115 	stw	r3,4(r5)
    6a40:	39c0004c 	andi	r7,r7,1
    6a44:	3800091e 	bne	r7,zero,6a6c <_free_r+0x80>
    6a48:	823ffe17 	ldw	r8,-8(r16)
    6a4c:	22400204 	addi	r9,r4,8
    6a50:	320dc83a 	sub	r6,r6,r8
    6a54:	31c00217 	ldw	r7,8(r6)
    6a58:	1205883a 	add	r2,r2,r8
    6a5c:	3a406526 	beq	r7,r9,6bf4 <_free_r+0x208>
    6a60:	32000317 	ldw	r8,12(r6)
    6a64:	3a000315 	stw	r8,12(r7)
    6a68:	41c00215 	stw	r7,8(r8)
    6a6c:	28cf883a 	add	r7,r5,r3
    6a70:	39c00117 	ldw	r7,4(r7)
    6a74:	39c0004c 	andi	r7,r7,1
    6a78:	38003a26 	beq	r7,zero,6b64 <_free_r+0x178>
    6a7c:	10c00054 	ori	r3,r2,1
    6a80:	30c00115 	stw	r3,4(r6)
    6a84:	3087883a 	add	r3,r6,r2
    6a88:	18800015 	stw	r2,0(r3)
    6a8c:	00c07fc4 	movi	r3,511
    6a90:	18801936 	bltu	r3,r2,6af8 <_free_r+0x10c>
    6a94:	1004d0fa 	srli	r2,r2,3
    6a98:	01c00044 	movi	r7,1
    6a9c:	21400117 	ldw	r5,4(r4)
    6aa0:	10c00044 	addi	r3,r2,1
    6aa4:	18c7883a 	add	r3,r3,r3
    6aa8:	1005d0ba 	srai	r2,r2,2
    6aac:	18c7883a 	add	r3,r3,r3
    6ab0:	18c7883a 	add	r3,r3,r3
    6ab4:	1907883a 	add	r3,r3,r4
    6ab8:	3884983a 	sll	r2,r7,r2
    6abc:	19c00017 	ldw	r7,0(r3)
    6ac0:	1a3ffe04 	addi	r8,r3,-8
    6ac4:	1144b03a 	or	r2,r2,r5
    6ac8:	32000315 	stw	r8,12(r6)
    6acc:	31c00215 	stw	r7,8(r6)
    6ad0:	20800115 	stw	r2,4(r4)
    6ad4:	19800015 	stw	r6,0(r3)
    6ad8:	39800315 	stw	r6,12(r7)
    6adc:	8809883a 	mov	r4,r17
    6ae0:	dfc00217 	ldw	ra,8(sp)
    6ae4:	dc400117 	ldw	r17,4(sp)
    6ae8:	dc000017 	ldw	r16,0(sp)
    6aec:	dec00304 	addi	sp,sp,12
    6af0:	000f7e01 	jmpi	f7e0 <__malloc_unlock>
    6af4:	f800283a 	ret
    6af8:	100ad27a 	srli	r5,r2,9
    6afc:	00c00104 	movi	r3,4
    6b00:	19404a36 	bltu	r3,r5,6c2c <_free_r+0x240>
    6b04:	100ad1ba 	srli	r5,r2,6
    6b08:	28c00e44 	addi	r3,r5,57
    6b0c:	18c7883a 	add	r3,r3,r3
    6b10:	29400e04 	addi	r5,r5,56
    6b14:	18c7883a 	add	r3,r3,r3
    6b18:	18c7883a 	add	r3,r3,r3
    6b1c:	1909883a 	add	r4,r3,r4
    6b20:	20c00017 	ldw	r3,0(r4)
    6b24:	01c00074 	movhi	r7,1
    6b28:	213ffe04 	addi	r4,r4,-8
    6b2c:	39ca5504 	addi	r7,r7,10580
    6b30:	20c04426 	beq	r4,r3,6c44 <_free_r+0x258>
    6b34:	01ffff04 	movi	r7,-4
    6b38:	19400117 	ldw	r5,4(r3)
    6b3c:	29ca703a 	and	r5,r5,r7
    6b40:	1140022e 	bgeu	r2,r5,6b4c <_free_r+0x160>
    6b44:	18c00217 	ldw	r3,8(r3)
    6b48:	20fffb1e 	bne	r4,r3,6b38 <__alt_mem_onchip_memory2_0+0xf7006b38>
    6b4c:	19000317 	ldw	r4,12(r3)
    6b50:	31000315 	stw	r4,12(r6)
    6b54:	30c00215 	stw	r3,8(r6)
    6b58:	21800215 	stw	r6,8(r4)
    6b5c:	19800315 	stw	r6,12(r3)
    6b60:	003fde06 	br	6adc <__alt_mem_onchip_memory2_0+0xf7006adc>
    6b64:	29c00217 	ldw	r7,8(r5)
    6b68:	10c5883a 	add	r2,r2,r3
    6b6c:	00c00074 	movhi	r3,1
    6b70:	18ca5704 	addi	r3,r3,10588
    6b74:	38c03b26 	beq	r7,r3,6c64 <_free_r+0x278>
    6b78:	2a000317 	ldw	r8,12(r5)
    6b7c:	11400054 	ori	r5,r2,1
    6b80:	3087883a 	add	r3,r6,r2
    6b84:	3a000315 	stw	r8,12(r7)
    6b88:	41c00215 	stw	r7,8(r8)
    6b8c:	31400115 	stw	r5,4(r6)
    6b90:	18800015 	stw	r2,0(r3)
    6b94:	003fbd06 	br	6a8c <__alt_mem_onchip_memory2_0+0xf7006a8c>
    6b98:	39c0004c 	andi	r7,r7,1
    6b9c:	10c5883a 	add	r2,r2,r3
    6ba0:	3800071e 	bne	r7,zero,6bc0 <_free_r+0x1d4>
    6ba4:	81fffe17 	ldw	r7,-8(r16)
    6ba8:	31cdc83a 	sub	r6,r6,r7
    6bac:	30c00317 	ldw	r3,12(r6)
    6bb0:	31400217 	ldw	r5,8(r6)
    6bb4:	11c5883a 	add	r2,r2,r7
    6bb8:	28c00315 	stw	r3,12(r5)
    6bbc:	19400215 	stw	r5,8(r3)
    6bc0:	10c00054 	ori	r3,r2,1
    6bc4:	30c00115 	stw	r3,4(r6)
    6bc8:	00c00074 	movhi	r3,1
    6bcc:	18cfdd04 	addi	r3,r3,16244
    6bd0:	18c00017 	ldw	r3,0(r3)
    6bd4:	21800215 	stw	r6,8(r4)
    6bd8:	10ffc036 	bltu	r2,r3,6adc <__alt_mem_onchip_memory2_0+0xf7006adc>
    6bdc:	00800074 	movhi	r2,1
    6be0:	1096aa04 	addi	r2,r2,23208
    6be4:	11400017 	ldw	r5,0(r2)
    6be8:	8809883a 	mov	r4,r17
    6bec:	00068c80 	call	68c8 <_malloc_trim_r>
    6bf0:	003fba06 	br	6adc <__alt_mem_onchip_memory2_0+0xf7006adc>
    6bf4:	28c9883a 	add	r4,r5,r3
    6bf8:	21000117 	ldw	r4,4(r4)
    6bfc:	2100004c 	andi	r4,r4,1
    6c00:	2000391e 	bne	r4,zero,6ce8 <_free_r+0x2fc>
    6c04:	29c00217 	ldw	r7,8(r5)
    6c08:	29000317 	ldw	r4,12(r5)
    6c0c:	1885883a 	add	r2,r3,r2
    6c10:	10c00054 	ori	r3,r2,1
    6c14:	39000315 	stw	r4,12(r7)
    6c18:	21c00215 	stw	r7,8(r4)
    6c1c:	30c00115 	stw	r3,4(r6)
    6c20:	308d883a 	add	r6,r6,r2
    6c24:	30800015 	stw	r2,0(r6)
    6c28:	003fac06 	br	6adc <__alt_mem_onchip_memory2_0+0xf7006adc>
    6c2c:	00c00504 	movi	r3,20
    6c30:	19401536 	bltu	r3,r5,6c88 <_free_r+0x29c>
    6c34:	28c01704 	addi	r3,r5,92
    6c38:	18c7883a 	add	r3,r3,r3
    6c3c:	294016c4 	addi	r5,r5,91
    6c40:	003fb406 	br	6b14 <__alt_mem_onchip_memory2_0+0xf7006b14>
    6c44:	280bd0ba 	srai	r5,r5,2
    6c48:	00c00044 	movi	r3,1
    6c4c:	38800117 	ldw	r2,4(r7)
    6c50:	194a983a 	sll	r5,r3,r5
    6c54:	2007883a 	mov	r3,r4
    6c58:	2884b03a 	or	r2,r5,r2
    6c5c:	38800115 	stw	r2,4(r7)
    6c60:	003fbb06 	br	6b50 <__alt_mem_onchip_memory2_0+0xf7006b50>
    6c64:	21800515 	stw	r6,20(r4)
    6c68:	21800415 	stw	r6,16(r4)
    6c6c:	10c00054 	ori	r3,r2,1
    6c70:	31c00315 	stw	r7,12(r6)
    6c74:	31c00215 	stw	r7,8(r6)
    6c78:	30c00115 	stw	r3,4(r6)
    6c7c:	308d883a 	add	r6,r6,r2
    6c80:	30800015 	stw	r2,0(r6)
    6c84:	003f9506 	br	6adc <__alt_mem_onchip_memory2_0+0xf7006adc>
    6c88:	00c01504 	movi	r3,84
    6c8c:	19400536 	bltu	r3,r5,6ca4 <_free_r+0x2b8>
    6c90:	100ad33a 	srli	r5,r2,12
    6c94:	28c01bc4 	addi	r3,r5,111
    6c98:	18c7883a 	add	r3,r3,r3
    6c9c:	29401b84 	addi	r5,r5,110
    6ca0:	003f9c06 	br	6b14 <__alt_mem_onchip_memory2_0+0xf7006b14>
    6ca4:	00c05504 	movi	r3,340
    6ca8:	19400536 	bltu	r3,r5,6cc0 <_free_r+0x2d4>
    6cac:	100ad3fa 	srli	r5,r2,15
    6cb0:	28c01e04 	addi	r3,r5,120
    6cb4:	18c7883a 	add	r3,r3,r3
    6cb8:	29401dc4 	addi	r5,r5,119
    6cbc:	003f9506 	br	6b14 <__alt_mem_onchip_memory2_0+0xf7006b14>
    6cc0:	00c15504 	movi	r3,1364
    6cc4:	19400536 	bltu	r3,r5,6cdc <_free_r+0x2f0>
    6cc8:	100ad4ba 	srli	r5,r2,18
    6ccc:	28c01f44 	addi	r3,r5,125
    6cd0:	18c7883a 	add	r3,r3,r3
    6cd4:	29401f04 	addi	r5,r5,124
    6cd8:	003f8e06 	br	6b14 <__alt_mem_onchip_memory2_0+0xf7006b14>
    6cdc:	00c03f84 	movi	r3,254
    6ce0:	01401f84 	movi	r5,126
    6ce4:	003f8b06 	br	6b14 <__alt_mem_onchip_memory2_0+0xf7006b14>
    6ce8:	10c00054 	ori	r3,r2,1
    6cec:	30c00115 	stw	r3,4(r6)
    6cf0:	308d883a 	add	r6,r6,r2
    6cf4:	30800015 	stw	r2,0(r6)
    6cf8:	003f7806 	br	6adc <__alt_mem_onchip_memory2_0+0xf7006adc>

00006cfc <__sfvwrite_r>:
    6cfc:	30800217 	ldw	r2,8(r6)
    6d00:	10006726 	beq	r2,zero,6ea0 <__sfvwrite_r+0x1a4>
    6d04:	28c0030b 	ldhu	r3,12(r5)
    6d08:	defff404 	addi	sp,sp,-48
    6d0c:	dd400715 	stw	r21,28(sp)
    6d10:	dd000615 	stw	r20,24(sp)
    6d14:	dc000215 	stw	r16,8(sp)
    6d18:	dfc00b15 	stw	ra,44(sp)
    6d1c:	df000a15 	stw	fp,40(sp)
    6d20:	ddc00915 	stw	r23,36(sp)
    6d24:	dd800815 	stw	r22,32(sp)
    6d28:	dcc00515 	stw	r19,20(sp)
    6d2c:	dc800415 	stw	r18,16(sp)
    6d30:	dc400315 	stw	r17,12(sp)
    6d34:	1880020c 	andi	r2,r3,8
    6d38:	2821883a 	mov	r16,r5
    6d3c:	202b883a 	mov	r21,r4
    6d40:	3029883a 	mov	r20,r6
    6d44:	10002726 	beq	r2,zero,6de4 <__sfvwrite_r+0xe8>
    6d48:	28800417 	ldw	r2,16(r5)
    6d4c:	10002526 	beq	r2,zero,6de4 <__sfvwrite_r+0xe8>
    6d50:	1880008c 	andi	r2,r3,2
    6d54:	a4400017 	ldw	r17,0(r20)
    6d58:	10002a26 	beq	r2,zero,6e04 <__sfvwrite_r+0x108>
    6d5c:	05a00034 	movhi	r22,32768
    6d60:	0027883a 	mov	r19,zero
    6d64:	0025883a 	mov	r18,zero
    6d68:	b5bf0004 	addi	r22,r22,-1024
    6d6c:	980d883a 	mov	r6,r19
    6d70:	a809883a 	mov	r4,r21
    6d74:	90004626 	beq	r18,zero,6e90 <__sfvwrite_r+0x194>
    6d78:	900f883a 	mov	r7,r18
    6d7c:	b480022e 	bgeu	r22,r18,6d88 <__sfvwrite_r+0x8c>
    6d80:	01e00034 	movhi	r7,32768
    6d84:	39ff0004 	addi	r7,r7,-1024
    6d88:	80800917 	ldw	r2,36(r16)
    6d8c:	81400717 	ldw	r5,28(r16)
    6d90:	103ee83a 	callr	r2
    6d94:	00805a0e 	bge	zero,r2,6f00 <__sfvwrite_r+0x204>
    6d98:	a0c00217 	ldw	r3,8(r20)
    6d9c:	98a7883a 	add	r19,r19,r2
    6da0:	90a5c83a 	sub	r18,r18,r2
    6da4:	1885c83a 	sub	r2,r3,r2
    6da8:	a0800215 	stw	r2,8(r20)
    6dac:	103fef1e 	bne	r2,zero,6d6c <__alt_mem_onchip_memory2_0+0xf7006d6c>
    6db0:	0005883a 	mov	r2,zero
    6db4:	dfc00b17 	ldw	ra,44(sp)
    6db8:	df000a17 	ldw	fp,40(sp)
    6dbc:	ddc00917 	ldw	r23,36(sp)
    6dc0:	dd800817 	ldw	r22,32(sp)
    6dc4:	dd400717 	ldw	r21,28(sp)
    6dc8:	dd000617 	ldw	r20,24(sp)
    6dcc:	dcc00517 	ldw	r19,20(sp)
    6dd0:	dc800417 	ldw	r18,16(sp)
    6dd4:	dc400317 	ldw	r17,12(sp)
    6dd8:	dc000217 	ldw	r16,8(sp)
    6ddc:	dec00c04 	addi	sp,sp,48
    6de0:	f800283a 	ret
    6de4:	800b883a 	mov	r5,r16
    6de8:	a809883a 	mov	r4,r21
    6dec:	000486c0 	call	486c <__swsetup_r>
    6df0:	1000ee1e 	bne	r2,zero,71ac <__sfvwrite_r+0x4b0>
    6df4:	80c0030b 	ldhu	r3,12(r16)
    6df8:	a4400017 	ldw	r17,0(r20)
    6dfc:	1880008c 	andi	r2,r3,2
    6e00:	103fd61e 	bne	r2,zero,6d5c <__alt_mem_onchip_memory2_0+0xf7006d5c>
    6e04:	1880004c 	andi	r2,r3,1
    6e08:	1000421e 	bne	r2,zero,6f14 <__sfvwrite_r+0x218>
    6e0c:	0039883a 	mov	fp,zero
    6e10:	0025883a 	mov	r18,zero
    6e14:	90001a26 	beq	r18,zero,6e80 <__sfvwrite_r+0x184>
    6e18:	1880800c 	andi	r2,r3,512
    6e1c:	84c00217 	ldw	r19,8(r16)
    6e20:	10002126 	beq	r2,zero,6ea8 <__sfvwrite_r+0x1ac>
    6e24:	982f883a 	mov	r23,r19
    6e28:	94c09636 	bltu	r18,r19,7084 <__sfvwrite_r+0x388>
    6e2c:	1881200c 	andi	r2,r3,1152
    6e30:	1000a11e 	bne	r2,zero,70b8 <__sfvwrite_r+0x3bc>
    6e34:	81000017 	ldw	r4,0(r16)
    6e38:	b80d883a 	mov	r6,r23
    6e3c:	e00b883a 	mov	r5,fp
    6e40:	000801c0 	call	801c <memmove>
    6e44:	80c00217 	ldw	r3,8(r16)
    6e48:	81000017 	ldw	r4,0(r16)
    6e4c:	9005883a 	mov	r2,r18
    6e50:	1ce7c83a 	sub	r19,r3,r19
    6e54:	25cf883a 	add	r7,r4,r23
    6e58:	84c00215 	stw	r19,8(r16)
    6e5c:	81c00015 	stw	r7,0(r16)
    6e60:	a0c00217 	ldw	r3,8(r20)
    6e64:	e0b9883a 	add	fp,fp,r2
    6e68:	90a5c83a 	sub	r18,r18,r2
    6e6c:	18a7c83a 	sub	r19,r3,r2
    6e70:	a4c00215 	stw	r19,8(r20)
    6e74:	983fce26 	beq	r19,zero,6db0 <__alt_mem_onchip_memory2_0+0xf7006db0>
    6e78:	80c0030b 	ldhu	r3,12(r16)
    6e7c:	903fe61e 	bne	r18,zero,6e18 <__alt_mem_onchip_memory2_0+0xf7006e18>
    6e80:	8f000017 	ldw	fp,0(r17)
    6e84:	8c800117 	ldw	r18,4(r17)
    6e88:	8c400204 	addi	r17,r17,8
    6e8c:	003fe106 	br	6e14 <__alt_mem_onchip_memory2_0+0xf7006e14>
    6e90:	8cc00017 	ldw	r19,0(r17)
    6e94:	8c800117 	ldw	r18,4(r17)
    6e98:	8c400204 	addi	r17,r17,8
    6e9c:	003fb306 	br	6d6c <__alt_mem_onchip_memory2_0+0xf7006d6c>
    6ea0:	0005883a 	mov	r2,zero
    6ea4:	f800283a 	ret
    6ea8:	81000017 	ldw	r4,0(r16)
    6eac:	80800417 	ldw	r2,16(r16)
    6eb0:	11005a36 	bltu	r2,r4,701c <__sfvwrite_r+0x320>
    6eb4:	85c00517 	ldw	r23,20(r16)
    6eb8:	95c05836 	bltu	r18,r23,701c <__sfvwrite_r+0x320>
    6ebc:	00a00034 	movhi	r2,32768
    6ec0:	10bfffc4 	addi	r2,r2,-1
    6ec4:	9009883a 	mov	r4,r18
    6ec8:	1480012e 	bgeu	r2,r18,6ed0 <__sfvwrite_r+0x1d4>
    6ecc:	1009883a 	mov	r4,r2
    6ed0:	b80b883a 	mov	r5,r23
    6ed4:	000c7a00 	call	c7a0 <__divsi3>
    6ed8:	b80b883a 	mov	r5,r23
    6edc:	1009883a 	mov	r4,r2
    6ee0:	000c9540 	call	c954 <__mulsi3>
    6ee4:	81400717 	ldw	r5,28(r16)
    6ee8:	80c00917 	ldw	r3,36(r16)
    6eec:	100f883a 	mov	r7,r2
    6ef0:	e00d883a 	mov	r6,fp
    6ef4:	a809883a 	mov	r4,r21
    6ef8:	183ee83a 	callr	r3
    6efc:	00bfd816 	blt	zero,r2,6e60 <__alt_mem_onchip_memory2_0+0xf7006e60>
    6f00:	8080030b 	ldhu	r2,12(r16)
    6f04:	10801014 	ori	r2,r2,64
    6f08:	8080030d 	sth	r2,12(r16)
    6f0c:	00bfffc4 	movi	r2,-1
    6f10:	003fa806 	br	6db4 <__alt_mem_onchip_memory2_0+0xf7006db4>
    6f14:	0027883a 	mov	r19,zero
    6f18:	0011883a 	mov	r8,zero
    6f1c:	0039883a 	mov	fp,zero
    6f20:	0025883a 	mov	r18,zero
    6f24:	90001f26 	beq	r18,zero,6fa4 <__sfvwrite_r+0x2a8>
    6f28:	40005a26 	beq	r8,zero,7094 <__sfvwrite_r+0x398>
    6f2c:	982d883a 	mov	r22,r19
    6f30:	94c0012e 	bgeu	r18,r19,6f38 <__sfvwrite_r+0x23c>
    6f34:	902d883a 	mov	r22,r18
    6f38:	81000017 	ldw	r4,0(r16)
    6f3c:	80800417 	ldw	r2,16(r16)
    6f40:	b02f883a 	mov	r23,r22
    6f44:	81c00517 	ldw	r7,20(r16)
    6f48:	1100032e 	bgeu	r2,r4,6f58 <__sfvwrite_r+0x25c>
    6f4c:	80c00217 	ldw	r3,8(r16)
    6f50:	38c7883a 	add	r3,r7,r3
    6f54:	1d801816 	blt	r3,r22,6fb8 <__sfvwrite_r+0x2bc>
    6f58:	b1c03e16 	blt	r22,r7,7054 <__sfvwrite_r+0x358>
    6f5c:	80800917 	ldw	r2,36(r16)
    6f60:	81400717 	ldw	r5,28(r16)
    6f64:	e00d883a 	mov	r6,fp
    6f68:	da000115 	stw	r8,4(sp)
    6f6c:	a809883a 	mov	r4,r21
    6f70:	103ee83a 	callr	r2
    6f74:	102f883a 	mov	r23,r2
    6f78:	da000117 	ldw	r8,4(sp)
    6f7c:	00bfe00e 	bge	zero,r2,6f00 <__alt_mem_onchip_memory2_0+0xf7006f00>
    6f80:	9de7c83a 	sub	r19,r19,r23
    6f84:	98001f26 	beq	r19,zero,7004 <__sfvwrite_r+0x308>
    6f88:	a0800217 	ldw	r2,8(r20)
    6f8c:	e5f9883a 	add	fp,fp,r23
    6f90:	95e5c83a 	sub	r18,r18,r23
    6f94:	15efc83a 	sub	r23,r2,r23
    6f98:	a5c00215 	stw	r23,8(r20)
    6f9c:	b83f8426 	beq	r23,zero,6db0 <__alt_mem_onchip_memory2_0+0xf7006db0>
    6fa0:	903fe11e 	bne	r18,zero,6f28 <__alt_mem_onchip_memory2_0+0xf7006f28>
    6fa4:	8f000017 	ldw	fp,0(r17)
    6fa8:	8c800117 	ldw	r18,4(r17)
    6fac:	0011883a 	mov	r8,zero
    6fb0:	8c400204 	addi	r17,r17,8
    6fb4:	003fdb06 	br	6f24 <__alt_mem_onchip_memory2_0+0xf7006f24>
    6fb8:	180d883a 	mov	r6,r3
    6fbc:	e00b883a 	mov	r5,fp
    6fc0:	da000115 	stw	r8,4(sp)
    6fc4:	d8c00015 	stw	r3,0(sp)
    6fc8:	000801c0 	call	801c <memmove>
    6fcc:	d8c00017 	ldw	r3,0(sp)
    6fd0:	80800017 	ldw	r2,0(r16)
    6fd4:	800b883a 	mov	r5,r16
    6fd8:	a809883a 	mov	r4,r21
    6fdc:	10c5883a 	add	r2,r2,r3
    6fe0:	80800015 	stw	r2,0(r16)
    6fe4:	d8c00015 	stw	r3,0(sp)
    6fe8:	000648c0 	call	648c <_fflush_r>
    6fec:	d8c00017 	ldw	r3,0(sp)
    6ff0:	da000117 	ldw	r8,4(sp)
    6ff4:	103fc21e 	bne	r2,zero,6f00 <__alt_mem_onchip_memory2_0+0xf7006f00>
    6ff8:	182f883a 	mov	r23,r3
    6ffc:	9de7c83a 	sub	r19,r19,r23
    7000:	983fe11e 	bne	r19,zero,6f88 <__alt_mem_onchip_memory2_0+0xf7006f88>
    7004:	800b883a 	mov	r5,r16
    7008:	a809883a 	mov	r4,r21
    700c:	000648c0 	call	648c <_fflush_r>
    7010:	103fbb1e 	bne	r2,zero,6f00 <__alt_mem_onchip_memory2_0+0xf7006f00>
    7014:	0011883a 	mov	r8,zero
    7018:	003fdb06 	br	6f88 <__alt_mem_onchip_memory2_0+0xf7006f88>
    701c:	94c0012e 	bgeu	r18,r19,7024 <__sfvwrite_r+0x328>
    7020:	9027883a 	mov	r19,r18
    7024:	980d883a 	mov	r6,r19
    7028:	e00b883a 	mov	r5,fp
    702c:	000801c0 	call	801c <memmove>
    7030:	80800217 	ldw	r2,8(r16)
    7034:	80c00017 	ldw	r3,0(r16)
    7038:	14c5c83a 	sub	r2,r2,r19
    703c:	1cc7883a 	add	r3,r3,r19
    7040:	80800215 	stw	r2,8(r16)
    7044:	80c00015 	stw	r3,0(r16)
    7048:	10004326 	beq	r2,zero,7158 <__sfvwrite_r+0x45c>
    704c:	9805883a 	mov	r2,r19
    7050:	003f8306 	br	6e60 <__alt_mem_onchip_memory2_0+0xf7006e60>
    7054:	b00d883a 	mov	r6,r22
    7058:	e00b883a 	mov	r5,fp
    705c:	da000115 	stw	r8,4(sp)
    7060:	000801c0 	call	801c <memmove>
    7064:	80800217 	ldw	r2,8(r16)
    7068:	80c00017 	ldw	r3,0(r16)
    706c:	da000117 	ldw	r8,4(sp)
    7070:	1585c83a 	sub	r2,r2,r22
    7074:	1dad883a 	add	r22,r3,r22
    7078:	80800215 	stw	r2,8(r16)
    707c:	85800015 	stw	r22,0(r16)
    7080:	003fbf06 	br	6f80 <__alt_mem_onchip_memory2_0+0xf7006f80>
    7084:	81000017 	ldw	r4,0(r16)
    7088:	9027883a 	mov	r19,r18
    708c:	902f883a 	mov	r23,r18
    7090:	003f6906 	br	6e38 <__alt_mem_onchip_memory2_0+0xf7006e38>
    7094:	900d883a 	mov	r6,r18
    7098:	01400284 	movi	r5,10
    709c:	e009883a 	mov	r4,fp
    70a0:	0007df00 	call	7df0 <memchr>
    70a4:	10003e26 	beq	r2,zero,71a0 <__sfvwrite_r+0x4a4>
    70a8:	10800044 	addi	r2,r2,1
    70ac:	1727c83a 	sub	r19,r2,fp
    70b0:	02000044 	movi	r8,1
    70b4:	003f9d06 	br	6f2c <__alt_mem_onchip_memory2_0+0xf7006f2c>
    70b8:	80800517 	ldw	r2,20(r16)
    70bc:	81400417 	ldw	r5,16(r16)
    70c0:	81c00017 	ldw	r7,0(r16)
    70c4:	10a7883a 	add	r19,r2,r2
    70c8:	9885883a 	add	r2,r19,r2
    70cc:	1026d7fa 	srli	r19,r2,31
    70d0:	396dc83a 	sub	r22,r7,r5
    70d4:	b1000044 	addi	r4,r22,1
    70d8:	9885883a 	add	r2,r19,r2
    70dc:	1027d07a 	srai	r19,r2,1
    70e0:	2485883a 	add	r2,r4,r18
    70e4:	980d883a 	mov	r6,r19
    70e8:	9880022e 	bgeu	r19,r2,70f4 <__sfvwrite_r+0x3f8>
    70ec:	1027883a 	mov	r19,r2
    70f0:	100d883a 	mov	r6,r2
    70f4:	18c1000c 	andi	r3,r3,1024
    70f8:	18001c26 	beq	r3,zero,716c <__sfvwrite_r+0x470>
    70fc:	300b883a 	mov	r5,r6
    7100:	a809883a 	mov	r4,r21
    7104:	00075e40 	call	75e4 <_malloc_r>
    7108:	102f883a 	mov	r23,r2
    710c:	10002926 	beq	r2,zero,71b4 <__sfvwrite_r+0x4b8>
    7110:	81400417 	ldw	r5,16(r16)
    7114:	b00d883a 	mov	r6,r22
    7118:	1009883a 	mov	r4,r2
    711c:	0007ed40 	call	7ed4 <memcpy>
    7120:	8080030b 	ldhu	r2,12(r16)
    7124:	00fedfc4 	movi	r3,-1153
    7128:	10c4703a 	and	r2,r2,r3
    712c:	10802014 	ori	r2,r2,128
    7130:	8080030d 	sth	r2,12(r16)
    7134:	bd89883a 	add	r4,r23,r22
    7138:	9d8fc83a 	sub	r7,r19,r22
    713c:	85c00415 	stw	r23,16(r16)
    7140:	84c00515 	stw	r19,20(r16)
    7144:	81000015 	stw	r4,0(r16)
    7148:	9027883a 	mov	r19,r18
    714c:	81c00215 	stw	r7,8(r16)
    7150:	902f883a 	mov	r23,r18
    7154:	003f3806 	br	6e38 <__alt_mem_onchip_memory2_0+0xf7006e38>
    7158:	800b883a 	mov	r5,r16
    715c:	a809883a 	mov	r4,r21
    7160:	000648c0 	call	648c <_fflush_r>
    7164:	103fb926 	beq	r2,zero,704c <__alt_mem_onchip_memory2_0+0xf700704c>
    7168:	003f6506 	br	6f00 <__alt_mem_onchip_memory2_0+0xf7006f00>
    716c:	a809883a 	mov	r4,r21
    7170:	00093580 	call	9358 <_realloc_r>
    7174:	102f883a 	mov	r23,r2
    7178:	103fee1e 	bne	r2,zero,7134 <__alt_mem_onchip_memory2_0+0xf7007134>
    717c:	81400417 	ldw	r5,16(r16)
    7180:	a809883a 	mov	r4,r21
    7184:	00069ec0 	call	69ec <_free_r>
    7188:	8080030b 	ldhu	r2,12(r16)
    718c:	00ffdfc4 	movi	r3,-129
    7190:	1884703a 	and	r2,r3,r2
    7194:	00c00304 	movi	r3,12
    7198:	a8c00015 	stw	r3,0(r21)
    719c:	003f5906 	br	6f04 <__alt_mem_onchip_memory2_0+0xf7006f04>
    71a0:	94c00044 	addi	r19,r18,1
    71a4:	02000044 	movi	r8,1
    71a8:	003f6006 	br	6f2c <__alt_mem_onchip_memory2_0+0xf7006f2c>
    71ac:	00bfffc4 	movi	r2,-1
    71b0:	003f0006 	br	6db4 <__alt_mem_onchip_memory2_0+0xf7006db4>
    71b4:	00800304 	movi	r2,12
    71b8:	a8800015 	stw	r2,0(r21)
    71bc:	8080030b 	ldhu	r2,12(r16)
    71c0:	003f5006 	br	6f04 <__alt_mem_onchip_memory2_0+0xf7006f04>

000071c4 <_fwalk>:
    71c4:	defff704 	addi	sp,sp,-36
    71c8:	dd000415 	stw	r20,16(sp)
    71cc:	dfc00815 	stw	ra,32(sp)
    71d0:	ddc00715 	stw	r23,28(sp)
    71d4:	dd800615 	stw	r22,24(sp)
    71d8:	dd400515 	stw	r21,20(sp)
    71dc:	dcc00315 	stw	r19,12(sp)
    71e0:	dc800215 	stw	r18,8(sp)
    71e4:	dc400115 	stw	r17,4(sp)
    71e8:	dc000015 	stw	r16,0(sp)
    71ec:	2500b804 	addi	r20,r4,736
    71f0:	a0002326 	beq	r20,zero,7280 <_fwalk+0xbc>
    71f4:	282b883a 	mov	r21,r5
    71f8:	002f883a 	mov	r23,zero
    71fc:	05800044 	movi	r22,1
    7200:	04ffffc4 	movi	r19,-1
    7204:	a4400117 	ldw	r17,4(r20)
    7208:	a4800217 	ldw	r18,8(r20)
    720c:	8c7fffc4 	addi	r17,r17,-1
    7210:	88000d16 	blt	r17,zero,7248 <_fwalk+0x84>
    7214:	94000304 	addi	r16,r18,12
    7218:	94800384 	addi	r18,r18,14
    721c:	8080000b 	ldhu	r2,0(r16)
    7220:	8c7fffc4 	addi	r17,r17,-1
    7224:	813ffd04 	addi	r4,r16,-12
    7228:	b080042e 	bgeu	r22,r2,723c <_fwalk+0x78>
    722c:	9080000f 	ldh	r2,0(r18)
    7230:	14c00226 	beq	r2,r19,723c <_fwalk+0x78>
    7234:	a83ee83a 	callr	r21
    7238:	b8aeb03a 	or	r23,r23,r2
    723c:	84001a04 	addi	r16,r16,104
    7240:	94801a04 	addi	r18,r18,104
    7244:	8cfff51e 	bne	r17,r19,721c <__alt_mem_onchip_memory2_0+0xf700721c>
    7248:	a5000017 	ldw	r20,0(r20)
    724c:	a03fed1e 	bne	r20,zero,7204 <__alt_mem_onchip_memory2_0+0xf7007204>
    7250:	b805883a 	mov	r2,r23
    7254:	dfc00817 	ldw	ra,32(sp)
    7258:	ddc00717 	ldw	r23,28(sp)
    725c:	dd800617 	ldw	r22,24(sp)
    7260:	dd400517 	ldw	r21,20(sp)
    7264:	dd000417 	ldw	r20,16(sp)
    7268:	dcc00317 	ldw	r19,12(sp)
    726c:	dc800217 	ldw	r18,8(sp)
    7270:	dc400117 	ldw	r17,4(sp)
    7274:	dc000017 	ldw	r16,0(sp)
    7278:	dec00904 	addi	sp,sp,36
    727c:	f800283a 	ret
    7280:	002f883a 	mov	r23,zero
    7284:	003ff206 	br	7250 <__alt_mem_onchip_memory2_0+0xf7007250>

00007288 <_fwalk_reent>:
    7288:	defff704 	addi	sp,sp,-36
    728c:	dd000415 	stw	r20,16(sp)
    7290:	dfc00815 	stw	ra,32(sp)
    7294:	ddc00715 	stw	r23,28(sp)
    7298:	dd800615 	stw	r22,24(sp)
    729c:	dd400515 	stw	r21,20(sp)
    72a0:	dcc00315 	stw	r19,12(sp)
    72a4:	dc800215 	stw	r18,8(sp)
    72a8:	dc400115 	stw	r17,4(sp)
    72ac:	dc000015 	stw	r16,0(sp)
    72b0:	2500b804 	addi	r20,r4,736
    72b4:	a0002326 	beq	r20,zero,7344 <_fwalk_reent+0xbc>
    72b8:	282b883a 	mov	r21,r5
    72bc:	2027883a 	mov	r19,r4
    72c0:	002f883a 	mov	r23,zero
    72c4:	05800044 	movi	r22,1
    72c8:	04bfffc4 	movi	r18,-1
    72cc:	a4400117 	ldw	r17,4(r20)
    72d0:	a4000217 	ldw	r16,8(r20)
    72d4:	8c7fffc4 	addi	r17,r17,-1
    72d8:	88000c16 	blt	r17,zero,730c <_fwalk_reent+0x84>
    72dc:	84000304 	addi	r16,r16,12
    72e0:	8080000b 	ldhu	r2,0(r16)
    72e4:	8c7fffc4 	addi	r17,r17,-1
    72e8:	817ffd04 	addi	r5,r16,-12
    72ec:	b080052e 	bgeu	r22,r2,7304 <_fwalk_reent+0x7c>
    72f0:	8080008f 	ldh	r2,2(r16)
    72f4:	9809883a 	mov	r4,r19
    72f8:	14800226 	beq	r2,r18,7304 <_fwalk_reent+0x7c>
    72fc:	a83ee83a 	callr	r21
    7300:	b8aeb03a 	or	r23,r23,r2
    7304:	84001a04 	addi	r16,r16,104
    7308:	8cbff51e 	bne	r17,r18,72e0 <__alt_mem_onchip_memory2_0+0xf70072e0>
    730c:	a5000017 	ldw	r20,0(r20)
    7310:	a03fee1e 	bne	r20,zero,72cc <__alt_mem_onchip_memory2_0+0xf70072cc>
    7314:	b805883a 	mov	r2,r23
    7318:	dfc00817 	ldw	ra,32(sp)
    731c:	ddc00717 	ldw	r23,28(sp)
    7320:	dd800617 	ldw	r22,24(sp)
    7324:	dd400517 	ldw	r21,20(sp)
    7328:	dd000417 	ldw	r20,16(sp)
    732c:	dcc00317 	ldw	r19,12(sp)
    7330:	dc800217 	ldw	r18,8(sp)
    7334:	dc400117 	ldw	r17,4(sp)
    7338:	dc000017 	ldw	r16,0(sp)
    733c:	dec00904 	addi	sp,sp,36
    7340:	f800283a 	ret
    7344:	002f883a 	mov	r23,zero
    7348:	003ff206 	br	7314 <__alt_mem_onchip_memory2_0+0xf7007314>

0000734c <_setlocale_r>:
    734c:	30001b26 	beq	r6,zero,73bc <_setlocale_r+0x70>
    7350:	01400074 	movhi	r5,1
    7354:	defffe04 	addi	sp,sp,-8
    7358:	29488d04 	addi	r5,r5,8756
    735c:	3009883a 	mov	r4,r6
    7360:	dc000015 	stw	r16,0(sp)
    7364:	dfc00115 	stw	ra,4(sp)
    7368:	3021883a 	mov	r16,r6
    736c:	0009ac00 	call	9ac0 <strcmp>
    7370:	1000061e 	bne	r2,zero,738c <_setlocale_r+0x40>
    7374:	00800074 	movhi	r2,1
    7378:	10888c04 	addi	r2,r2,8752
    737c:	dfc00117 	ldw	ra,4(sp)
    7380:	dc000017 	ldw	r16,0(sp)
    7384:	dec00204 	addi	sp,sp,8
    7388:	f800283a 	ret
    738c:	01400074 	movhi	r5,1
    7390:	29488c04 	addi	r5,r5,8752
    7394:	8009883a 	mov	r4,r16
    7398:	0009ac00 	call	9ac0 <strcmp>
    739c:	103ff526 	beq	r2,zero,7374 <__alt_mem_onchip_memory2_0+0xf7007374>
    73a0:	01400074 	movhi	r5,1
    73a4:	29487704 	addi	r5,r5,8668
    73a8:	8009883a 	mov	r4,r16
    73ac:	0009ac00 	call	9ac0 <strcmp>
    73b0:	103ff026 	beq	r2,zero,7374 <__alt_mem_onchip_memory2_0+0xf7007374>
    73b4:	0005883a 	mov	r2,zero
    73b8:	003ff006 	br	737c <__alt_mem_onchip_memory2_0+0xf700737c>
    73bc:	00800074 	movhi	r2,1
    73c0:	10888c04 	addi	r2,r2,8752
    73c4:	f800283a 	ret

000073c8 <__locale_charset>:
    73c8:	00800074 	movhi	r2,1
    73cc:	108a3f04 	addi	r2,r2,10492
    73d0:	f800283a 	ret

000073d4 <__locale_mb_cur_max>:
    73d4:	00800074 	movhi	r2,1
    73d8:	108fdb04 	addi	r2,r2,16236
    73dc:	10800017 	ldw	r2,0(r2)
    73e0:	f800283a 	ret

000073e4 <__locale_msgcharset>:
    73e4:	00800074 	movhi	r2,1
    73e8:	108a3704 	addi	r2,r2,10460
    73ec:	f800283a 	ret

000073f0 <__locale_cjk_lang>:
    73f0:	0005883a 	mov	r2,zero
    73f4:	f800283a 	ret

000073f8 <_localeconv_r>:
    73f8:	00800074 	movhi	r2,1
    73fc:	108a4704 	addi	r2,r2,10524
    7400:	f800283a 	ret

00007404 <setlocale>:
    7404:	00800074 	movhi	r2,1
    7408:	108fda04 	addi	r2,r2,16232
    740c:	280d883a 	mov	r6,r5
    7410:	200b883a 	mov	r5,r4
    7414:	11000017 	ldw	r4,0(r2)
    7418:	000734c1 	jmpi	734c <_setlocale_r>

0000741c <localeconv>:
    741c:	00800074 	movhi	r2,1
    7420:	108a4704 	addi	r2,r2,10524
    7424:	f800283a 	ret

00007428 <__smakebuf_r>:
    7428:	2880030b 	ldhu	r2,12(r5)
    742c:	10c0008c 	andi	r3,r2,2
    7430:	1800411e 	bne	r3,zero,7538 <__smakebuf_r+0x110>
    7434:	deffec04 	addi	sp,sp,-80
    7438:	dc000f15 	stw	r16,60(sp)
    743c:	2821883a 	mov	r16,r5
    7440:	2940038f 	ldh	r5,14(r5)
    7444:	dc401015 	stw	r17,64(sp)
    7448:	dfc01315 	stw	ra,76(sp)
    744c:	dcc01215 	stw	r19,72(sp)
    7450:	dc801115 	stw	r18,68(sp)
    7454:	2023883a 	mov	r17,r4
    7458:	28001c16 	blt	r5,zero,74cc <__smakebuf_r+0xa4>
    745c:	d80d883a 	mov	r6,sp
    7460:	000b7300 	call	b730 <_fstat_r>
    7464:	10001816 	blt	r2,zero,74c8 <__smakebuf_r+0xa0>
    7468:	d8800117 	ldw	r2,4(sp)
    746c:	00e00014 	movui	r3,32768
    7470:	10bc000c 	andi	r2,r2,61440
    7474:	14c80020 	cmpeqi	r19,r2,8192
    7478:	10c03726 	beq	r2,r3,7558 <__smakebuf_r+0x130>
    747c:	80c0030b 	ldhu	r3,12(r16)
    7480:	18c20014 	ori	r3,r3,2048
    7484:	80c0030d 	sth	r3,12(r16)
    7488:	00c80004 	movi	r3,8192
    748c:	10c0521e 	bne	r2,r3,75d8 <__smakebuf_r+0x1b0>
    7490:	8140038f 	ldh	r5,14(r16)
    7494:	8809883a 	mov	r4,r17
    7498:	000b78c0 	call	b78c <_isatty_r>
    749c:	10004c26 	beq	r2,zero,75d0 <__smakebuf_r+0x1a8>
    74a0:	8080030b 	ldhu	r2,12(r16)
    74a4:	80c010c4 	addi	r3,r16,67
    74a8:	80c00015 	stw	r3,0(r16)
    74ac:	10800054 	ori	r2,r2,1
    74b0:	8080030d 	sth	r2,12(r16)
    74b4:	00800044 	movi	r2,1
    74b8:	80c00415 	stw	r3,16(r16)
    74bc:	80800515 	stw	r2,20(r16)
    74c0:	04810004 	movi	r18,1024
    74c4:	00000706 	br	74e4 <__smakebuf_r+0xbc>
    74c8:	8080030b 	ldhu	r2,12(r16)
    74cc:	10c0200c 	andi	r3,r2,128
    74d0:	18001f1e 	bne	r3,zero,7550 <__smakebuf_r+0x128>
    74d4:	04810004 	movi	r18,1024
    74d8:	10820014 	ori	r2,r2,2048
    74dc:	8080030d 	sth	r2,12(r16)
    74e0:	0027883a 	mov	r19,zero
    74e4:	900b883a 	mov	r5,r18
    74e8:	8809883a 	mov	r4,r17
    74ec:	00075e40 	call	75e4 <_malloc_r>
    74f0:	10002c26 	beq	r2,zero,75a4 <__smakebuf_r+0x17c>
    74f4:	80c0030b 	ldhu	r3,12(r16)
    74f8:	01000034 	movhi	r4,0
    74fc:	21194804 	addi	r4,r4,25888
    7500:	89000f15 	stw	r4,60(r17)
    7504:	18c02014 	ori	r3,r3,128
    7508:	80c0030d 	sth	r3,12(r16)
    750c:	80800015 	stw	r2,0(r16)
    7510:	80800415 	stw	r2,16(r16)
    7514:	84800515 	stw	r18,20(r16)
    7518:	98001a1e 	bne	r19,zero,7584 <__smakebuf_r+0x15c>
    751c:	dfc01317 	ldw	ra,76(sp)
    7520:	dcc01217 	ldw	r19,72(sp)
    7524:	dc801117 	ldw	r18,68(sp)
    7528:	dc401017 	ldw	r17,64(sp)
    752c:	dc000f17 	ldw	r16,60(sp)
    7530:	dec01404 	addi	sp,sp,80
    7534:	f800283a 	ret
    7538:	288010c4 	addi	r2,r5,67
    753c:	28800015 	stw	r2,0(r5)
    7540:	28800415 	stw	r2,16(r5)
    7544:	00800044 	movi	r2,1
    7548:	28800515 	stw	r2,20(r5)
    754c:	f800283a 	ret
    7550:	04801004 	movi	r18,64
    7554:	003fe006 	br	74d8 <__alt_mem_onchip_memory2_0+0xf70074d8>
    7558:	81000a17 	ldw	r4,40(r16)
    755c:	00c00074 	movhi	r3,1
    7560:	18e69704 	addi	r3,r3,-26020
    7564:	20ffc51e 	bne	r4,r3,747c <__alt_mem_onchip_memory2_0+0xf700747c>
    7568:	8080030b 	ldhu	r2,12(r16)
    756c:	04810004 	movi	r18,1024
    7570:	84801315 	stw	r18,76(r16)
    7574:	1484b03a 	or	r2,r2,r18
    7578:	8080030d 	sth	r2,12(r16)
    757c:	0027883a 	mov	r19,zero
    7580:	003fd806 	br	74e4 <__alt_mem_onchip_memory2_0+0xf70074e4>
    7584:	8140038f 	ldh	r5,14(r16)
    7588:	8809883a 	mov	r4,r17
    758c:	000b78c0 	call	b78c <_isatty_r>
    7590:	103fe226 	beq	r2,zero,751c <__alt_mem_onchip_memory2_0+0xf700751c>
    7594:	8080030b 	ldhu	r2,12(r16)
    7598:	10800054 	ori	r2,r2,1
    759c:	8080030d 	sth	r2,12(r16)
    75a0:	003fde06 	br	751c <__alt_mem_onchip_memory2_0+0xf700751c>
    75a4:	8080030b 	ldhu	r2,12(r16)
    75a8:	10c0800c 	andi	r3,r2,512
    75ac:	183fdb1e 	bne	r3,zero,751c <__alt_mem_onchip_memory2_0+0xf700751c>
    75b0:	10800094 	ori	r2,r2,2
    75b4:	80c010c4 	addi	r3,r16,67
    75b8:	8080030d 	sth	r2,12(r16)
    75bc:	00800044 	movi	r2,1
    75c0:	80c00015 	stw	r3,0(r16)
    75c4:	80c00415 	stw	r3,16(r16)
    75c8:	80800515 	stw	r2,20(r16)
    75cc:	003fd306 	br	751c <__alt_mem_onchip_memory2_0+0xf700751c>
    75d0:	04810004 	movi	r18,1024
    75d4:	003fc306 	br	74e4 <__alt_mem_onchip_memory2_0+0xf70074e4>
    75d8:	0027883a 	mov	r19,zero
    75dc:	04810004 	movi	r18,1024
    75e0:	003fc006 	br	74e4 <__alt_mem_onchip_memory2_0+0xf70074e4>

000075e4 <_malloc_r>:
    75e4:	defff504 	addi	sp,sp,-44
    75e8:	dc800315 	stw	r18,12(sp)
    75ec:	dfc00a15 	stw	ra,40(sp)
    75f0:	df000915 	stw	fp,36(sp)
    75f4:	ddc00815 	stw	r23,32(sp)
    75f8:	dd800715 	stw	r22,28(sp)
    75fc:	dd400615 	stw	r21,24(sp)
    7600:	dd000515 	stw	r20,20(sp)
    7604:	dcc00415 	stw	r19,16(sp)
    7608:	dc400215 	stw	r17,8(sp)
    760c:	dc000115 	stw	r16,4(sp)
    7610:	288002c4 	addi	r2,r5,11
    7614:	00c00584 	movi	r3,22
    7618:	2025883a 	mov	r18,r4
    761c:	18807f2e 	bgeu	r3,r2,781c <_malloc_r+0x238>
    7620:	047ffe04 	movi	r17,-8
    7624:	1462703a 	and	r17,r2,r17
    7628:	8800a316 	blt	r17,zero,78b8 <_malloc_r+0x2d4>
    762c:	8940a236 	bltu	r17,r5,78b8 <_malloc_r+0x2d4>
    7630:	000f7bc0 	call	f7bc <__malloc_lock>
    7634:	00807dc4 	movi	r2,503
    7638:	1441e92e 	bgeu	r2,r17,7de0 <_malloc_r+0x7fc>
    763c:	8804d27a 	srli	r2,r17,9
    7640:	1000a126 	beq	r2,zero,78c8 <_malloc_r+0x2e4>
    7644:	00c00104 	movi	r3,4
    7648:	18811e36 	bltu	r3,r2,7ac4 <_malloc_r+0x4e0>
    764c:	8804d1ba 	srli	r2,r17,6
    7650:	12000e44 	addi	r8,r2,57
    7654:	11c00e04 	addi	r7,r2,56
    7658:	4209883a 	add	r4,r8,r8
    765c:	04c00074 	movhi	r19,1
    7660:	2109883a 	add	r4,r4,r4
    7664:	9cca5504 	addi	r19,r19,10580
    7668:	2109883a 	add	r4,r4,r4
    766c:	9909883a 	add	r4,r19,r4
    7670:	24000117 	ldw	r16,4(r4)
    7674:	213ffe04 	addi	r4,r4,-8
    7678:	24009726 	beq	r4,r16,78d8 <_malloc_r+0x2f4>
    767c:	80800117 	ldw	r2,4(r16)
    7680:	01bfff04 	movi	r6,-4
    7684:	014003c4 	movi	r5,15
    7688:	1184703a 	and	r2,r2,r6
    768c:	1447c83a 	sub	r3,r2,r17
    7690:	28c00716 	blt	r5,r3,76b0 <_malloc_r+0xcc>
    7694:	1800920e 	bge	r3,zero,78e0 <_malloc_r+0x2fc>
    7698:	84000317 	ldw	r16,12(r16)
    769c:	24008e26 	beq	r4,r16,78d8 <_malloc_r+0x2f4>
    76a0:	80800117 	ldw	r2,4(r16)
    76a4:	1184703a 	and	r2,r2,r6
    76a8:	1447c83a 	sub	r3,r2,r17
    76ac:	28fff90e 	bge	r5,r3,7694 <__alt_mem_onchip_memory2_0+0xf7007694>
    76b0:	3809883a 	mov	r4,r7
    76b4:	01800074 	movhi	r6,1
    76b8:	9c000417 	ldw	r16,16(r19)
    76bc:	318a5504 	addi	r6,r6,10580
    76c0:	32000204 	addi	r8,r6,8
    76c4:	82013426 	beq	r16,r8,7b98 <_malloc_r+0x5b4>
    76c8:	80c00117 	ldw	r3,4(r16)
    76cc:	00bfff04 	movi	r2,-4
    76d0:	188e703a 	and	r7,r3,r2
    76d4:	3c45c83a 	sub	r2,r7,r17
    76d8:	00c003c4 	movi	r3,15
    76dc:	18811f16 	blt	r3,r2,7b5c <_malloc_r+0x578>
    76e0:	32000515 	stw	r8,20(r6)
    76e4:	32000415 	stw	r8,16(r6)
    76e8:	10007f0e 	bge	r2,zero,78e8 <_malloc_r+0x304>
    76ec:	00807fc4 	movi	r2,511
    76f0:	11c0fd36 	bltu	r2,r7,7ae8 <_malloc_r+0x504>
    76f4:	3806d0fa 	srli	r3,r7,3
    76f8:	01c00044 	movi	r7,1
    76fc:	30800117 	ldw	r2,4(r6)
    7700:	19400044 	addi	r5,r3,1
    7704:	294b883a 	add	r5,r5,r5
    7708:	1807d0ba 	srai	r3,r3,2
    770c:	294b883a 	add	r5,r5,r5
    7710:	294b883a 	add	r5,r5,r5
    7714:	298b883a 	add	r5,r5,r6
    7718:	38c6983a 	sll	r3,r7,r3
    771c:	29c00017 	ldw	r7,0(r5)
    7720:	2a7ffe04 	addi	r9,r5,-8
    7724:	1886b03a 	or	r3,r3,r2
    7728:	82400315 	stw	r9,12(r16)
    772c:	81c00215 	stw	r7,8(r16)
    7730:	30c00115 	stw	r3,4(r6)
    7734:	2c000015 	stw	r16,0(r5)
    7738:	3c000315 	stw	r16,12(r7)
    773c:	2005d0ba 	srai	r2,r4,2
    7740:	01400044 	movi	r5,1
    7744:	288a983a 	sll	r5,r5,r2
    7748:	19406f36 	bltu	r3,r5,7908 <_malloc_r+0x324>
    774c:	28c4703a 	and	r2,r5,r3
    7750:	10000a1e 	bne	r2,zero,777c <_malloc_r+0x198>
    7754:	00bfff04 	movi	r2,-4
    7758:	294b883a 	add	r5,r5,r5
    775c:	2088703a 	and	r4,r4,r2
    7760:	28c4703a 	and	r2,r5,r3
    7764:	21000104 	addi	r4,r4,4
    7768:	1000041e 	bne	r2,zero,777c <_malloc_r+0x198>
    776c:	294b883a 	add	r5,r5,r5
    7770:	28c4703a 	and	r2,r5,r3
    7774:	21000104 	addi	r4,r4,4
    7778:	103ffc26 	beq	r2,zero,776c <__alt_mem_onchip_memory2_0+0xf700776c>
    777c:	02bfff04 	movi	r10,-4
    7780:	024003c4 	movi	r9,15
    7784:	21800044 	addi	r6,r4,1
    7788:	318d883a 	add	r6,r6,r6
    778c:	318d883a 	add	r6,r6,r6
    7790:	318d883a 	add	r6,r6,r6
    7794:	998d883a 	add	r6,r19,r6
    7798:	333ffe04 	addi	r12,r6,-8
    779c:	2017883a 	mov	r11,r4
    77a0:	31800104 	addi	r6,r6,4
    77a4:	34000017 	ldw	r16,0(r6)
    77a8:	31fffd04 	addi	r7,r6,-12
    77ac:	81c0041e 	bne	r16,r7,77c0 <_malloc_r+0x1dc>
    77b0:	0000fb06 	br	7ba0 <_malloc_r+0x5bc>
    77b4:	1801030e 	bge	r3,zero,7bc4 <_malloc_r+0x5e0>
    77b8:	84000317 	ldw	r16,12(r16)
    77bc:	81c0f826 	beq	r16,r7,7ba0 <_malloc_r+0x5bc>
    77c0:	80800117 	ldw	r2,4(r16)
    77c4:	1284703a 	and	r2,r2,r10
    77c8:	1447c83a 	sub	r3,r2,r17
    77cc:	48fff90e 	bge	r9,r3,77b4 <__alt_mem_onchip_memory2_0+0xf70077b4>
    77d0:	80800317 	ldw	r2,12(r16)
    77d4:	81000217 	ldw	r4,8(r16)
    77d8:	89400054 	ori	r5,r17,1
    77dc:	81400115 	stw	r5,4(r16)
    77e0:	20800315 	stw	r2,12(r4)
    77e4:	11000215 	stw	r4,8(r2)
    77e8:	8463883a 	add	r17,r16,r17
    77ec:	9c400515 	stw	r17,20(r19)
    77f0:	9c400415 	stw	r17,16(r19)
    77f4:	18800054 	ori	r2,r3,1
    77f8:	88800115 	stw	r2,4(r17)
    77fc:	8a000315 	stw	r8,12(r17)
    7800:	8a000215 	stw	r8,8(r17)
    7804:	88e3883a 	add	r17,r17,r3
    7808:	88c00015 	stw	r3,0(r17)
    780c:	9009883a 	mov	r4,r18
    7810:	000f7e00 	call	f7e0 <__malloc_unlock>
    7814:	80800204 	addi	r2,r16,8
    7818:	00001b06 	br	7888 <_malloc_r+0x2a4>
    781c:	04400404 	movi	r17,16
    7820:	89402536 	bltu	r17,r5,78b8 <_malloc_r+0x2d4>
    7824:	000f7bc0 	call	f7bc <__malloc_lock>
    7828:	00800184 	movi	r2,6
    782c:	01000084 	movi	r4,2
    7830:	04c00074 	movhi	r19,1
    7834:	1085883a 	add	r2,r2,r2
    7838:	9cca5504 	addi	r19,r19,10580
    783c:	1085883a 	add	r2,r2,r2
    7840:	9885883a 	add	r2,r19,r2
    7844:	14000117 	ldw	r16,4(r2)
    7848:	10fffe04 	addi	r3,r2,-8
    784c:	80c0d926 	beq	r16,r3,7bb4 <_malloc_r+0x5d0>
    7850:	80c00117 	ldw	r3,4(r16)
    7854:	81000317 	ldw	r4,12(r16)
    7858:	00bfff04 	movi	r2,-4
    785c:	1884703a 	and	r2,r3,r2
    7860:	81400217 	ldw	r5,8(r16)
    7864:	8085883a 	add	r2,r16,r2
    7868:	10c00117 	ldw	r3,4(r2)
    786c:	29000315 	stw	r4,12(r5)
    7870:	21400215 	stw	r5,8(r4)
    7874:	18c00054 	ori	r3,r3,1
    7878:	10c00115 	stw	r3,4(r2)
    787c:	9009883a 	mov	r4,r18
    7880:	000f7e00 	call	f7e0 <__malloc_unlock>
    7884:	80800204 	addi	r2,r16,8
    7888:	dfc00a17 	ldw	ra,40(sp)
    788c:	df000917 	ldw	fp,36(sp)
    7890:	ddc00817 	ldw	r23,32(sp)
    7894:	dd800717 	ldw	r22,28(sp)
    7898:	dd400617 	ldw	r21,24(sp)
    789c:	dd000517 	ldw	r20,20(sp)
    78a0:	dcc00417 	ldw	r19,16(sp)
    78a4:	dc800317 	ldw	r18,12(sp)
    78a8:	dc400217 	ldw	r17,8(sp)
    78ac:	dc000117 	ldw	r16,4(sp)
    78b0:	dec00b04 	addi	sp,sp,44
    78b4:	f800283a 	ret
    78b8:	00800304 	movi	r2,12
    78bc:	90800015 	stw	r2,0(r18)
    78c0:	0005883a 	mov	r2,zero
    78c4:	003ff006 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    78c8:	01002004 	movi	r4,128
    78cc:	02001004 	movi	r8,64
    78d0:	01c00fc4 	movi	r7,63
    78d4:	003f6106 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    78d8:	4009883a 	mov	r4,r8
    78dc:	003f7506 	br	76b4 <__alt_mem_onchip_memory2_0+0xf70076b4>
    78e0:	81000317 	ldw	r4,12(r16)
    78e4:	003fde06 	br	7860 <__alt_mem_onchip_memory2_0+0xf7007860>
    78e8:	81c5883a 	add	r2,r16,r7
    78ec:	11400117 	ldw	r5,4(r2)
    78f0:	9009883a 	mov	r4,r18
    78f4:	29400054 	ori	r5,r5,1
    78f8:	11400115 	stw	r5,4(r2)
    78fc:	000f7e00 	call	f7e0 <__malloc_unlock>
    7900:	80800204 	addi	r2,r16,8
    7904:	003fe006 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    7908:	9c000217 	ldw	r16,8(r19)
    790c:	00bfff04 	movi	r2,-4
    7910:	85800117 	ldw	r22,4(r16)
    7914:	b0ac703a 	and	r22,r22,r2
    7918:	b4400336 	bltu	r22,r17,7928 <_malloc_r+0x344>
    791c:	b445c83a 	sub	r2,r22,r17
    7920:	00c003c4 	movi	r3,15
    7924:	18805d16 	blt	r3,r2,7a9c <_malloc_r+0x4b8>
    7928:	05c00074 	movhi	r23,1
    792c:	00800074 	movhi	r2,1
    7930:	1096aa04 	addi	r2,r2,23208
    7934:	bdcfdc04 	addi	r23,r23,16240
    7938:	15400017 	ldw	r21,0(r2)
    793c:	b8c00017 	ldw	r3,0(r23)
    7940:	00bfffc4 	movi	r2,-1
    7944:	858d883a 	add	r6,r16,r22
    7948:	8d6b883a 	add	r21,r17,r21
    794c:	1880ea26 	beq	r3,r2,7cf8 <_malloc_r+0x714>
    7950:	ad4403c4 	addi	r21,r21,4111
    7954:	00bc0004 	movi	r2,-4096
    7958:	a8aa703a 	and	r21,r21,r2
    795c:	a80b883a 	mov	r5,r21
    7960:	9009883a 	mov	r4,r18
    7964:	d9800015 	stw	r6,0(sp)
    7968:	00099300 	call	9930 <_sbrk_r>
    796c:	1029883a 	mov	r20,r2
    7970:	00bfffc4 	movi	r2,-1
    7974:	d9800017 	ldw	r6,0(sp)
    7978:	a080e826 	beq	r20,r2,7d1c <_malloc_r+0x738>
    797c:	a180a636 	bltu	r20,r6,7c18 <_malloc_r+0x634>
    7980:	07000074 	movhi	fp,1
    7984:	e716b304 	addi	fp,fp,23244
    7988:	e0800017 	ldw	r2,0(fp)
    798c:	a887883a 	add	r3,r21,r2
    7990:	e0c00015 	stw	r3,0(fp)
    7994:	3500e626 	beq	r6,r20,7d30 <_malloc_r+0x74c>
    7998:	b9000017 	ldw	r4,0(r23)
    799c:	00bfffc4 	movi	r2,-1
    79a0:	2080ee26 	beq	r4,r2,7d5c <_malloc_r+0x778>
    79a4:	a185c83a 	sub	r2,r20,r6
    79a8:	10c5883a 	add	r2,r2,r3
    79ac:	e0800015 	stw	r2,0(fp)
    79b0:	a0c001cc 	andi	r3,r20,7
    79b4:	1800bc26 	beq	r3,zero,7ca8 <_malloc_r+0x6c4>
    79b8:	a0e9c83a 	sub	r20,r20,r3
    79bc:	00840204 	movi	r2,4104
    79c0:	a5000204 	addi	r20,r20,8
    79c4:	10c7c83a 	sub	r3,r2,r3
    79c8:	a545883a 	add	r2,r20,r21
    79cc:	1083ffcc 	andi	r2,r2,4095
    79d0:	18abc83a 	sub	r21,r3,r2
    79d4:	a80b883a 	mov	r5,r21
    79d8:	9009883a 	mov	r4,r18
    79dc:	00099300 	call	9930 <_sbrk_r>
    79e0:	00ffffc4 	movi	r3,-1
    79e4:	10c0e126 	beq	r2,r3,7d6c <_malloc_r+0x788>
    79e8:	1505c83a 	sub	r2,r2,r20
    79ec:	1545883a 	add	r2,r2,r21
    79f0:	10800054 	ori	r2,r2,1
    79f4:	e0c00017 	ldw	r3,0(fp)
    79f8:	9d000215 	stw	r20,8(r19)
    79fc:	a0800115 	stw	r2,4(r20)
    7a00:	a8c7883a 	add	r3,r21,r3
    7a04:	e0c00015 	stw	r3,0(fp)
    7a08:	84c00e26 	beq	r16,r19,7a44 <_malloc_r+0x460>
    7a0c:	018003c4 	movi	r6,15
    7a10:	3580a72e 	bgeu	r6,r22,7cb0 <_malloc_r+0x6cc>
    7a14:	81400117 	ldw	r5,4(r16)
    7a18:	013ffe04 	movi	r4,-8
    7a1c:	b0bffd04 	addi	r2,r22,-12
    7a20:	1104703a 	and	r2,r2,r4
    7a24:	2900004c 	andi	r4,r5,1
    7a28:	2088b03a 	or	r4,r4,r2
    7a2c:	81000115 	stw	r4,4(r16)
    7a30:	01400144 	movi	r5,5
    7a34:	8089883a 	add	r4,r16,r2
    7a38:	21400115 	stw	r5,4(r4)
    7a3c:	21400215 	stw	r5,8(r4)
    7a40:	3080cd36 	bltu	r6,r2,7d78 <_malloc_r+0x794>
    7a44:	00800074 	movhi	r2,1
    7a48:	1096a904 	addi	r2,r2,23204
    7a4c:	11000017 	ldw	r4,0(r2)
    7a50:	20c0012e 	bgeu	r4,r3,7a58 <_malloc_r+0x474>
    7a54:	10c00015 	stw	r3,0(r2)
    7a58:	00800074 	movhi	r2,1
    7a5c:	1096a804 	addi	r2,r2,23200
    7a60:	11000017 	ldw	r4,0(r2)
    7a64:	9c000217 	ldw	r16,8(r19)
    7a68:	20c0012e 	bgeu	r4,r3,7a70 <_malloc_r+0x48c>
    7a6c:	10c00015 	stw	r3,0(r2)
    7a70:	80c00117 	ldw	r3,4(r16)
    7a74:	00bfff04 	movi	r2,-4
    7a78:	1886703a 	and	r3,r3,r2
    7a7c:	1c45c83a 	sub	r2,r3,r17
    7a80:	1c400236 	bltu	r3,r17,7a8c <_malloc_r+0x4a8>
    7a84:	00c003c4 	movi	r3,15
    7a88:	18800416 	blt	r3,r2,7a9c <_malloc_r+0x4b8>
    7a8c:	9009883a 	mov	r4,r18
    7a90:	000f7e00 	call	f7e0 <__malloc_unlock>
    7a94:	0005883a 	mov	r2,zero
    7a98:	003f7b06 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    7a9c:	88c00054 	ori	r3,r17,1
    7aa0:	80c00115 	stw	r3,4(r16)
    7aa4:	8463883a 	add	r17,r16,r17
    7aa8:	10800054 	ori	r2,r2,1
    7aac:	9c400215 	stw	r17,8(r19)
    7ab0:	88800115 	stw	r2,4(r17)
    7ab4:	9009883a 	mov	r4,r18
    7ab8:	000f7e00 	call	f7e0 <__malloc_unlock>
    7abc:	80800204 	addi	r2,r16,8
    7ac0:	003f7106 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    7ac4:	00c00504 	movi	r3,20
    7ac8:	18804a2e 	bgeu	r3,r2,7bf4 <_malloc_r+0x610>
    7acc:	00c01504 	movi	r3,84
    7ad0:	18806e36 	bltu	r3,r2,7c8c <_malloc_r+0x6a8>
    7ad4:	8804d33a 	srli	r2,r17,12
    7ad8:	12001bc4 	addi	r8,r2,111
    7adc:	11c01b84 	addi	r7,r2,110
    7ae0:	4209883a 	add	r4,r8,r8
    7ae4:	003edd06 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    7ae8:	3804d27a 	srli	r2,r7,9
    7aec:	00c00104 	movi	r3,4
    7af0:	1880442e 	bgeu	r3,r2,7c04 <_malloc_r+0x620>
    7af4:	00c00504 	movi	r3,20
    7af8:	18808136 	bltu	r3,r2,7d00 <_malloc_r+0x71c>
    7afc:	11401704 	addi	r5,r2,92
    7b00:	10c016c4 	addi	r3,r2,91
    7b04:	294b883a 	add	r5,r5,r5
    7b08:	294b883a 	add	r5,r5,r5
    7b0c:	294b883a 	add	r5,r5,r5
    7b10:	994b883a 	add	r5,r19,r5
    7b14:	28800017 	ldw	r2,0(r5)
    7b18:	01800074 	movhi	r6,1
    7b1c:	297ffe04 	addi	r5,r5,-8
    7b20:	318a5504 	addi	r6,r6,10580
    7b24:	28806526 	beq	r5,r2,7cbc <_malloc_r+0x6d8>
    7b28:	01bfff04 	movi	r6,-4
    7b2c:	10c00117 	ldw	r3,4(r2)
    7b30:	1986703a 	and	r3,r3,r6
    7b34:	38c0022e 	bgeu	r7,r3,7b40 <_malloc_r+0x55c>
    7b38:	10800217 	ldw	r2,8(r2)
    7b3c:	28bffb1e 	bne	r5,r2,7b2c <__alt_mem_onchip_memory2_0+0xf7007b2c>
    7b40:	11400317 	ldw	r5,12(r2)
    7b44:	98c00117 	ldw	r3,4(r19)
    7b48:	81400315 	stw	r5,12(r16)
    7b4c:	80800215 	stw	r2,8(r16)
    7b50:	2c000215 	stw	r16,8(r5)
    7b54:	14000315 	stw	r16,12(r2)
    7b58:	003ef806 	br	773c <__alt_mem_onchip_memory2_0+0xf700773c>
    7b5c:	88c00054 	ori	r3,r17,1
    7b60:	80c00115 	stw	r3,4(r16)
    7b64:	8463883a 	add	r17,r16,r17
    7b68:	34400515 	stw	r17,20(r6)
    7b6c:	34400415 	stw	r17,16(r6)
    7b70:	10c00054 	ori	r3,r2,1
    7b74:	8a000315 	stw	r8,12(r17)
    7b78:	8a000215 	stw	r8,8(r17)
    7b7c:	88c00115 	stw	r3,4(r17)
    7b80:	88a3883a 	add	r17,r17,r2
    7b84:	88800015 	stw	r2,0(r17)
    7b88:	9009883a 	mov	r4,r18
    7b8c:	000f7e00 	call	f7e0 <__malloc_unlock>
    7b90:	80800204 	addi	r2,r16,8
    7b94:	003f3c06 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    7b98:	30c00117 	ldw	r3,4(r6)
    7b9c:	003ee706 	br	773c <__alt_mem_onchip_memory2_0+0xf700773c>
    7ba0:	5ac00044 	addi	r11,r11,1
    7ba4:	588000cc 	andi	r2,r11,3
    7ba8:	31800204 	addi	r6,r6,8
    7bac:	103efd1e 	bne	r2,zero,77a4 <__alt_mem_onchip_memory2_0+0xf70077a4>
    7bb0:	00002406 	br	7c44 <_malloc_r+0x660>
    7bb4:	14000317 	ldw	r16,12(r2)
    7bb8:	143f251e 	bne	r2,r16,7850 <__alt_mem_onchip_memory2_0+0xf7007850>
    7bbc:	21000084 	addi	r4,r4,2
    7bc0:	003ebc06 	br	76b4 <__alt_mem_onchip_memory2_0+0xf70076b4>
    7bc4:	8085883a 	add	r2,r16,r2
    7bc8:	10c00117 	ldw	r3,4(r2)
    7bcc:	81000317 	ldw	r4,12(r16)
    7bd0:	81400217 	ldw	r5,8(r16)
    7bd4:	18c00054 	ori	r3,r3,1
    7bd8:	10c00115 	stw	r3,4(r2)
    7bdc:	29000315 	stw	r4,12(r5)
    7be0:	21400215 	stw	r5,8(r4)
    7be4:	9009883a 	mov	r4,r18
    7be8:	000f7e00 	call	f7e0 <__malloc_unlock>
    7bec:	80800204 	addi	r2,r16,8
    7bf0:	003f2506 	br	7888 <__alt_mem_onchip_memory2_0+0xf7007888>
    7bf4:	12001704 	addi	r8,r2,92
    7bf8:	11c016c4 	addi	r7,r2,91
    7bfc:	4209883a 	add	r4,r8,r8
    7c00:	003e9606 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    7c04:	3804d1ba 	srli	r2,r7,6
    7c08:	11400e44 	addi	r5,r2,57
    7c0c:	10c00e04 	addi	r3,r2,56
    7c10:	294b883a 	add	r5,r5,r5
    7c14:	003fbc06 	br	7b08 <__alt_mem_onchip_memory2_0+0xf7007b08>
    7c18:	84ff5926 	beq	r16,r19,7980 <__alt_mem_onchip_memory2_0+0xf7007980>
    7c1c:	00800074 	movhi	r2,1
    7c20:	108a5504 	addi	r2,r2,10580
    7c24:	14000217 	ldw	r16,8(r2)
    7c28:	00bfff04 	movi	r2,-4
    7c2c:	80c00117 	ldw	r3,4(r16)
    7c30:	1886703a 	and	r3,r3,r2
    7c34:	003f9106 	br	7a7c <__alt_mem_onchip_memory2_0+0xf7007a7c>
    7c38:	60800217 	ldw	r2,8(r12)
    7c3c:	213fffc4 	addi	r4,r4,-1
    7c40:	1300651e 	bne	r2,r12,7dd8 <_malloc_r+0x7f4>
    7c44:	208000cc 	andi	r2,r4,3
    7c48:	633ffe04 	addi	r12,r12,-8
    7c4c:	103ffa1e 	bne	r2,zero,7c38 <__alt_mem_onchip_memory2_0+0xf7007c38>
    7c50:	98800117 	ldw	r2,4(r19)
    7c54:	0146303a 	nor	r3,zero,r5
    7c58:	1884703a 	and	r2,r3,r2
    7c5c:	98800115 	stw	r2,4(r19)
    7c60:	294b883a 	add	r5,r5,r5
    7c64:	117f2836 	bltu	r2,r5,7908 <__alt_mem_onchip_memory2_0+0xf7007908>
    7c68:	283f2726 	beq	r5,zero,7908 <__alt_mem_onchip_memory2_0+0xf7007908>
    7c6c:	2886703a 	and	r3,r5,r2
    7c70:	5809883a 	mov	r4,r11
    7c74:	183ec31e 	bne	r3,zero,7784 <__alt_mem_onchip_memory2_0+0xf7007784>
    7c78:	294b883a 	add	r5,r5,r5
    7c7c:	2886703a 	and	r3,r5,r2
    7c80:	21000104 	addi	r4,r4,4
    7c84:	183ffc26 	beq	r3,zero,7c78 <__alt_mem_onchip_memory2_0+0xf7007c78>
    7c88:	003ebe06 	br	7784 <__alt_mem_onchip_memory2_0+0xf7007784>
    7c8c:	00c05504 	movi	r3,340
    7c90:	18801236 	bltu	r3,r2,7cdc <_malloc_r+0x6f8>
    7c94:	8804d3fa 	srli	r2,r17,15
    7c98:	12001e04 	addi	r8,r2,120
    7c9c:	11c01dc4 	addi	r7,r2,119
    7ca0:	4209883a 	add	r4,r8,r8
    7ca4:	003e6d06 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    7ca8:	00c40004 	movi	r3,4096
    7cac:	003f4606 	br	79c8 <__alt_mem_onchip_memory2_0+0xf70079c8>
    7cb0:	00800044 	movi	r2,1
    7cb4:	a0800115 	stw	r2,4(r20)
    7cb8:	003f7406 	br	7a8c <__alt_mem_onchip_memory2_0+0xf7007a8c>
    7cbc:	1805d0ba 	srai	r2,r3,2
    7cc0:	01c00044 	movi	r7,1
    7cc4:	30c00117 	ldw	r3,4(r6)
    7cc8:	388e983a 	sll	r7,r7,r2
    7ccc:	2805883a 	mov	r2,r5
    7cd0:	38c6b03a 	or	r3,r7,r3
    7cd4:	30c00115 	stw	r3,4(r6)
    7cd8:	003f9b06 	br	7b48 <__alt_mem_onchip_memory2_0+0xf7007b48>
    7cdc:	00c15504 	movi	r3,1364
    7ce0:	18801a36 	bltu	r3,r2,7d4c <_malloc_r+0x768>
    7ce4:	8804d4ba 	srli	r2,r17,18
    7ce8:	12001f44 	addi	r8,r2,125
    7cec:	11c01f04 	addi	r7,r2,124
    7cf0:	4209883a 	add	r4,r8,r8
    7cf4:	003e5906 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    7cf8:	ad400404 	addi	r21,r21,16
    7cfc:	003f1706 	br	795c <__alt_mem_onchip_memory2_0+0xf700795c>
    7d00:	00c01504 	movi	r3,84
    7d04:	18802336 	bltu	r3,r2,7d94 <_malloc_r+0x7b0>
    7d08:	3804d33a 	srli	r2,r7,12
    7d0c:	11401bc4 	addi	r5,r2,111
    7d10:	10c01b84 	addi	r3,r2,110
    7d14:	294b883a 	add	r5,r5,r5
    7d18:	003f7b06 	br	7b08 <__alt_mem_onchip_memory2_0+0xf7007b08>
    7d1c:	9c000217 	ldw	r16,8(r19)
    7d20:	00bfff04 	movi	r2,-4
    7d24:	80c00117 	ldw	r3,4(r16)
    7d28:	1886703a 	and	r3,r3,r2
    7d2c:	003f5306 	br	7a7c <__alt_mem_onchip_memory2_0+0xf7007a7c>
    7d30:	3083ffcc 	andi	r2,r6,4095
    7d34:	103f181e 	bne	r2,zero,7998 <__alt_mem_onchip_memory2_0+0xf7007998>
    7d38:	99000217 	ldw	r4,8(r19)
    7d3c:	b545883a 	add	r2,r22,r21
    7d40:	10800054 	ori	r2,r2,1
    7d44:	20800115 	stw	r2,4(r4)
    7d48:	003f3e06 	br	7a44 <__alt_mem_onchip_memory2_0+0xf7007a44>
    7d4c:	01003f84 	movi	r4,254
    7d50:	02001fc4 	movi	r8,127
    7d54:	01c01f84 	movi	r7,126
    7d58:	003e4006 	br	765c <__alt_mem_onchip_memory2_0+0xf700765c>
    7d5c:	00800074 	movhi	r2,1
    7d60:	108fdc04 	addi	r2,r2,16240
    7d64:	15000015 	stw	r20,0(r2)
    7d68:	003f1106 	br	79b0 <__alt_mem_onchip_memory2_0+0xf70079b0>
    7d6c:	00800044 	movi	r2,1
    7d70:	002b883a 	mov	r21,zero
    7d74:	003f1f06 	br	79f4 <__alt_mem_onchip_memory2_0+0xf70079f4>
    7d78:	81400204 	addi	r5,r16,8
    7d7c:	9009883a 	mov	r4,r18
    7d80:	00069ec0 	call	69ec <_free_r>
    7d84:	00800074 	movhi	r2,1
    7d88:	1096b304 	addi	r2,r2,23244
    7d8c:	10c00017 	ldw	r3,0(r2)
    7d90:	003f2c06 	br	7a44 <__alt_mem_onchip_memory2_0+0xf7007a44>
    7d94:	00c05504 	movi	r3,340
    7d98:	18800536 	bltu	r3,r2,7db0 <_malloc_r+0x7cc>
    7d9c:	3804d3fa 	srli	r2,r7,15
    7da0:	11401e04 	addi	r5,r2,120
    7da4:	10c01dc4 	addi	r3,r2,119
    7da8:	294b883a 	add	r5,r5,r5
    7dac:	003f5606 	br	7b08 <__alt_mem_onchip_memory2_0+0xf7007b08>
    7db0:	00c15504 	movi	r3,1364
    7db4:	18800536 	bltu	r3,r2,7dcc <_malloc_r+0x7e8>
    7db8:	3804d4ba 	srli	r2,r7,18
    7dbc:	11401f44 	addi	r5,r2,125
    7dc0:	10c01f04 	addi	r3,r2,124
    7dc4:	294b883a 	add	r5,r5,r5
    7dc8:	003f4f06 	br	7b08 <__alt_mem_onchip_memory2_0+0xf7007b08>
    7dcc:	01403f84 	movi	r5,254
    7dd0:	00c01f84 	movi	r3,126
    7dd4:	003f4c06 	br	7b08 <__alt_mem_onchip_memory2_0+0xf7007b08>
    7dd8:	98800117 	ldw	r2,4(r19)
    7ddc:	003fa006 	br	7c60 <__alt_mem_onchip_memory2_0+0xf7007c60>
    7de0:	8808d0fa 	srli	r4,r17,3
    7de4:	20800044 	addi	r2,r4,1
    7de8:	1085883a 	add	r2,r2,r2
    7dec:	003e9006 	br	7830 <__alt_mem_onchip_memory2_0+0xf7007830>

00007df0 <memchr>:
    7df0:	208000cc 	andi	r2,r4,3
    7df4:	280f883a 	mov	r7,r5
    7df8:	10003426 	beq	r2,zero,7ecc <memchr+0xdc>
    7dfc:	30bfffc4 	addi	r2,r6,-1
    7e00:	30001a26 	beq	r6,zero,7e6c <memchr+0x7c>
    7e04:	20c00003 	ldbu	r3,0(r4)
    7e08:	29803fcc 	andi	r6,r5,255
    7e0c:	30c0051e 	bne	r6,r3,7e24 <memchr+0x34>
    7e10:	00001806 	br	7e74 <memchr+0x84>
    7e14:	10001526 	beq	r2,zero,7e6c <memchr+0x7c>
    7e18:	20c00003 	ldbu	r3,0(r4)
    7e1c:	10bfffc4 	addi	r2,r2,-1
    7e20:	30c01426 	beq	r6,r3,7e74 <memchr+0x84>
    7e24:	21000044 	addi	r4,r4,1
    7e28:	20c000cc 	andi	r3,r4,3
    7e2c:	183ff91e 	bne	r3,zero,7e14 <__alt_mem_onchip_memory2_0+0xf7007e14>
    7e30:	020000c4 	movi	r8,3
    7e34:	40801136 	bltu	r8,r2,7e7c <memchr+0x8c>
    7e38:	10000c26 	beq	r2,zero,7e6c <memchr+0x7c>
    7e3c:	20c00003 	ldbu	r3,0(r4)
    7e40:	29403fcc 	andi	r5,r5,255
    7e44:	28c00b26 	beq	r5,r3,7e74 <memchr+0x84>
    7e48:	20c00044 	addi	r3,r4,1
    7e4c:	39803fcc 	andi	r6,r7,255
    7e50:	2089883a 	add	r4,r4,r2
    7e54:	00000306 	br	7e64 <memchr+0x74>
    7e58:	18c00044 	addi	r3,r3,1
    7e5c:	197fffc3 	ldbu	r5,-1(r3)
    7e60:	31400526 	beq	r6,r5,7e78 <memchr+0x88>
    7e64:	1805883a 	mov	r2,r3
    7e68:	20fffb1e 	bne	r4,r3,7e58 <__alt_mem_onchip_memory2_0+0xf7007e58>
    7e6c:	0005883a 	mov	r2,zero
    7e70:	f800283a 	ret
    7e74:	2005883a 	mov	r2,r4
    7e78:	f800283a 	ret
    7e7c:	28c03fcc 	andi	r3,r5,255
    7e80:	1812923a 	slli	r9,r3,8
    7e84:	02ffbff4 	movhi	r11,65279
    7e88:	02a02074 	movhi	r10,32897
    7e8c:	48d2b03a 	or	r9,r9,r3
    7e90:	4806943a 	slli	r3,r9,16
    7e94:	5affbfc4 	addi	r11,r11,-257
    7e98:	52a02004 	addi	r10,r10,-32640
    7e9c:	48d2b03a 	or	r9,r9,r3
    7ea0:	20c00017 	ldw	r3,0(r4)
    7ea4:	48c6f03a 	xor	r3,r9,r3
    7ea8:	1acd883a 	add	r6,r3,r11
    7eac:	00c6303a 	nor	r3,zero,r3
    7eb0:	30c6703a 	and	r3,r6,r3
    7eb4:	1a86703a 	and	r3,r3,r10
    7eb8:	183fe01e 	bne	r3,zero,7e3c <__alt_mem_onchip_memory2_0+0xf7007e3c>
    7ebc:	10bfff04 	addi	r2,r2,-4
    7ec0:	21000104 	addi	r4,r4,4
    7ec4:	40bff636 	bltu	r8,r2,7ea0 <__alt_mem_onchip_memory2_0+0xf7007ea0>
    7ec8:	003fdb06 	br	7e38 <__alt_mem_onchip_memory2_0+0xf7007e38>
    7ecc:	3005883a 	mov	r2,r6
    7ed0:	003fd706 	br	7e30 <__alt_mem_onchip_memory2_0+0xf7007e30>

00007ed4 <memcpy>:
    7ed4:	defffd04 	addi	sp,sp,-12
    7ed8:	dfc00215 	stw	ra,8(sp)
    7edc:	dc400115 	stw	r17,4(sp)
    7ee0:	dc000015 	stw	r16,0(sp)
    7ee4:	00c003c4 	movi	r3,15
    7ee8:	2005883a 	mov	r2,r4
    7eec:	1980452e 	bgeu	r3,r6,8004 <memcpy+0x130>
    7ef0:	2906b03a 	or	r3,r5,r4
    7ef4:	18c000cc 	andi	r3,r3,3
    7ef8:	1800441e 	bne	r3,zero,800c <memcpy+0x138>
    7efc:	347ffc04 	addi	r17,r6,-16
    7f00:	8822d13a 	srli	r17,r17,4
    7f04:	28c00104 	addi	r3,r5,4
    7f08:	23400104 	addi	r13,r4,4
    7f0c:	8820913a 	slli	r16,r17,4
    7f10:	2b000204 	addi	r12,r5,8
    7f14:	22c00204 	addi	r11,r4,8
    7f18:	84000504 	addi	r16,r16,20
    7f1c:	2a800304 	addi	r10,r5,12
    7f20:	22400304 	addi	r9,r4,12
    7f24:	2c21883a 	add	r16,r5,r16
    7f28:	2811883a 	mov	r8,r5
    7f2c:	200f883a 	mov	r7,r4
    7f30:	41000017 	ldw	r4,0(r8)
    7f34:	1fc00017 	ldw	ra,0(r3)
    7f38:	63c00017 	ldw	r15,0(r12)
    7f3c:	39000015 	stw	r4,0(r7)
    7f40:	53800017 	ldw	r14,0(r10)
    7f44:	6fc00015 	stw	ra,0(r13)
    7f48:	5bc00015 	stw	r15,0(r11)
    7f4c:	4b800015 	stw	r14,0(r9)
    7f50:	18c00404 	addi	r3,r3,16
    7f54:	39c00404 	addi	r7,r7,16
    7f58:	42000404 	addi	r8,r8,16
    7f5c:	6b400404 	addi	r13,r13,16
    7f60:	63000404 	addi	r12,r12,16
    7f64:	5ac00404 	addi	r11,r11,16
    7f68:	52800404 	addi	r10,r10,16
    7f6c:	4a400404 	addi	r9,r9,16
    7f70:	1c3fef1e 	bne	r3,r16,7f30 <__alt_mem_onchip_memory2_0+0xf7007f30>
    7f74:	89c00044 	addi	r7,r17,1
    7f78:	380e913a 	slli	r7,r7,4
    7f7c:	310003cc 	andi	r4,r6,15
    7f80:	02c000c4 	movi	r11,3
    7f84:	11c7883a 	add	r3,r2,r7
    7f88:	29cb883a 	add	r5,r5,r7
    7f8c:	5900212e 	bgeu	r11,r4,8014 <memcpy+0x140>
    7f90:	1813883a 	mov	r9,r3
    7f94:	2811883a 	mov	r8,r5
    7f98:	200f883a 	mov	r7,r4
    7f9c:	42800017 	ldw	r10,0(r8)
    7fa0:	4a400104 	addi	r9,r9,4
    7fa4:	39ffff04 	addi	r7,r7,-4
    7fa8:	4abfff15 	stw	r10,-4(r9)
    7fac:	42000104 	addi	r8,r8,4
    7fb0:	59fffa36 	bltu	r11,r7,7f9c <__alt_mem_onchip_memory2_0+0xf7007f9c>
    7fb4:	213fff04 	addi	r4,r4,-4
    7fb8:	2008d0ba 	srli	r4,r4,2
    7fbc:	318000cc 	andi	r6,r6,3
    7fc0:	21000044 	addi	r4,r4,1
    7fc4:	2109883a 	add	r4,r4,r4
    7fc8:	2109883a 	add	r4,r4,r4
    7fcc:	1907883a 	add	r3,r3,r4
    7fd0:	290b883a 	add	r5,r5,r4
    7fd4:	30000626 	beq	r6,zero,7ff0 <memcpy+0x11c>
    7fd8:	198d883a 	add	r6,r3,r6
    7fdc:	29c00003 	ldbu	r7,0(r5)
    7fe0:	18c00044 	addi	r3,r3,1
    7fe4:	29400044 	addi	r5,r5,1
    7fe8:	19ffffc5 	stb	r7,-1(r3)
    7fec:	19bffb1e 	bne	r3,r6,7fdc <__alt_mem_onchip_memory2_0+0xf7007fdc>
    7ff0:	dfc00217 	ldw	ra,8(sp)
    7ff4:	dc400117 	ldw	r17,4(sp)
    7ff8:	dc000017 	ldw	r16,0(sp)
    7ffc:	dec00304 	addi	sp,sp,12
    8000:	f800283a 	ret
    8004:	2007883a 	mov	r3,r4
    8008:	003ff206 	br	7fd4 <__alt_mem_onchip_memory2_0+0xf7007fd4>
    800c:	2007883a 	mov	r3,r4
    8010:	003ff106 	br	7fd8 <__alt_mem_onchip_memory2_0+0xf7007fd8>
    8014:	200d883a 	mov	r6,r4
    8018:	003fee06 	br	7fd4 <__alt_mem_onchip_memory2_0+0xf7007fd4>

0000801c <memmove>:
    801c:	2005883a 	mov	r2,r4
    8020:	29000b2e 	bgeu	r5,r4,8050 <memmove+0x34>
    8024:	298f883a 	add	r7,r5,r6
    8028:	21c0092e 	bgeu	r4,r7,8050 <memmove+0x34>
    802c:	2187883a 	add	r3,r4,r6
    8030:	198bc83a 	sub	r5,r3,r6
    8034:	30004826 	beq	r6,zero,8158 <memmove+0x13c>
    8038:	39ffffc4 	addi	r7,r7,-1
    803c:	39000003 	ldbu	r4,0(r7)
    8040:	18ffffc4 	addi	r3,r3,-1
    8044:	19000005 	stb	r4,0(r3)
    8048:	28fffb1e 	bne	r5,r3,8038 <__alt_mem_onchip_memory2_0+0xf7008038>
    804c:	f800283a 	ret
    8050:	00c003c4 	movi	r3,15
    8054:	1980412e 	bgeu	r3,r6,815c <memmove+0x140>
    8058:	2886b03a 	or	r3,r5,r2
    805c:	18c000cc 	andi	r3,r3,3
    8060:	1800401e 	bne	r3,zero,8164 <memmove+0x148>
    8064:	33fffc04 	addi	r15,r6,-16
    8068:	781ed13a 	srli	r15,r15,4
    806c:	28c00104 	addi	r3,r5,4
    8070:	13400104 	addi	r13,r2,4
    8074:	781c913a 	slli	r14,r15,4
    8078:	2b000204 	addi	r12,r5,8
    807c:	12c00204 	addi	r11,r2,8
    8080:	73800504 	addi	r14,r14,20
    8084:	2a800304 	addi	r10,r5,12
    8088:	12400304 	addi	r9,r2,12
    808c:	2b9d883a 	add	r14,r5,r14
    8090:	2811883a 	mov	r8,r5
    8094:	100f883a 	mov	r7,r2
    8098:	41000017 	ldw	r4,0(r8)
    809c:	39c00404 	addi	r7,r7,16
    80a0:	18c00404 	addi	r3,r3,16
    80a4:	393ffc15 	stw	r4,-16(r7)
    80a8:	193ffc17 	ldw	r4,-16(r3)
    80ac:	6b400404 	addi	r13,r13,16
    80b0:	5ac00404 	addi	r11,r11,16
    80b4:	693ffc15 	stw	r4,-16(r13)
    80b8:	61000017 	ldw	r4,0(r12)
    80bc:	4a400404 	addi	r9,r9,16
    80c0:	42000404 	addi	r8,r8,16
    80c4:	593ffc15 	stw	r4,-16(r11)
    80c8:	51000017 	ldw	r4,0(r10)
    80cc:	63000404 	addi	r12,r12,16
    80d0:	52800404 	addi	r10,r10,16
    80d4:	493ffc15 	stw	r4,-16(r9)
    80d8:	1bbfef1e 	bne	r3,r14,8098 <__alt_mem_onchip_memory2_0+0xf7008098>
    80dc:	79000044 	addi	r4,r15,1
    80e0:	2008913a 	slli	r4,r4,4
    80e4:	328003cc 	andi	r10,r6,15
    80e8:	02c000c4 	movi	r11,3
    80ec:	1107883a 	add	r3,r2,r4
    80f0:	290b883a 	add	r5,r5,r4
    80f4:	5a801e2e 	bgeu	r11,r10,8170 <memmove+0x154>
    80f8:	1813883a 	mov	r9,r3
    80fc:	2811883a 	mov	r8,r5
    8100:	500f883a 	mov	r7,r10
    8104:	41000017 	ldw	r4,0(r8)
    8108:	4a400104 	addi	r9,r9,4
    810c:	39ffff04 	addi	r7,r7,-4
    8110:	493fff15 	stw	r4,-4(r9)
    8114:	42000104 	addi	r8,r8,4
    8118:	59fffa36 	bltu	r11,r7,8104 <__alt_mem_onchip_memory2_0+0xf7008104>
    811c:	513fff04 	addi	r4,r10,-4
    8120:	2008d0ba 	srli	r4,r4,2
    8124:	318000cc 	andi	r6,r6,3
    8128:	21000044 	addi	r4,r4,1
    812c:	2109883a 	add	r4,r4,r4
    8130:	2109883a 	add	r4,r4,r4
    8134:	1907883a 	add	r3,r3,r4
    8138:	290b883a 	add	r5,r5,r4
    813c:	30000b26 	beq	r6,zero,816c <memmove+0x150>
    8140:	198d883a 	add	r6,r3,r6
    8144:	29c00003 	ldbu	r7,0(r5)
    8148:	18c00044 	addi	r3,r3,1
    814c:	29400044 	addi	r5,r5,1
    8150:	19ffffc5 	stb	r7,-1(r3)
    8154:	19bffb1e 	bne	r3,r6,8144 <__alt_mem_onchip_memory2_0+0xf7008144>
    8158:	f800283a 	ret
    815c:	1007883a 	mov	r3,r2
    8160:	003ff606 	br	813c <__alt_mem_onchip_memory2_0+0xf700813c>
    8164:	1007883a 	mov	r3,r2
    8168:	003ff506 	br	8140 <__alt_mem_onchip_memory2_0+0xf7008140>
    816c:	f800283a 	ret
    8170:	500d883a 	mov	r6,r10
    8174:	003ff106 	br	813c <__alt_mem_onchip_memory2_0+0xf700813c>

00008178 <memset>:
    8178:	20c000cc 	andi	r3,r4,3
    817c:	2005883a 	mov	r2,r4
    8180:	18004426 	beq	r3,zero,8294 <memset+0x11c>
    8184:	31ffffc4 	addi	r7,r6,-1
    8188:	30004026 	beq	r6,zero,828c <memset+0x114>
    818c:	2813883a 	mov	r9,r5
    8190:	200d883a 	mov	r6,r4
    8194:	2007883a 	mov	r3,r4
    8198:	00000406 	br	81ac <memset+0x34>
    819c:	3a3fffc4 	addi	r8,r7,-1
    81a0:	31800044 	addi	r6,r6,1
    81a4:	38003926 	beq	r7,zero,828c <memset+0x114>
    81a8:	400f883a 	mov	r7,r8
    81ac:	18c00044 	addi	r3,r3,1
    81b0:	32400005 	stb	r9,0(r6)
    81b4:	1a0000cc 	andi	r8,r3,3
    81b8:	403ff81e 	bne	r8,zero,819c <__alt_mem_onchip_memory2_0+0xf700819c>
    81bc:	010000c4 	movi	r4,3
    81c0:	21c02d2e 	bgeu	r4,r7,8278 <memset+0x100>
    81c4:	29003fcc 	andi	r4,r5,255
    81c8:	200c923a 	slli	r6,r4,8
    81cc:	3108b03a 	or	r4,r6,r4
    81d0:	200c943a 	slli	r6,r4,16
    81d4:	218cb03a 	or	r6,r4,r6
    81d8:	010003c4 	movi	r4,15
    81dc:	21c0182e 	bgeu	r4,r7,8240 <memset+0xc8>
    81e0:	3b3ffc04 	addi	r12,r7,-16
    81e4:	6018d13a 	srli	r12,r12,4
    81e8:	1a000104 	addi	r8,r3,4
    81ec:	1ac00204 	addi	r11,r3,8
    81f0:	6008913a 	slli	r4,r12,4
    81f4:	1a800304 	addi	r10,r3,12
    81f8:	1813883a 	mov	r9,r3
    81fc:	21000504 	addi	r4,r4,20
    8200:	1909883a 	add	r4,r3,r4
    8204:	49800015 	stw	r6,0(r9)
    8208:	41800015 	stw	r6,0(r8)
    820c:	59800015 	stw	r6,0(r11)
    8210:	51800015 	stw	r6,0(r10)
    8214:	42000404 	addi	r8,r8,16
    8218:	4a400404 	addi	r9,r9,16
    821c:	5ac00404 	addi	r11,r11,16
    8220:	52800404 	addi	r10,r10,16
    8224:	413ff71e 	bne	r8,r4,8204 <__alt_mem_onchip_memory2_0+0xf7008204>
    8228:	63000044 	addi	r12,r12,1
    822c:	6018913a 	slli	r12,r12,4
    8230:	39c003cc 	andi	r7,r7,15
    8234:	010000c4 	movi	r4,3
    8238:	1b07883a 	add	r3,r3,r12
    823c:	21c00e2e 	bgeu	r4,r7,8278 <memset+0x100>
    8240:	1813883a 	mov	r9,r3
    8244:	3811883a 	mov	r8,r7
    8248:	010000c4 	movi	r4,3
    824c:	49800015 	stw	r6,0(r9)
    8250:	423fff04 	addi	r8,r8,-4
    8254:	4a400104 	addi	r9,r9,4
    8258:	223ffc36 	bltu	r4,r8,824c <__alt_mem_onchip_memory2_0+0xf700824c>
    825c:	393fff04 	addi	r4,r7,-4
    8260:	2008d0ba 	srli	r4,r4,2
    8264:	39c000cc 	andi	r7,r7,3
    8268:	21000044 	addi	r4,r4,1
    826c:	2109883a 	add	r4,r4,r4
    8270:	2109883a 	add	r4,r4,r4
    8274:	1907883a 	add	r3,r3,r4
    8278:	38000526 	beq	r7,zero,8290 <memset+0x118>
    827c:	19cf883a 	add	r7,r3,r7
    8280:	19400005 	stb	r5,0(r3)
    8284:	18c00044 	addi	r3,r3,1
    8288:	38fffd1e 	bne	r7,r3,8280 <__alt_mem_onchip_memory2_0+0xf7008280>
    828c:	f800283a 	ret
    8290:	f800283a 	ret
    8294:	2007883a 	mov	r3,r4
    8298:	300f883a 	mov	r7,r6
    829c:	003fc706 	br	81bc <__alt_mem_onchip_memory2_0+0xf70081bc>

000082a0 <_Balloc>:
    82a0:	20801317 	ldw	r2,76(r4)
    82a4:	defffc04 	addi	sp,sp,-16
    82a8:	dc400115 	stw	r17,4(sp)
    82ac:	dc000015 	stw	r16,0(sp)
    82b0:	dfc00315 	stw	ra,12(sp)
    82b4:	dc800215 	stw	r18,8(sp)
    82b8:	2023883a 	mov	r17,r4
    82bc:	2821883a 	mov	r16,r5
    82c0:	10000f26 	beq	r2,zero,8300 <_Balloc+0x60>
    82c4:	8407883a 	add	r3,r16,r16
    82c8:	18c7883a 	add	r3,r3,r3
    82cc:	10c7883a 	add	r3,r2,r3
    82d0:	18800017 	ldw	r2,0(r3)
    82d4:	10001126 	beq	r2,zero,831c <_Balloc+0x7c>
    82d8:	11000017 	ldw	r4,0(r2)
    82dc:	19000015 	stw	r4,0(r3)
    82e0:	10000415 	stw	zero,16(r2)
    82e4:	10000315 	stw	zero,12(r2)
    82e8:	dfc00317 	ldw	ra,12(sp)
    82ec:	dc800217 	ldw	r18,8(sp)
    82f0:	dc400117 	ldw	r17,4(sp)
    82f4:	dc000017 	ldw	r16,0(sp)
    82f8:	dec00404 	addi	sp,sp,16
    82fc:	f800283a 	ret
    8300:	01800844 	movi	r6,33
    8304:	01400104 	movi	r5,4
    8308:	000b3480 	call	b348 <_calloc_r>
    830c:	88801315 	stw	r2,76(r17)
    8310:	103fec1e 	bne	r2,zero,82c4 <__alt_mem_onchip_memory2_0+0xf70082c4>
    8314:	0005883a 	mov	r2,zero
    8318:	003ff306 	br	82e8 <__alt_mem_onchip_memory2_0+0xf70082e8>
    831c:	01400044 	movi	r5,1
    8320:	2c24983a 	sll	r18,r5,r16
    8324:	8809883a 	mov	r4,r17
    8328:	91800144 	addi	r6,r18,5
    832c:	318d883a 	add	r6,r6,r6
    8330:	318d883a 	add	r6,r6,r6
    8334:	000b3480 	call	b348 <_calloc_r>
    8338:	103ff626 	beq	r2,zero,8314 <__alt_mem_onchip_memory2_0+0xf7008314>
    833c:	14000115 	stw	r16,4(r2)
    8340:	14800215 	stw	r18,8(r2)
    8344:	003fe606 	br	82e0 <__alt_mem_onchip_memory2_0+0xf70082e0>

00008348 <_Bfree>:
    8348:	28000826 	beq	r5,zero,836c <_Bfree+0x24>
    834c:	28c00117 	ldw	r3,4(r5)
    8350:	20801317 	ldw	r2,76(r4)
    8354:	18c7883a 	add	r3,r3,r3
    8358:	18c7883a 	add	r3,r3,r3
    835c:	10c5883a 	add	r2,r2,r3
    8360:	10c00017 	ldw	r3,0(r2)
    8364:	28c00015 	stw	r3,0(r5)
    8368:	11400015 	stw	r5,0(r2)
    836c:	f800283a 	ret

00008370 <__multadd>:
    8370:	defff704 	addi	sp,sp,-36
    8374:	dc800215 	stw	r18,8(sp)
    8378:	2c800417 	ldw	r18,16(r5)
    837c:	dd800615 	stw	r22,24(sp)
    8380:	dd400515 	stw	r21,20(sp)
    8384:	dd000415 	stw	r20,16(sp)
    8388:	dcc00315 	stw	r19,12(sp)
    838c:	dc400115 	stw	r17,4(sp)
    8390:	dc000015 	stw	r16,0(sp)
    8394:	dfc00815 	stw	ra,32(sp)
    8398:	ddc00715 	stw	r23,28(sp)
    839c:	2827883a 	mov	r19,r5
    83a0:	2029883a 	mov	r20,r4
    83a4:	3023883a 	mov	r17,r6
    83a8:	3821883a 	mov	r16,r7
    83ac:	2d400504 	addi	r21,r5,20
    83b0:	002d883a 	mov	r22,zero
    83b4:	adc00017 	ldw	r23,0(r21)
    83b8:	880b883a 	mov	r5,r17
    83bc:	ad400104 	addi	r21,r21,4
    83c0:	b93fffcc 	andi	r4,r23,65535
    83c4:	000c9540 	call	c954 <__mulsi3>
    83c8:	b808d43a 	srli	r4,r23,16
    83cc:	880b883a 	mov	r5,r17
    83d0:	1421883a 	add	r16,r2,r16
    83d4:	000c9540 	call	c954 <__mulsi3>
    83d8:	800ed43a 	srli	r7,r16,16
    83dc:	80ffffcc 	andi	r3,r16,65535
    83e0:	b5800044 	addi	r22,r22,1
    83e4:	11c5883a 	add	r2,r2,r7
    83e8:	100e943a 	slli	r7,r2,16
    83ec:	1020d43a 	srli	r16,r2,16
    83f0:	38c7883a 	add	r3,r7,r3
    83f4:	a8ffff15 	stw	r3,-4(r21)
    83f8:	b4bfee16 	blt	r22,r18,83b4 <__alt_mem_onchip_memory2_0+0xf70083b4>
    83fc:	80000926 	beq	r16,zero,8424 <__multadd+0xb4>
    8400:	98800217 	ldw	r2,8(r19)
    8404:	9080130e 	bge	r18,r2,8454 <__multadd+0xe4>
    8408:	90800144 	addi	r2,r18,5
    840c:	1085883a 	add	r2,r2,r2
    8410:	1085883a 	add	r2,r2,r2
    8414:	9885883a 	add	r2,r19,r2
    8418:	14000015 	stw	r16,0(r2)
    841c:	94800044 	addi	r18,r18,1
    8420:	9c800415 	stw	r18,16(r19)
    8424:	9805883a 	mov	r2,r19
    8428:	dfc00817 	ldw	ra,32(sp)
    842c:	ddc00717 	ldw	r23,28(sp)
    8430:	dd800617 	ldw	r22,24(sp)
    8434:	dd400517 	ldw	r21,20(sp)
    8438:	dd000417 	ldw	r20,16(sp)
    843c:	dcc00317 	ldw	r19,12(sp)
    8440:	dc800217 	ldw	r18,8(sp)
    8444:	dc400117 	ldw	r17,4(sp)
    8448:	dc000017 	ldw	r16,0(sp)
    844c:	dec00904 	addi	sp,sp,36
    8450:	f800283a 	ret
    8454:	99400117 	ldw	r5,4(r19)
    8458:	a009883a 	mov	r4,r20
    845c:	29400044 	addi	r5,r5,1
    8460:	00082a00 	call	82a0 <_Balloc>
    8464:	99800417 	ldw	r6,16(r19)
    8468:	99400304 	addi	r5,r19,12
    846c:	11000304 	addi	r4,r2,12
    8470:	31800084 	addi	r6,r6,2
    8474:	318d883a 	add	r6,r6,r6
    8478:	318d883a 	add	r6,r6,r6
    847c:	1023883a 	mov	r17,r2
    8480:	0007ed40 	call	7ed4 <memcpy>
    8484:	98000a26 	beq	r19,zero,84b0 <__multadd+0x140>
    8488:	98c00117 	ldw	r3,4(r19)
    848c:	a0801317 	ldw	r2,76(r20)
    8490:	18c7883a 	add	r3,r3,r3
    8494:	18c7883a 	add	r3,r3,r3
    8498:	10c5883a 	add	r2,r2,r3
    849c:	10c00017 	ldw	r3,0(r2)
    84a0:	98c00015 	stw	r3,0(r19)
    84a4:	14c00015 	stw	r19,0(r2)
    84a8:	8827883a 	mov	r19,r17
    84ac:	003fd606 	br	8408 <__alt_mem_onchip_memory2_0+0xf7008408>
    84b0:	8827883a 	mov	r19,r17
    84b4:	003fd406 	br	8408 <__alt_mem_onchip_memory2_0+0xf7008408>

000084b8 <__s2b>:
    84b8:	defff904 	addi	sp,sp,-28
    84bc:	dc400115 	stw	r17,4(sp)
    84c0:	dc000015 	stw	r16,0(sp)
    84c4:	2023883a 	mov	r17,r4
    84c8:	2821883a 	mov	r16,r5
    84cc:	39000204 	addi	r4,r7,8
    84d0:	01400244 	movi	r5,9
    84d4:	dcc00315 	stw	r19,12(sp)
    84d8:	dc800215 	stw	r18,8(sp)
    84dc:	dfc00615 	stw	ra,24(sp)
    84e0:	dd400515 	stw	r21,20(sp)
    84e4:	dd000415 	stw	r20,16(sp)
    84e8:	3825883a 	mov	r18,r7
    84ec:	3027883a 	mov	r19,r6
    84f0:	000c7a00 	call	c7a0 <__divsi3>
    84f4:	00c00044 	movi	r3,1
    84f8:	000b883a 	mov	r5,zero
    84fc:	1880030e 	bge	r3,r2,850c <__s2b+0x54>
    8500:	18c7883a 	add	r3,r3,r3
    8504:	29400044 	addi	r5,r5,1
    8508:	18bffd16 	blt	r3,r2,8500 <__alt_mem_onchip_memory2_0+0xf7008500>
    850c:	8809883a 	mov	r4,r17
    8510:	00082a00 	call	82a0 <_Balloc>
    8514:	d8c00717 	ldw	r3,28(sp)
    8518:	10c00515 	stw	r3,20(r2)
    851c:	00c00044 	movi	r3,1
    8520:	10c00415 	stw	r3,16(r2)
    8524:	00c00244 	movi	r3,9
    8528:	1cc0210e 	bge	r3,r19,85b0 <__s2b+0xf8>
    852c:	80eb883a 	add	r21,r16,r3
    8530:	a829883a 	mov	r20,r21
    8534:	84e1883a 	add	r16,r16,r19
    8538:	a1c00007 	ldb	r7,0(r20)
    853c:	01800284 	movi	r6,10
    8540:	a5000044 	addi	r20,r20,1
    8544:	100b883a 	mov	r5,r2
    8548:	39fff404 	addi	r7,r7,-48
    854c:	8809883a 	mov	r4,r17
    8550:	00083700 	call	8370 <__multadd>
    8554:	a43ff81e 	bne	r20,r16,8538 <__alt_mem_onchip_memory2_0+0xf7008538>
    8558:	ace1883a 	add	r16,r21,r19
    855c:	843ffe04 	addi	r16,r16,-8
    8560:	9c800a0e 	bge	r19,r18,858c <__s2b+0xd4>
    8564:	94e5c83a 	sub	r18,r18,r19
    8568:	84a5883a 	add	r18,r16,r18
    856c:	81c00007 	ldb	r7,0(r16)
    8570:	01800284 	movi	r6,10
    8574:	84000044 	addi	r16,r16,1
    8578:	100b883a 	mov	r5,r2
    857c:	39fff404 	addi	r7,r7,-48
    8580:	8809883a 	mov	r4,r17
    8584:	00083700 	call	8370 <__multadd>
    8588:	84bff81e 	bne	r16,r18,856c <__alt_mem_onchip_memory2_0+0xf700856c>
    858c:	dfc00617 	ldw	ra,24(sp)
    8590:	dd400517 	ldw	r21,20(sp)
    8594:	dd000417 	ldw	r20,16(sp)
    8598:	dcc00317 	ldw	r19,12(sp)
    859c:	dc800217 	ldw	r18,8(sp)
    85a0:	dc400117 	ldw	r17,4(sp)
    85a4:	dc000017 	ldw	r16,0(sp)
    85a8:	dec00704 	addi	sp,sp,28
    85ac:	f800283a 	ret
    85b0:	84000284 	addi	r16,r16,10
    85b4:	1827883a 	mov	r19,r3
    85b8:	003fe906 	br	8560 <__alt_mem_onchip_memory2_0+0xf7008560>

000085bc <__hi0bits>:
    85bc:	20bfffec 	andhi	r2,r4,65535
    85c0:	1000141e 	bne	r2,zero,8614 <__hi0bits+0x58>
    85c4:	2008943a 	slli	r4,r4,16
    85c8:	00800404 	movi	r2,16
    85cc:	20ffc02c 	andhi	r3,r4,65280
    85d0:	1800021e 	bne	r3,zero,85dc <__hi0bits+0x20>
    85d4:	2008923a 	slli	r4,r4,8
    85d8:	10800204 	addi	r2,r2,8
    85dc:	20fc002c 	andhi	r3,r4,61440
    85e0:	1800021e 	bne	r3,zero,85ec <__hi0bits+0x30>
    85e4:	2008913a 	slli	r4,r4,4
    85e8:	10800104 	addi	r2,r2,4
    85ec:	20f0002c 	andhi	r3,r4,49152
    85f0:	1800031e 	bne	r3,zero,8600 <__hi0bits+0x44>
    85f4:	2109883a 	add	r4,r4,r4
    85f8:	10800084 	addi	r2,r2,2
    85fc:	2109883a 	add	r4,r4,r4
    8600:	20000316 	blt	r4,zero,8610 <__hi0bits+0x54>
    8604:	2110002c 	andhi	r4,r4,16384
    8608:	2000041e 	bne	r4,zero,861c <__hi0bits+0x60>
    860c:	00800804 	movi	r2,32
    8610:	f800283a 	ret
    8614:	0005883a 	mov	r2,zero
    8618:	003fec06 	br	85cc <__alt_mem_onchip_memory2_0+0xf70085cc>
    861c:	10800044 	addi	r2,r2,1
    8620:	f800283a 	ret

00008624 <__lo0bits>:
    8624:	20c00017 	ldw	r3,0(r4)
    8628:	188001cc 	andi	r2,r3,7
    862c:	10000826 	beq	r2,zero,8650 <__lo0bits+0x2c>
    8630:	1880004c 	andi	r2,r3,1
    8634:	1000211e 	bne	r2,zero,86bc <__lo0bits+0x98>
    8638:	1880008c 	andi	r2,r3,2
    863c:	1000211e 	bne	r2,zero,86c4 <__lo0bits+0xa0>
    8640:	1806d0ba 	srli	r3,r3,2
    8644:	00800084 	movi	r2,2
    8648:	20c00015 	stw	r3,0(r4)
    864c:	f800283a 	ret
    8650:	18bfffcc 	andi	r2,r3,65535
    8654:	10001326 	beq	r2,zero,86a4 <__lo0bits+0x80>
    8658:	0005883a 	mov	r2,zero
    865c:	19403fcc 	andi	r5,r3,255
    8660:	2800021e 	bne	r5,zero,866c <__lo0bits+0x48>
    8664:	1806d23a 	srli	r3,r3,8
    8668:	10800204 	addi	r2,r2,8
    866c:	194003cc 	andi	r5,r3,15
    8670:	2800021e 	bne	r5,zero,867c <__lo0bits+0x58>
    8674:	1806d13a 	srli	r3,r3,4
    8678:	10800104 	addi	r2,r2,4
    867c:	194000cc 	andi	r5,r3,3
    8680:	2800021e 	bne	r5,zero,868c <__lo0bits+0x68>
    8684:	1806d0ba 	srli	r3,r3,2
    8688:	10800084 	addi	r2,r2,2
    868c:	1940004c 	andi	r5,r3,1
    8690:	2800081e 	bne	r5,zero,86b4 <__lo0bits+0x90>
    8694:	1806d07a 	srli	r3,r3,1
    8698:	1800051e 	bne	r3,zero,86b0 <__lo0bits+0x8c>
    869c:	00800804 	movi	r2,32
    86a0:	f800283a 	ret
    86a4:	1806d43a 	srli	r3,r3,16
    86a8:	00800404 	movi	r2,16
    86ac:	003feb06 	br	865c <__alt_mem_onchip_memory2_0+0xf700865c>
    86b0:	10800044 	addi	r2,r2,1
    86b4:	20c00015 	stw	r3,0(r4)
    86b8:	f800283a 	ret
    86bc:	0005883a 	mov	r2,zero
    86c0:	f800283a 	ret
    86c4:	1806d07a 	srli	r3,r3,1
    86c8:	00800044 	movi	r2,1
    86cc:	20c00015 	stw	r3,0(r4)
    86d0:	f800283a 	ret

000086d4 <__i2b>:
    86d4:	defffd04 	addi	sp,sp,-12
    86d8:	dc000015 	stw	r16,0(sp)
    86dc:	04000044 	movi	r16,1
    86e0:	dc400115 	stw	r17,4(sp)
    86e4:	2823883a 	mov	r17,r5
    86e8:	800b883a 	mov	r5,r16
    86ec:	dfc00215 	stw	ra,8(sp)
    86f0:	00082a00 	call	82a0 <_Balloc>
    86f4:	14400515 	stw	r17,20(r2)
    86f8:	14000415 	stw	r16,16(r2)
    86fc:	dfc00217 	ldw	ra,8(sp)
    8700:	dc400117 	ldw	r17,4(sp)
    8704:	dc000017 	ldw	r16,0(sp)
    8708:	dec00304 	addi	sp,sp,12
    870c:	f800283a 	ret

00008710 <__multiply>:
    8710:	deffef04 	addi	sp,sp,-68
    8714:	dc400815 	stw	r17,32(sp)
    8718:	dc000715 	stw	r16,28(sp)
    871c:	34400417 	ldw	r17,16(r6)
    8720:	2c000417 	ldw	r16,16(r5)
    8724:	dd800d15 	stw	r22,52(sp)
    8728:	dc800915 	stw	r18,36(sp)
    872c:	dfc01015 	stw	ra,64(sp)
    8730:	df000f15 	stw	fp,60(sp)
    8734:	ddc00e15 	stw	r23,56(sp)
    8738:	dd400c15 	stw	r21,48(sp)
    873c:	dd000b15 	stw	r20,44(sp)
    8740:	dcc00a15 	stw	r19,40(sp)
    8744:	2825883a 	mov	r18,r5
    8748:	302d883a 	mov	r22,r6
    874c:	8440050e 	bge	r16,r17,8764 <__multiply+0x54>
    8750:	8007883a 	mov	r3,r16
    8754:	3025883a 	mov	r18,r6
    8758:	8821883a 	mov	r16,r17
    875c:	282d883a 	mov	r22,r5
    8760:	1823883a 	mov	r17,r3
    8764:	90800217 	ldw	r2,8(r18)
    8768:	8447883a 	add	r3,r16,r17
    876c:	d8c00215 	stw	r3,8(sp)
    8770:	91400117 	ldw	r5,4(r18)
    8774:	10c0010e 	bge	r2,r3,877c <__multiply+0x6c>
    8778:	29400044 	addi	r5,r5,1
    877c:	00082a00 	call	82a0 <_Balloc>
    8780:	d8c00217 	ldw	r3,8(sp)
    8784:	d8800615 	stw	r2,24(sp)
    8788:	18eb883a 	add	r21,r3,r3
    878c:	ad6b883a 	add	r21,r21,r21
    8790:	10c00504 	addi	r3,r2,20
    8794:	1d6b883a 	add	r21,r3,r21
    8798:	d8c00115 	stw	r3,4(sp)
    879c:	dd400315 	stw	r21,12(sp)
    87a0:	1805883a 	mov	r2,r3
    87a4:	1d40042e 	bgeu	r3,r21,87b8 <__multiply+0xa8>
    87a8:	d8c00317 	ldw	r3,12(sp)
    87ac:	10000015 	stw	zero,0(r2)
    87b0:	10800104 	addi	r2,r2,4
    87b4:	10fffc36 	bltu	r2,r3,87a8 <__alt_mem_onchip_memory2_0+0xf70087a8>
    87b8:	8c63883a 	add	r17,r17,r17
    87bc:	b5800504 	addi	r22,r22,20
    87c0:	8c63883a 	add	r17,r17,r17
    87c4:	94800504 	addi	r18,r18,20
    87c8:	8421883a 	add	r16,r16,r16
    87cc:	b463883a 	add	r17,r22,r17
    87d0:	8421883a 	add	r16,r16,r16
    87d4:	dd800015 	stw	r22,0(sp)
    87d8:	dc800415 	stw	r18,16(sp)
    87dc:	dc400515 	stw	r17,20(sp)
    87e0:	9429883a 	add	r20,r18,r16
    87e4:	b4404f2e 	bgeu	r22,r17,8924 <__multiply+0x214>
    87e8:	d8c00017 	ldw	r3,0(sp)
    87ec:	1c800017 	ldw	r18,0(r3)
    87f0:	947fffcc 	andi	r17,r18,65535
    87f4:	88001e26 	beq	r17,zero,8870 <__multiply+0x160>
    87f8:	dd800117 	ldw	r22,4(sp)
    87fc:	dd400417 	ldw	r21,16(sp)
    8800:	0027883a 	mov	r19,zero
    8804:	ac800017 	ldw	r18,0(r21)
    8808:	b4000017 	ldw	r16,0(r22)
    880c:	880b883a 	mov	r5,r17
    8810:	913fffcc 	andi	r4,r18,65535
    8814:	000c9540 	call	c954 <__mulsi3>
    8818:	9008d43a 	srli	r4,r18,16
    881c:	84bfffcc 	andi	r18,r16,65535
    8820:	1485883a 	add	r2,r2,r18
    8824:	14e5883a 	add	r18,r2,r19
    8828:	8020d43a 	srli	r16,r16,16
    882c:	9026d43a 	srli	r19,r18,16
    8830:	880b883a 	mov	r5,r17
    8834:	000c9540 	call	c954 <__mulsi3>
    8838:	1405883a 	add	r2,r2,r16
    883c:	14e1883a 	add	r16,r2,r19
    8840:	90ffffcc 	andi	r3,r18,65535
    8844:	8024943a 	slli	r18,r16,16
    8848:	ad400104 	addi	r21,r21,4
    884c:	b005883a 	mov	r2,r22
    8850:	90c6b03a 	or	r3,r18,r3
    8854:	b0c00015 	stw	r3,0(r22)
    8858:	8026d43a 	srli	r19,r16,16
    885c:	b5800104 	addi	r22,r22,4
    8860:	ad3fe836 	bltu	r21,r20,8804 <__alt_mem_onchip_memory2_0+0xf7008804>
    8864:	d8c00017 	ldw	r3,0(sp)
    8868:	14c00115 	stw	r19,4(r2)
    886c:	1c800017 	ldw	r18,0(r3)
    8870:	9024d43a 	srli	r18,r18,16
    8874:	90002226 	beq	r18,zero,8900 <__multiply+0x1f0>
    8878:	d8c00117 	ldw	r3,4(sp)
    887c:	dd800417 	ldw	r22,16(sp)
    8880:	002f883a 	mov	r23,zero
    8884:	1f000017 	ldw	fp,0(r3)
    8888:	1823883a 	mov	r17,r3
    888c:	182b883a 	mov	r21,r3
    8890:	e021883a 	mov	r16,fp
    8894:	00000106 	br	889c <__multiply+0x18c>
    8898:	982b883a 	mov	r21,r19
    889c:	b100000b 	ldhu	r4,0(r22)
    88a0:	8020d43a 	srli	r16,r16,16
    88a4:	900b883a 	mov	r5,r18
    88a8:	000c9540 	call	c954 <__mulsi3>
    88ac:	1405883a 	add	r2,r2,r16
    88b0:	15ef883a 	add	r23,r2,r23
    88b4:	b804943a 	slli	r2,r23,16
    88b8:	e0ffffcc 	andi	r3,fp,65535
    88bc:	8c400104 	addi	r17,r17,4
    88c0:	10c6b03a 	or	r3,r2,r3
    88c4:	88ffff15 	stw	r3,-4(r17)
    88c8:	b5800104 	addi	r22,r22,4
    88cc:	b13fff17 	ldw	r4,-4(r22)
    88d0:	acc00104 	addi	r19,r21,4
    88d4:	900b883a 	mov	r5,r18
    88d8:	2008d43a 	srli	r4,r4,16
    88dc:	9c000017 	ldw	r16,0(r19)
    88e0:	000c9540 	call	c954 <__mulsi3>
    88e4:	b806d43a 	srli	r3,r23,16
    88e8:	813fffcc 	andi	r4,r16,65535
    88ec:	1105883a 	add	r2,r2,r4
    88f0:	10f9883a 	add	fp,r2,r3
    88f4:	e02ed43a 	srli	r23,fp,16
    88f8:	b53fe736 	bltu	r22,r20,8898 <__alt_mem_onchip_memory2_0+0xf7008898>
    88fc:	af000115 	stw	fp,4(r21)
    8900:	d8c00017 	ldw	r3,0(sp)
    8904:	d9000517 	ldw	r4,20(sp)
    8908:	18c00104 	addi	r3,r3,4
    890c:	d8c00015 	stw	r3,0(sp)
    8910:	d8c00117 	ldw	r3,4(sp)
    8914:	18c00104 	addi	r3,r3,4
    8918:	d8c00115 	stw	r3,4(sp)
    891c:	d8c00017 	ldw	r3,0(sp)
    8920:	193fb136 	bltu	r3,r4,87e8 <__alt_mem_onchip_memory2_0+0xf70087e8>
    8924:	d8c00217 	ldw	r3,8(sp)
    8928:	00c00c0e 	bge	zero,r3,895c <__multiply+0x24c>
    892c:	d8c00317 	ldw	r3,12(sp)
    8930:	18bfff17 	ldw	r2,-4(r3)
    8934:	1d7fff04 	addi	r21,r3,-4
    8938:	10000326 	beq	r2,zero,8948 <__multiply+0x238>
    893c:	00000706 	br	895c <__multiply+0x24c>
    8940:	a8800017 	ldw	r2,0(r21)
    8944:	1000051e 	bne	r2,zero,895c <__multiply+0x24c>
    8948:	d8c00217 	ldw	r3,8(sp)
    894c:	ad7fff04 	addi	r21,r21,-4
    8950:	18ffffc4 	addi	r3,r3,-1
    8954:	d8c00215 	stw	r3,8(sp)
    8958:	183ff91e 	bne	r3,zero,8940 <__alt_mem_onchip_memory2_0+0xf7008940>
    895c:	d8c00617 	ldw	r3,24(sp)
    8960:	d9000217 	ldw	r4,8(sp)
    8964:	1805883a 	mov	r2,r3
    8968:	19000415 	stw	r4,16(r3)
    896c:	dfc01017 	ldw	ra,64(sp)
    8970:	df000f17 	ldw	fp,60(sp)
    8974:	ddc00e17 	ldw	r23,56(sp)
    8978:	dd800d17 	ldw	r22,52(sp)
    897c:	dd400c17 	ldw	r21,48(sp)
    8980:	dd000b17 	ldw	r20,44(sp)
    8984:	dcc00a17 	ldw	r19,40(sp)
    8988:	dc800917 	ldw	r18,36(sp)
    898c:	dc400817 	ldw	r17,32(sp)
    8990:	dc000717 	ldw	r16,28(sp)
    8994:	dec01104 	addi	sp,sp,68
    8998:	f800283a 	ret

0000899c <__pow5mult>:
    899c:	defffa04 	addi	sp,sp,-24
    89a0:	dcc00315 	stw	r19,12(sp)
    89a4:	dc000015 	stw	r16,0(sp)
    89a8:	dfc00515 	stw	ra,20(sp)
    89ac:	dd000415 	stw	r20,16(sp)
    89b0:	dc800215 	stw	r18,8(sp)
    89b4:	dc400115 	stw	r17,4(sp)
    89b8:	308000cc 	andi	r2,r6,3
    89bc:	3021883a 	mov	r16,r6
    89c0:	2027883a 	mov	r19,r4
    89c4:	10002f1e 	bne	r2,zero,8a84 <__pow5mult+0xe8>
    89c8:	2825883a 	mov	r18,r5
    89cc:	8021d0ba 	srai	r16,r16,2
    89d0:	80001a26 	beq	r16,zero,8a3c <__pow5mult+0xa0>
    89d4:	9c401217 	ldw	r17,72(r19)
    89d8:	8800061e 	bne	r17,zero,89f4 <__pow5mult+0x58>
    89dc:	00003406 	br	8ab0 <__pow5mult+0x114>
    89e0:	8021d07a 	srai	r16,r16,1
    89e4:	80001526 	beq	r16,zero,8a3c <__pow5mult+0xa0>
    89e8:	88800017 	ldw	r2,0(r17)
    89ec:	10001c26 	beq	r2,zero,8a60 <__pow5mult+0xc4>
    89f0:	1023883a 	mov	r17,r2
    89f4:	8080004c 	andi	r2,r16,1
    89f8:	103ff926 	beq	r2,zero,89e0 <__alt_mem_onchip_memory2_0+0xf70089e0>
    89fc:	880d883a 	mov	r6,r17
    8a00:	900b883a 	mov	r5,r18
    8a04:	9809883a 	mov	r4,r19
    8a08:	00087100 	call	8710 <__multiply>
    8a0c:	90001b26 	beq	r18,zero,8a7c <__pow5mult+0xe0>
    8a10:	91000117 	ldw	r4,4(r18)
    8a14:	98c01317 	ldw	r3,76(r19)
    8a18:	8021d07a 	srai	r16,r16,1
    8a1c:	2109883a 	add	r4,r4,r4
    8a20:	2109883a 	add	r4,r4,r4
    8a24:	1907883a 	add	r3,r3,r4
    8a28:	19000017 	ldw	r4,0(r3)
    8a2c:	91000015 	stw	r4,0(r18)
    8a30:	1c800015 	stw	r18,0(r3)
    8a34:	1025883a 	mov	r18,r2
    8a38:	803feb1e 	bne	r16,zero,89e8 <__alt_mem_onchip_memory2_0+0xf70089e8>
    8a3c:	9005883a 	mov	r2,r18
    8a40:	dfc00517 	ldw	ra,20(sp)
    8a44:	dd000417 	ldw	r20,16(sp)
    8a48:	dcc00317 	ldw	r19,12(sp)
    8a4c:	dc800217 	ldw	r18,8(sp)
    8a50:	dc400117 	ldw	r17,4(sp)
    8a54:	dc000017 	ldw	r16,0(sp)
    8a58:	dec00604 	addi	sp,sp,24
    8a5c:	f800283a 	ret
    8a60:	880d883a 	mov	r6,r17
    8a64:	880b883a 	mov	r5,r17
    8a68:	9809883a 	mov	r4,r19
    8a6c:	00087100 	call	8710 <__multiply>
    8a70:	88800015 	stw	r2,0(r17)
    8a74:	10000015 	stw	zero,0(r2)
    8a78:	003fdd06 	br	89f0 <__alt_mem_onchip_memory2_0+0xf70089f0>
    8a7c:	1025883a 	mov	r18,r2
    8a80:	003fd706 	br	89e0 <__alt_mem_onchip_memory2_0+0xf70089e0>
    8a84:	10bfffc4 	addi	r2,r2,-1
    8a88:	1085883a 	add	r2,r2,r2
    8a8c:	00c00074 	movhi	r3,1
    8a90:	18c89004 	addi	r3,r3,8768
    8a94:	1085883a 	add	r2,r2,r2
    8a98:	1885883a 	add	r2,r3,r2
    8a9c:	11800017 	ldw	r6,0(r2)
    8aa0:	000f883a 	mov	r7,zero
    8aa4:	00083700 	call	8370 <__multadd>
    8aa8:	1025883a 	mov	r18,r2
    8aac:	003fc706 	br	89cc <__alt_mem_onchip_memory2_0+0xf70089cc>
    8ab0:	05000044 	movi	r20,1
    8ab4:	a00b883a 	mov	r5,r20
    8ab8:	9809883a 	mov	r4,r19
    8abc:	00082a00 	call	82a0 <_Balloc>
    8ac0:	1023883a 	mov	r17,r2
    8ac4:	00809c44 	movi	r2,625
    8ac8:	88800515 	stw	r2,20(r17)
    8acc:	8d000415 	stw	r20,16(r17)
    8ad0:	9c401215 	stw	r17,72(r19)
    8ad4:	88000015 	stw	zero,0(r17)
    8ad8:	003fc606 	br	89f4 <__alt_mem_onchip_memory2_0+0xf70089f4>

00008adc <__lshift>:
    8adc:	defff904 	addi	sp,sp,-28
    8ae0:	dd400515 	stw	r21,20(sp)
    8ae4:	dcc00315 	stw	r19,12(sp)
    8ae8:	302bd17a 	srai	r21,r6,5
    8aec:	2cc00417 	ldw	r19,16(r5)
    8af0:	28800217 	ldw	r2,8(r5)
    8af4:	dd000415 	stw	r20,16(sp)
    8af8:	ace7883a 	add	r19,r21,r19
    8afc:	dc800215 	stw	r18,8(sp)
    8b00:	dc400115 	stw	r17,4(sp)
    8b04:	dc000015 	stw	r16,0(sp)
    8b08:	dfc00615 	stw	ra,24(sp)
    8b0c:	9c000044 	addi	r16,r19,1
    8b10:	2823883a 	mov	r17,r5
    8b14:	3029883a 	mov	r20,r6
    8b18:	2025883a 	mov	r18,r4
    8b1c:	29400117 	ldw	r5,4(r5)
    8b20:	1400030e 	bge	r2,r16,8b30 <__lshift+0x54>
    8b24:	1085883a 	add	r2,r2,r2
    8b28:	29400044 	addi	r5,r5,1
    8b2c:	143ffd16 	blt	r2,r16,8b24 <__alt_mem_onchip_memory2_0+0xf7008b24>
    8b30:	9009883a 	mov	r4,r18
    8b34:	00082a00 	call	82a0 <_Balloc>
    8b38:	10c00504 	addi	r3,r2,20
    8b3c:	0540070e 	bge	zero,r21,8b5c <__lshift+0x80>
    8b40:	ad6b883a 	add	r21,r21,r21
    8b44:	ad6b883a 	add	r21,r21,r21
    8b48:	1809883a 	mov	r4,r3
    8b4c:	1d47883a 	add	r3,r3,r21
    8b50:	20000015 	stw	zero,0(r4)
    8b54:	21000104 	addi	r4,r4,4
    8b58:	193ffd1e 	bne	r3,r4,8b50 <__alt_mem_onchip_memory2_0+0xf7008b50>
    8b5c:	8a000417 	ldw	r8,16(r17)
    8b60:	89000504 	addi	r4,r17,20
    8b64:	a18007cc 	andi	r6,r20,31
    8b68:	4211883a 	add	r8,r8,r8
    8b6c:	4211883a 	add	r8,r8,r8
    8b70:	2211883a 	add	r8,r4,r8
    8b74:	30002326 	beq	r6,zero,8c04 <__lshift+0x128>
    8b78:	02400804 	movi	r9,32
    8b7c:	4993c83a 	sub	r9,r9,r6
    8b80:	000b883a 	mov	r5,zero
    8b84:	21c00017 	ldw	r7,0(r4)
    8b88:	1815883a 	mov	r10,r3
    8b8c:	18c00104 	addi	r3,r3,4
    8b90:	398e983a 	sll	r7,r7,r6
    8b94:	21000104 	addi	r4,r4,4
    8b98:	394ab03a 	or	r5,r7,r5
    8b9c:	197fff15 	stw	r5,-4(r3)
    8ba0:	217fff17 	ldw	r5,-4(r4)
    8ba4:	2a4ad83a 	srl	r5,r5,r9
    8ba8:	223ff636 	bltu	r4,r8,8b84 <__alt_mem_onchip_memory2_0+0xf7008b84>
    8bac:	51400115 	stw	r5,4(r10)
    8bb0:	28001a1e 	bne	r5,zero,8c1c <__lshift+0x140>
    8bb4:	843fffc4 	addi	r16,r16,-1
    8bb8:	14000415 	stw	r16,16(r2)
    8bbc:	88000826 	beq	r17,zero,8be0 <__lshift+0x104>
    8bc0:	89000117 	ldw	r4,4(r17)
    8bc4:	90c01317 	ldw	r3,76(r18)
    8bc8:	2109883a 	add	r4,r4,r4
    8bcc:	2109883a 	add	r4,r4,r4
    8bd0:	1907883a 	add	r3,r3,r4
    8bd4:	19000017 	ldw	r4,0(r3)
    8bd8:	89000015 	stw	r4,0(r17)
    8bdc:	1c400015 	stw	r17,0(r3)
    8be0:	dfc00617 	ldw	ra,24(sp)
    8be4:	dd400517 	ldw	r21,20(sp)
    8be8:	dd000417 	ldw	r20,16(sp)
    8bec:	dcc00317 	ldw	r19,12(sp)
    8bf0:	dc800217 	ldw	r18,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00704 	addi	sp,sp,28
    8c00:	f800283a 	ret
    8c04:	21400017 	ldw	r5,0(r4)
    8c08:	18c00104 	addi	r3,r3,4
    8c0c:	21000104 	addi	r4,r4,4
    8c10:	197fff15 	stw	r5,-4(r3)
    8c14:	223ffb36 	bltu	r4,r8,8c04 <__alt_mem_onchip_memory2_0+0xf7008c04>
    8c18:	003fe606 	br	8bb4 <__alt_mem_onchip_memory2_0+0xf7008bb4>
    8c1c:	9c000084 	addi	r16,r19,2
    8c20:	003fe406 	br	8bb4 <__alt_mem_onchip_memory2_0+0xf7008bb4>

00008c24 <__mcmp>:
    8c24:	20800417 	ldw	r2,16(r4)
    8c28:	28c00417 	ldw	r3,16(r5)
    8c2c:	10c5c83a 	sub	r2,r2,r3
    8c30:	1000111e 	bne	r2,zero,8c78 <__mcmp+0x54>
    8c34:	18c7883a 	add	r3,r3,r3
    8c38:	18c7883a 	add	r3,r3,r3
    8c3c:	21000504 	addi	r4,r4,20
    8c40:	29400504 	addi	r5,r5,20
    8c44:	20c5883a 	add	r2,r4,r3
    8c48:	28cb883a 	add	r5,r5,r3
    8c4c:	00000106 	br	8c54 <__mcmp+0x30>
    8c50:	20800a2e 	bgeu	r4,r2,8c7c <__mcmp+0x58>
    8c54:	10bfff04 	addi	r2,r2,-4
    8c58:	297fff04 	addi	r5,r5,-4
    8c5c:	11800017 	ldw	r6,0(r2)
    8c60:	28c00017 	ldw	r3,0(r5)
    8c64:	30fffa26 	beq	r6,r3,8c50 <__alt_mem_onchip_memory2_0+0xf7008c50>
    8c68:	30c00236 	bltu	r6,r3,8c74 <__mcmp+0x50>
    8c6c:	00800044 	movi	r2,1
    8c70:	f800283a 	ret
    8c74:	00bfffc4 	movi	r2,-1
    8c78:	f800283a 	ret
    8c7c:	0005883a 	mov	r2,zero
    8c80:	f800283a 	ret

00008c84 <__mdiff>:
    8c84:	28c00417 	ldw	r3,16(r5)
    8c88:	30800417 	ldw	r2,16(r6)
    8c8c:	defffa04 	addi	sp,sp,-24
    8c90:	dcc00315 	stw	r19,12(sp)
    8c94:	dc800215 	stw	r18,8(sp)
    8c98:	dfc00515 	stw	ra,20(sp)
    8c9c:	dd000415 	stw	r20,16(sp)
    8ca0:	dc400115 	stw	r17,4(sp)
    8ca4:	dc000015 	stw	r16,0(sp)
    8ca8:	1887c83a 	sub	r3,r3,r2
    8cac:	2825883a 	mov	r18,r5
    8cb0:	3027883a 	mov	r19,r6
    8cb4:	1800141e 	bne	r3,zero,8d08 <__mdiff+0x84>
    8cb8:	1085883a 	add	r2,r2,r2
    8cbc:	1085883a 	add	r2,r2,r2
    8cc0:	2a000504 	addi	r8,r5,20
    8cc4:	34000504 	addi	r16,r6,20
    8cc8:	4087883a 	add	r3,r8,r2
    8ccc:	8085883a 	add	r2,r16,r2
    8cd0:	00000106 	br	8cd8 <__mdiff+0x54>
    8cd4:	40c0592e 	bgeu	r8,r3,8e3c <__mdiff+0x1b8>
    8cd8:	18ffff04 	addi	r3,r3,-4
    8cdc:	10bfff04 	addi	r2,r2,-4
    8ce0:	19c00017 	ldw	r7,0(r3)
    8ce4:	11400017 	ldw	r5,0(r2)
    8ce8:	397ffa26 	beq	r7,r5,8cd4 <__alt_mem_onchip_memory2_0+0xf7008cd4>
    8cec:	3940592e 	bgeu	r7,r5,8e54 <__mdiff+0x1d0>
    8cf0:	9005883a 	mov	r2,r18
    8cf4:	4023883a 	mov	r17,r8
    8cf8:	9825883a 	mov	r18,r19
    8cfc:	05000044 	movi	r20,1
    8d00:	1027883a 	mov	r19,r2
    8d04:	00000406 	br	8d18 <__mdiff+0x94>
    8d08:	18005616 	blt	r3,zero,8e64 <__mdiff+0x1e0>
    8d0c:	34400504 	addi	r17,r6,20
    8d10:	2c000504 	addi	r16,r5,20
    8d14:	0029883a 	mov	r20,zero
    8d18:	91400117 	ldw	r5,4(r18)
    8d1c:	00082a00 	call	82a0 <_Balloc>
    8d20:	92400417 	ldw	r9,16(r18)
    8d24:	9b000417 	ldw	r12,16(r19)
    8d28:	12c00504 	addi	r11,r2,20
    8d2c:	4a51883a 	add	r8,r9,r9
    8d30:	6319883a 	add	r12,r12,r12
    8d34:	4211883a 	add	r8,r8,r8
    8d38:	6319883a 	add	r12,r12,r12
    8d3c:	15000315 	stw	r20,12(r2)
    8d40:	8211883a 	add	r8,r16,r8
    8d44:	8b19883a 	add	r12,r17,r12
    8d48:	0007883a 	mov	r3,zero
    8d4c:	81400017 	ldw	r5,0(r16)
    8d50:	89c00017 	ldw	r7,0(r17)
    8d54:	59800104 	addi	r6,r11,4
    8d58:	293fffcc 	andi	r4,r5,65535
    8d5c:	20c7883a 	add	r3,r4,r3
    8d60:	393fffcc 	andi	r4,r7,65535
    8d64:	1909c83a 	sub	r4,r3,r4
    8d68:	280ad43a 	srli	r5,r5,16
    8d6c:	380ed43a 	srli	r7,r7,16
    8d70:	2007d43a 	srai	r3,r4,16
    8d74:	213fffcc 	andi	r4,r4,65535
    8d78:	29cbc83a 	sub	r5,r5,r7
    8d7c:	28c7883a 	add	r3,r5,r3
    8d80:	180a943a 	slli	r5,r3,16
    8d84:	8c400104 	addi	r17,r17,4
    8d88:	84000104 	addi	r16,r16,4
    8d8c:	2908b03a 	or	r4,r5,r4
    8d90:	59000015 	stw	r4,0(r11)
    8d94:	1807d43a 	srai	r3,r3,16
    8d98:	3015883a 	mov	r10,r6
    8d9c:	3017883a 	mov	r11,r6
    8da0:	8b3fea36 	bltu	r17,r12,8d4c <__alt_mem_onchip_memory2_0+0xf7008d4c>
    8da4:	8200162e 	bgeu	r16,r8,8e00 <__mdiff+0x17c>
    8da8:	8017883a 	mov	r11,r16
    8dac:	59400017 	ldw	r5,0(r11)
    8db0:	31800104 	addi	r6,r6,4
    8db4:	5ac00104 	addi	r11,r11,4
    8db8:	293fffcc 	andi	r4,r5,65535
    8dbc:	20c7883a 	add	r3,r4,r3
    8dc0:	280ed43a 	srli	r7,r5,16
    8dc4:	180bd43a 	srai	r5,r3,16
    8dc8:	193fffcc 	andi	r4,r3,65535
    8dcc:	3947883a 	add	r3,r7,r5
    8dd0:	180a943a 	slli	r5,r3,16
    8dd4:	1807d43a 	srai	r3,r3,16
    8dd8:	2908b03a 	or	r4,r5,r4
    8ddc:	313fff15 	stw	r4,-4(r6)
    8de0:	5a3ff236 	bltu	r11,r8,8dac <__alt_mem_onchip_memory2_0+0xf7008dac>
    8de4:	0406303a 	nor	r3,zero,r16
    8de8:	1a07883a 	add	r3,r3,r8
    8dec:	1806d0ba 	srli	r3,r3,2
    8df0:	18c00044 	addi	r3,r3,1
    8df4:	18c7883a 	add	r3,r3,r3
    8df8:	18c7883a 	add	r3,r3,r3
    8dfc:	50d5883a 	add	r10,r10,r3
    8e00:	50ffff04 	addi	r3,r10,-4
    8e04:	2000041e 	bne	r4,zero,8e18 <__mdiff+0x194>
    8e08:	18ffff04 	addi	r3,r3,-4
    8e0c:	19000017 	ldw	r4,0(r3)
    8e10:	4a7fffc4 	addi	r9,r9,-1
    8e14:	203ffc26 	beq	r4,zero,8e08 <__alt_mem_onchip_memory2_0+0xf7008e08>
    8e18:	12400415 	stw	r9,16(r2)
    8e1c:	dfc00517 	ldw	ra,20(sp)
    8e20:	dd000417 	ldw	r20,16(sp)
    8e24:	dcc00317 	ldw	r19,12(sp)
    8e28:	dc800217 	ldw	r18,8(sp)
    8e2c:	dc400117 	ldw	r17,4(sp)
    8e30:	dc000017 	ldw	r16,0(sp)
    8e34:	dec00604 	addi	sp,sp,24
    8e38:	f800283a 	ret
    8e3c:	000b883a 	mov	r5,zero
    8e40:	00082a00 	call	82a0 <_Balloc>
    8e44:	00c00044 	movi	r3,1
    8e48:	10c00415 	stw	r3,16(r2)
    8e4c:	10000515 	stw	zero,20(r2)
    8e50:	003ff206 	br	8e1c <__alt_mem_onchip_memory2_0+0xf7008e1c>
    8e54:	8023883a 	mov	r17,r16
    8e58:	0029883a 	mov	r20,zero
    8e5c:	4021883a 	mov	r16,r8
    8e60:	003fad06 	br	8d18 <__alt_mem_onchip_memory2_0+0xf7008d18>
    8e64:	9005883a 	mov	r2,r18
    8e68:	94400504 	addi	r17,r18,20
    8e6c:	9c000504 	addi	r16,r19,20
    8e70:	9825883a 	mov	r18,r19
    8e74:	05000044 	movi	r20,1
    8e78:	1027883a 	mov	r19,r2
    8e7c:	003fa606 	br	8d18 <__alt_mem_onchip_memory2_0+0xf7008d18>

00008e80 <__ulp>:
    8e80:	295ffc2c 	andhi	r5,r5,32752
    8e84:	00bf3034 	movhi	r2,64704
    8e88:	2887883a 	add	r3,r5,r2
    8e8c:	00c0020e 	bge	zero,r3,8e98 <__ulp+0x18>
    8e90:	0005883a 	mov	r2,zero
    8e94:	f800283a 	ret
    8e98:	00c7c83a 	sub	r3,zero,r3
    8e9c:	1807d53a 	srai	r3,r3,20
    8ea0:	008004c4 	movi	r2,19
    8ea4:	10c00b0e 	bge	r2,r3,8ed4 <__ulp+0x54>
    8ea8:	18bffb04 	addi	r2,r3,-20
    8eac:	01000784 	movi	r4,30
    8eb0:	0007883a 	mov	r3,zero
    8eb4:	20800516 	blt	r4,r2,8ecc <__ulp+0x4c>
    8eb8:	010007c4 	movi	r4,31
    8ebc:	2089c83a 	sub	r4,r4,r2
    8ec0:	00800044 	movi	r2,1
    8ec4:	1104983a 	sll	r2,r2,r4
    8ec8:	f800283a 	ret
    8ecc:	00800044 	movi	r2,1
    8ed0:	f800283a 	ret
    8ed4:	01400234 	movhi	r5,8
    8ed8:	28c7d83a 	sra	r3,r5,r3
    8edc:	0005883a 	mov	r2,zero
    8ee0:	f800283a 	ret

00008ee4 <__b2d>:
    8ee4:	defffa04 	addi	sp,sp,-24
    8ee8:	dc000015 	stw	r16,0(sp)
    8eec:	24000417 	ldw	r16,16(r4)
    8ef0:	dc400115 	stw	r17,4(sp)
    8ef4:	24400504 	addi	r17,r4,20
    8ef8:	8421883a 	add	r16,r16,r16
    8efc:	8421883a 	add	r16,r16,r16
    8f00:	8c21883a 	add	r16,r17,r16
    8f04:	dc800215 	stw	r18,8(sp)
    8f08:	84bfff17 	ldw	r18,-4(r16)
    8f0c:	dd000415 	stw	r20,16(sp)
    8f10:	dcc00315 	stw	r19,12(sp)
    8f14:	9009883a 	mov	r4,r18
    8f18:	2829883a 	mov	r20,r5
    8f1c:	dfc00515 	stw	ra,20(sp)
    8f20:	00085bc0 	call	85bc <__hi0bits>
    8f24:	00c00804 	movi	r3,32
    8f28:	1889c83a 	sub	r4,r3,r2
    8f2c:	a1000015 	stw	r4,0(r20)
    8f30:	01000284 	movi	r4,10
    8f34:	84ffff04 	addi	r19,r16,-4
    8f38:	20801216 	blt	r4,r2,8f84 <__b2d+0xa0>
    8f3c:	018002c4 	movi	r6,11
    8f40:	308dc83a 	sub	r6,r6,r2
    8f44:	9186d83a 	srl	r3,r18,r6
    8f48:	18cffc34 	orhi	r3,r3,16368
    8f4c:	8cc0212e 	bgeu	r17,r19,8fd4 <__b2d+0xf0>
    8f50:	813ffe17 	ldw	r4,-8(r16)
    8f54:	218cd83a 	srl	r6,r4,r6
    8f58:	10800544 	addi	r2,r2,21
    8f5c:	9084983a 	sll	r2,r18,r2
    8f60:	1184b03a 	or	r2,r2,r6
    8f64:	dfc00517 	ldw	ra,20(sp)
    8f68:	dd000417 	ldw	r20,16(sp)
    8f6c:	dcc00317 	ldw	r19,12(sp)
    8f70:	dc800217 	ldw	r18,8(sp)
    8f74:	dc400117 	ldw	r17,4(sp)
    8f78:	dc000017 	ldw	r16,0(sp)
    8f7c:	dec00604 	addi	sp,sp,24
    8f80:	f800283a 	ret
    8f84:	8cc00f2e 	bgeu	r17,r19,8fc4 <__b2d+0xe0>
    8f88:	117ffd44 	addi	r5,r2,-11
    8f8c:	80bffe17 	ldw	r2,-8(r16)
    8f90:	28000e26 	beq	r5,zero,8fcc <__b2d+0xe8>
    8f94:	1949c83a 	sub	r4,r3,r5
    8f98:	9164983a 	sll	r18,r18,r5
    8f9c:	1106d83a 	srl	r3,r2,r4
    8fa0:	81bffe04 	addi	r6,r16,-8
    8fa4:	948ffc34 	orhi	r18,r18,16368
    8fa8:	90c6b03a 	or	r3,r18,r3
    8fac:	89800e2e 	bgeu	r17,r6,8fe8 <__b2d+0x104>
    8fb0:	81bffd17 	ldw	r6,-12(r16)
    8fb4:	1144983a 	sll	r2,r2,r5
    8fb8:	310ad83a 	srl	r5,r6,r4
    8fbc:	2884b03a 	or	r2,r5,r2
    8fc0:	003fe806 	br	8f64 <__alt_mem_onchip_memory2_0+0xf7008f64>
    8fc4:	10bffd44 	addi	r2,r2,-11
    8fc8:	1000041e 	bne	r2,zero,8fdc <__b2d+0xf8>
    8fcc:	90cffc34 	orhi	r3,r18,16368
    8fd0:	003fe406 	br	8f64 <__alt_mem_onchip_memory2_0+0xf7008f64>
    8fd4:	000d883a 	mov	r6,zero
    8fd8:	003fdf06 	br	8f58 <__alt_mem_onchip_memory2_0+0xf7008f58>
    8fdc:	90a4983a 	sll	r18,r18,r2
    8fe0:	0005883a 	mov	r2,zero
    8fe4:	003ff906 	br	8fcc <__alt_mem_onchip_memory2_0+0xf7008fcc>
    8fe8:	1144983a 	sll	r2,r2,r5
    8fec:	003fdd06 	br	8f64 <__alt_mem_onchip_memory2_0+0xf7008f64>

00008ff0 <__d2b>:
    8ff0:	defff804 	addi	sp,sp,-32
    8ff4:	dc000215 	stw	r16,8(sp)
    8ff8:	3021883a 	mov	r16,r6
    8ffc:	dc400315 	stw	r17,12(sp)
    9000:	8022907a 	slli	r17,r16,1
    9004:	dd000615 	stw	r20,24(sp)
    9008:	2829883a 	mov	r20,r5
    900c:	01400044 	movi	r5,1
    9010:	dcc00515 	stw	r19,20(sp)
    9014:	dc800415 	stw	r18,16(sp)
    9018:	dfc00715 	stw	ra,28(sp)
    901c:	3825883a 	mov	r18,r7
    9020:	8822d57a 	srli	r17,r17,21
    9024:	00082a00 	call	82a0 <_Balloc>
    9028:	1027883a 	mov	r19,r2
    902c:	00800434 	movhi	r2,16
    9030:	10bfffc4 	addi	r2,r2,-1
    9034:	808c703a 	and	r6,r16,r2
    9038:	88000126 	beq	r17,zero,9040 <__d2b+0x50>
    903c:	31800434 	orhi	r6,r6,16
    9040:	d9800015 	stw	r6,0(sp)
    9044:	a0002426 	beq	r20,zero,90d8 <__d2b+0xe8>
    9048:	d9000104 	addi	r4,sp,4
    904c:	dd000115 	stw	r20,4(sp)
    9050:	00086240 	call	8624 <__lo0bits>
    9054:	d8c00017 	ldw	r3,0(sp)
    9058:	10002f1e 	bne	r2,zero,9118 <__d2b+0x128>
    905c:	d9000117 	ldw	r4,4(sp)
    9060:	99000515 	stw	r4,20(r19)
    9064:	1821003a 	cmpeq	r16,r3,zero
    9068:	01000084 	movi	r4,2
    906c:	2421c83a 	sub	r16,r4,r16
    9070:	98c00615 	stw	r3,24(r19)
    9074:	9c000415 	stw	r16,16(r19)
    9078:	88001f1e 	bne	r17,zero,90f8 <__d2b+0x108>
    907c:	10bef384 	addi	r2,r2,-1074
    9080:	90800015 	stw	r2,0(r18)
    9084:	00900034 	movhi	r2,16384
    9088:	10bfffc4 	addi	r2,r2,-1
    908c:	8085883a 	add	r2,r16,r2
    9090:	1085883a 	add	r2,r2,r2
    9094:	1085883a 	add	r2,r2,r2
    9098:	9885883a 	add	r2,r19,r2
    909c:	11000517 	ldw	r4,20(r2)
    90a0:	8020917a 	slli	r16,r16,5
    90a4:	00085bc0 	call	85bc <__hi0bits>
    90a8:	d8c00817 	ldw	r3,32(sp)
    90ac:	8085c83a 	sub	r2,r16,r2
    90b0:	18800015 	stw	r2,0(r3)
    90b4:	9805883a 	mov	r2,r19
    90b8:	dfc00717 	ldw	ra,28(sp)
    90bc:	dd000617 	ldw	r20,24(sp)
    90c0:	dcc00517 	ldw	r19,20(sp)
    90c4:	dc800417 	ldw	r18,16(sp)
    90c8:	dc400317 	ldw	r17,12(sp)
    90cc:	dc000217 	ldw	r16,8(sp)
    90d0:	dec00804 	addi	sp,sp,32
    90d4:	f800283a 	ret
    90d8:	d809883a 	mov	r4,sp
    90dc:	00086240 	call	8624 <__lo0bits>
    90e0:	d8c00017 	ldw	r3,0(sp)
    90e4:	04000044 	movi	r16,1
    90e8:	9c000415 	stw	r16,16(r19)
    90ec:	98c00515 	stw	r3,20(r19)
    90f0:	10800804 	addi	r2,r2,32
    90f4:	883fe126 	beq	r17,zero,907c <__alt_mem_onchip_memory2_0+0xf700907c>
    90f8:	00c00d44 	movi	r3,53
    90fc:	8c7ef344 	addi	r17,r17,-1075
    9100:	88a3883a 	add	r17,r17,r2
    9104:	1885c83a 	sub	r2,r3,r2
    9108:	d8c00817 	ldw	r3,32(sp)
    910c:	94400015 	stw	r17,0(r18)
    9110:	18800015 	stw	r2,0(r3)
    9114:	003fe706 	br	90b4 <__alt_mem_onchip_memory2_0+0xf70090b4>
    9118:	01000804 	movi	r4,32
    911c:	2089c83a 	sub	r4,r4,r2
    9120:	1908983a 	sll	r4,r3,r4
    9124:	d9400117 	ldw	r5,4(sp)
    9128:	1886d83a 	srl	r3,r3,r2
    912c:	2148b03a 	or	r4,r4,r5
    9130:	99000515 	stw	r4,20(r19)
    9134:	d8c00015 	stw	r3,0(sp)
    9138:	003fca06 	br	9064 <__alt_mem_onchip_memory2_0+0xf7009064>

0000913c <__ratio>:
    913c:	defff904 	addi	sp,sp,-28
    9140:	dc400315 	stw	r17,12(sp)
    9144:	2823883a 	mov	r17,r5
    9148:	d9400104 	addi	r5,sp,4
    914c:	dfc00615 	stw	ra,24(sp)
    9150:	dcc00515 	stw	r19,20(sp)
    9154:	dc800415 	stw	r18,16(sp)
    9158:	2027883a 	mov	r19,r4
    915c:	dc000215 	stw	r16,8(sp)
    9160:	0008ee40 	call	8ee4 <__b2d>
    9164:	d80b883a 	mov	r5,sp
    9168:	8809883a 	mov	r4,r17
    916c:	1025883a 	mov	r18,r2
    9170:	1821883a 	mov	r16,r3
    9174:	0008ee40 	call	8ee4 <__b2d>
    9178:	8a000417 	ldw	r8,16(r17)
    917c:	99000417 	ldw	r4,16(r19)
    9180:	d9400117 	ldw	r5,4(sp)
    9184:	2209c83a 	sub	r4,r4,r8
    9188:	2010917a 	slli	r8,r4,5
    918c:	d9000017 	ldw	r4,0(sp)
    9190:	2909c83a 	sub	r4,r5,r4
    9194:	4109883a 	add	r4,r8,r4
    9198:	01000e0e 	bge	zero,r4,91d4 <__ratio+0x98>
    919c:	2008953a 	slli	r4,r4,20
    91a0:	2421883a 	add	r16,r4,r16
    91a4:	100d883a 	mov	r6,r2
    91a8:	180f883a 	mov	r7,r3
    91ac:	9009883a 	mov	r4,r18
    91b0:	800b883a 	mov	r5,r16
    91b4:	000d2280 	call	d228 <__divdf3>
    91b8:	dfc00617 	ldw	ra,24(sp)
    91bc:	dcc00517 	ldw	r19,20(sp)
    91c0:	dc800417 	ldw	r18,16(sp)
    91c4:	dc400317 	ldw	r17,12(sp)
    91c8:	dc000217 	ldw	r16,8(sp)
    91cc:	dec00704 	addi	sp,sp,28
    91d0:	f800283a 	ret
    91d4:	2008953a 	slli	r4,r4,20
    91d8:	1907c83a 	sub	r3,r3,r4
    91dc:	003ff106 	br	91a4 <__alt_mem_onchip_memory2_0+0xf70091a4>

000091e0 <_mprec_log10>:
    91e0:	defffe04 	addi	sp,sp,-8
    91e4:	dc000015 	stw	r16,0(sp)
    91e8:	dfc00115 	stw	ra,4(sp)
    91ec:	008005c4 	movi	r2,23
    91f0:	2021883a 	mov	r16,r4
    91f4:	11000d0e 	bge	r2,r4,922c <_mprec_log10+0x4c>
    91f8:	0005883a 	mov	r2,zero
    91fc:	00cffc34 	movhi	r3,16368
    9200:	843fffc4 	addi	r16,r16,-1
    9204:	000d883a 	mov	r6,zero
    9208:	01d00934 	movhi	r7,16420
    920c:	1009883a 	mov	r4,r2
    9210:	180b883a 	mov	r5,r3
    9214:	000de500 	call	de50 <__muldf3>
    9218:	803ff91e 	bne	r16,zero,9200 <__alt_mem_onchip_memory2_0+0xf7009200>
    921c:	dfc00117 	ldw	ra,4(sp)
    9220:	dc000017 	ldw	r16,0(sp)
    9224:	dec00204 	addi	sp,sp,8
    9228:	f800283a 	ret
    922c:	202090fa 	slli	r16,r4,3
    9230:	00800074 	movhi	r2,1
    9234:	1088a704 	addi	r2,r2,8860
    9238:	1421883a 	add	r16,r2,r16
    923c:	80800017 	ldw	r2,0(r16)
    9240:	80c00117 	ldw	r3,4(r16)
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	dc000017 	ldw	r16,0(sp)
    924c:	dec00204 	addi	sp,sp,8
    9250:	f800283a 	ret

00009254 <__copybits>:
    9254:	297fffc4 	addi	r5,r5,-1
    9258:	280fd17a 	srai	r7,r5,5
    925c:	30c00417 	ldw	r3,16(r6)
    9260:	30800504 	addi	r2,r6,20
    9264:	39c00044 	addi	r7,r7,1
    9268:	18c7883a 	add	r3,r3,r3
    926c:	39cf883a 	add	r7,r7,r7
    9270:	18c7883a 	add	r3,r3,r3
    9274:	39cf883a 	add	r7,r7,r7
    9278:	10c7883a 	add	r3,r2,r3
    927c:	21cf883a 	add	r7,r4,r7
    9280:	10c00d2e 	bgeu	r2,r3,92b8 <__copybits+0x64>
    9284:	200b883a 	mov	r5,r4
    9288:	12000017 	ldw	r8,0(r2)
    928c:	29400104 	addi	r5,r5,4
    9290:	10800104 	addi	r2,r2,4
    9294:	2a3fff15 	stw	r8,-4(r5)
    9298:	10fffb36 	bltu	r2,r3,9288 <__alt_mem_onchip_memory2_0+0xf7009288>
    929c:	1985c83a 	sub	r2,r3,r6
    92a0:	10bffac4 	addi	r2,r2,-21
    92a4:	1004d0ba 	srli	r2,r2,2
    92a8:	10800044 	addi	r2,r2,1
    92ac:	1085883a 	add	r2,r2,r2
    92b0:	1085883a 	add	r2,r2,r2
    92b4:	2089883a 	add	r4,r4,r2
    92b8:	21c0032e 	bgeu	r4,r7,92c8 <__copybits+0x74>
    92bc:	20000015 	stw	zero,0(r4)
    92c0:	21000104 	addi	r4,r4,4
    92c4:	21fffd36 	bltu	r4,r7,92bc <__alt_mem_onchip_memory2_0+0xf70092bc>
    92c8:	f800283a 	ret

000092cc <__any_on>:
    92cc:	20c00417 	ldw	r3,16(r4)
    92d0:	2805d17a 	srai	r2,r5,5
    92d4:	21000504 	addi	r4,r4,20
    92d8:	18800d0e 	bge	r3,r2,9310 <__any_on+0x44>
    92dc:	18c7883a 	add	r3,r3,r3
    92e0:	18c7883a 	add	r3,r3,r3
    92e4:	20c7883a 	add	r3,r4,r3
    92e8:	20c0192e 	bgeu	r4,r3,9350 <__any_on+0x84>
    92ec:	18bfff17 	ldw	r2,-4(r3)
    92f0:	18ffff04 	addi	r3,r3,-4
    92f4:	1000041e 	bne	r2,zero,9308 <__any_on+0x3c>
    92f8:	20c0142e 	bgeu	r4,r3,934c <__any_on+0x80>
    92fc:	18ffff04 	addi	r3,r3,-4
    9300:	19400017 	ldw	r5,0(r3)
    9304:	283ffc26 	beq	r5,zero,92f8 <__alt_mem_onchip_memory2_0+0xf70092f8>
    9308:	00800044 	movi	r2,1
    930c:	f800283a 	ret
    9310:	10c00a0e 	bge	r2,r3,933c <__any_on+0x70>
    9314:	1085883a 	add	r2,r2,r2
    9318:	1085883a 	add	r2,r2,r2
    931c:	294007cc 	andi	r5,r5,31
    9320:	2087883a 	add	r3,r4,r2
    9324:	283ff026 	beq	r5,zero,92e8 <__alt_mem_onchip_memory2_0+0xf70092e8>
    9328:	19800017 	ldw	r6,0(r3)
    932c:	3144d83a 	srl	r2,r6,r5
    9330:	114a983a 	sll	r5,r2,r5
    9334:	317ff41e 	bne	r6,r5,9308 <__alt_mem_onchip_memory2_0+0xf7009308>
    9338:	003feb06 	br	92e8 <__alt_mem_onchip_memory2_0+0xf70092e8>
    933c:	1085883a 	add	r2,r2,r2
    9340:	1085883a 	add	r2,r2,r2
    9344:	2087883a 	add	r3,r4,r2
    9348:	003fe706 	br	92e8 <__alt_mem_onchip_memory2_0+0xf70092e8>
    934c:	f800283a 	ret
    9350:	0005883a 	mov	r2,zero
    9354:	f800283a 	ret

00009358 <_realloc_r>:
    9358:	defff604 	addi	sp,sp,-40
    935c:	dc800215 	stw	r18,8(sp)
    9360:	dfc00915 	stw	ra,36(sp)
    9364:	df000815 	stw	fp,32(sp)
    9368:	ddc00715 	stw	r23,28(sp)
    936c:	dd800615 	stw	r22,24(sp)
    9370:	dd400515 	stw	r21,20(sp)
    9374:	dd000415 	stw	r20,16(sp)
    9378:	dcc00315 	stw	r19,12(sp)
    937c:	dc400115 	stw	r17,4(sp)
    9380:	dc000015 	stw	r16,0(sp)
    9384:	3025883a 	mov	r18,r6
    9388:	2800b726 	beq	r5,zero,9668 <_realloc_r+0x310>
    938c:	282b883a 	mov	r21,r5
    9390:	2029883a 	mov	r20,r4
    9394:	000f7bc0 	call	f7bc <__malloc_lock>
    9398:	a8bfff17 	ldw	r2,-4(r21)
    939c:	043fff04 	movi	r16,-4
    93a0:	90c002c4 	addi	r3,r18,11
    93a4:	01000584 	movi	r4,22
    93a8:	acfffe04 	addi	r19,r21,-8
    93ac:	1420703a 	and	r16,r2,r16
    93b0:	20c0332e 	bgeu	r4,r3,9480 <_realloc_r+0x128>
    93b4:	047ffe04 	movi	r17,-8
    93b8:	1c62703a 	and	r17,r3,r17
    93bc:	8807883a 	mov	r3,r17
    93c0:	88005816 	blt	r17,zero,9524 <_realloc_r+0x1cc>
    93c4:	8c805736 	bltu	r17,r18,9524 <_realloc_r+0x1cc>
    93c8:	80c0300e 	bge	r16,r3,948c <_realloc_r+0x134>
    93cc:	07000074 	movhi	fp,1
    93d0:	e70a5504 	addi	fp,fp,10580
    93d4:	e1c00217 	ldw	r7,8(fp)
    93d8:	9c09883a 	add	r4,r19,r16
    93dc:	22000117 	ldw	r8,4(r4)
    93e0:	21c06326 	beq	r4,r7,9570 <_realloc_r+0x218>
    93e4:	017fff84 	movi	r5,-2
    93e8:	414a703a 	and	r5,r8,r5
    93ec:	214b883a 	add	r5,r4,r5
    93f0:	29800117 	ldw	r6,4(r5)
    93f4:	3180004c 	andi	r6,r6,1
    93f8:	30003f26 	beq	r6,zero,94f8 <_realloc_r+0x1a0>
    93fc:	1080004c 	andi	r2,r2,1
    9400:	10008326 	beq	r2,zero,9610 <_realloc_r+0x2b8>
    9404:	900b883a 	mov	r5,r18
    9408:	a009883a 	mov	r4,r20
    940c:	00075e40 	call	75e4 <_malloc_r>
    9410:	1025883a 	mov	r18,r2
    9414:	10011e26 	beq	r2,zero,9890 <_realloc_r+0x538>
    9418:	a93fff17 	ldw	r4,-4(r21)
    941c:	10fffe04 	addi	r3,r2,-8
    9420:	00bfff84 	movi	r2,-2
    9424:	2084703a 	and	r2,r4,r2
    9428:	9885883a 	add	r2,r19,r2
    942c:	1880ee26 	beq	r3,r2,97e8 <_realloc_r+0x490>
    9430:	81bfff04 	addi	r6,r16,-4
    9434:	00800904 	movi	r2,36
    9438:	1180b836 	bltu	r2,r6,971c <_realloc_r+0x3c4>
    943c:	00c004c4 	movi	r3,19
    9440:	19809636 	bltu	r3,r6,969c <_realloc_r+0x344>
    9444:	9005883a 	mov	r2,r18
    9448:	a807883a 	mov	r3,r21
    944c:	19000017 	ldw	r4,0(r3)
    9450:	11000015 	stw	r4,0(r2)
    9454:	19000117 	ldw	r4,4(r3)
    9458:	11000115 	stw	r4,4(r2)
    945c:	18c00217 	ldw	r3,8(r3)
    9460:	10c00215 	stw	r3,8(r2)
    9464:	a80b883a 	mov	r5,r21
    9468:	a009883a 	mov	r4,r20
    946c:	00069ec0 	call	69ec <_free_r>
    9470:	a009883a 	mov	r4,r20
    9474:	000f7e00 	call	f7e0 <__malloc_unlock>
    9478:	9005883a 	mov	r2,r18
    947c:	00001206 	br	94c8 <_realloc_r+0x170>
    9480:	00c00404 	movi	r3,16
    9484:	1823883a 	mov	r17,r3
    9488:	003fce06 	br	93c4 <__alt_mem_onchip_memory2_0+0xf70093c4>
    948c:	a825883a 	mov	r18,r21
    9490:	8445c83a 	sub	r2,r16,r17
    9494:	00c003c4 	movi	r3,15
    9498:	18802636 	bltu	r3,r2,9534 <_realloc_r+0x1dc>
    949c:	99800117 	ldw	r6,4(r19)
    94a0:	9c07883a 	add	r3,r19,r16
    94a4:	3180004c 	andi	r6,r6,1
    94a8:	3420b03a 	or	r16,r6,r16
    94ac:	9c000115 	stw	r16,4(r19)
    94b0:	18800117 	ldw	r2,4(r3)
    94b4:	10800054 	ori	r2,r2,1
    94b8:	18800115 	stw	r2,4(r3)
    94bc:	a009883a 	mov	r4,r20
    94c0:	000f7e00 	call	f7e0 <__malloc_unlock>
    94c4:	9005883a 	mov	r2,r18
    94c8:	dfc00917 	ldw	ra,36(sp)
    94cc:	df000817 	ldw	fp,32(sp)
    94d0:	ddc00717 	ldw	r23,28(sp)
    94d4:	dd800617 	ldw	r22,24(sp)
    94d8:	dd400517 	ldw	r21,20(sp)
    94dc:	dd000417 	ldw	r20,16(sp)
    94e0:	dcc00317 	ldw	r19,12(sp)
    94e4:	dc800217 	ldw	r18,8(sp)
    94e8:	dc400117 	ldw	r17,4(sp)
    94ec:	dc000017 	ldw	r16,0(sp)
    94f0:	dec00a04 	addi	sp,sp,40
    94f4:	f800283a 	ret
    94f8:	017fff04 	movi	r5,-4
    94fc:	414a703a 	and	r5,r8,r5
    9500:	814d883a 	add	r6,r16,r5
    9504:	30c01f16 	blt	r6,r3,9584 <_realloc_r+0x22c>
    9508:	20800317 	ldw	r2,12(r4)
    950c:	20c00217 	ldw	r3,8(r4)
    9510:	a825883a 	mov	r18,r21
    9514:	3021883a 	mov	r16,r6
    9518:	18800315 	stw	r2,12(r3)
    951c:	10c00215 	stw	r3,8(r2)
    9520:	003fdb06 	br	9490 <__alt_mem_onchip_memory2_0+0xf7009490>
    9524:	00800304 	movi	r2,12
    9528:	a0800015 	stw	r2,0(r20)
    952c:	0005883a 	mov	r2,zero
    9530:	003fe506 	br	94c8 <__alt_mem_onchip_memory2_0+0xf70094c8>
    9534:	98c00117 	ldw	r3,4(r19)
    9538:	9c4b883a 	add	r5,r19,r17
    953c:	11000054 	ori	r4,r2,1
    9540:	18c0004c 	andi	r3,r3,1
    9544:	1c62b03a 	or	r17,r3,r17
    9548:	9c400115 	stw	r17,4(r19)
    954c:	29000115 	stw	r4,4(r5)
    9550:	2885883a 	add	r2,r5,r2
    9554:	10c00117 	ldw	r3,4(r2)
    9558:	29400204 	addi	r5,r5,8
    955c:	a009883a 	mov	r4,r20
    9560:	18c00054 	ori	r3,r3,1
    9564:	10c00115 	stw	r3,4(r2)
    9568:	00069ec0 	call	69ec <_free_r>
    956c:	003fd306 	br	94bc <__alt_mem_onchip_memory2_0+0xf70094bc>
    9570:	017fff04 	movi	r5,-4
    9574:	414a703a 	and	r5,r8,r5
    9578:	89800404 	addi	r6,r17,16
    957c:	8151883a 	add	r8,r16,r5
    9580:	4180590e 	bge	r8,r6,96e8 <_realloc_r+0x390>
    9584:	1080004c 	andi	r2,r2,1
    9588:	103f9e1e 	bne	r2,zero,9404 <__alt_mem_onchip_memory2_0+0xf7009404>
    958c:	adbffe17 	ldw	r22,-8(r21)
    9590:	00bfff04 	movi	r2,-4
    9594:	9dadc83a 	sub	r22,r19,r22
    9598:	b1800117 	ldw	r6,4(r22)
    959c:	3084703a 	and	r2,r6,r2
    95a0:	20002026 	beq	r4,zero,9624 <_realloc_r+0x2cc>
    95a4:	80af883a 	add	r23,r16,r2
    95a8:	b96f883a 	add	r23,r23,r5
    95ac:	21c05f26 	beq	r4,r7,972c <_realloc_r+0x3d4>
    95b0:	b8c01c16 	blt	r23,r3,9624 <_realloc_r+0x2cc>
    95b4:	20800317 	ldw	r2,12(r4)
    95b8:	20c00217 	ldw	r3,8(r4)
    95bc:	81bfff04 	addi	r6,r16,-4
    95c0:	01000904 	movi	r4,36
    95c4:	18800315 	stw	r2,12(r3)
    95c8:	10c00215 	stw	r3,8(r2)
    95cc:	b0c00217 	ldw	r3,8(r22)
    95d0:	b0800317 	ldw	r2,12(r22)
    95d4:	b4800204 	addi	r18,r22,8
    95d8:	18800315 	stw	r2,12(r3)
    95dc:	10c00215 	stw	r3,8(r2)
    95e0:	21801b36 	bltu	r4,r6,9650 <_realloc_r+0x2f8>
    95e4:	008004c4 	movi	r2,19
    95e8:	1180352e 	bgeu	r2,r6,96c0 <_realloc_r+0x368>
    95ec:	a8800017 	ldw	r2,0(r21)
    95f0:	b0800215 	stw	r2,8(r22)
    95f4:	a8800117 	ldw	r2,4(r21)
    95f8:	b0800315 	stw	r2,12(r22)
    95fc:	008006c4 	movi	r2,27
    9600:	11807f36 	bltu	r2,r6,9800 <_realloc_r+0x4a8>
    9604:	b0800404 	addi	r2,r22,16
    9608:	ad400204 	addi	r21,r21,8
    960c:	00002d06 	br	96c4 <_realloc_r+0x36c>
    9610:	adbffe17 	ldw	r22,-8(r21)
    9614:	00bfff04 	movi	r2,-4
    9618:	9dadc83a 	sub	r22,r19,r22
    961c:	b1000117 	ldw	r4,4(r22)
    9620:	2084703a 	and	r2,r4,r2
    9624:	b03f7726 	beq	r22,zero,9404 <__alt_mem_onchip_memory2_0+0xf7009404>
    9628:	80af883a 	add	r23,r16,r2
    962c:	b8ff7516 	blt	r23,r3,9404 <__alt_mem_onchip_memory2_0+0xf7009404>
    9630:	b0800317 	ldw	r2,12(r22)
    9634:	b0c00217 	ldw	r3,8(r22)
    9638:	81bfff04 	addi	r6,r16,-4
    963c:	01000904 	movi	r4,36
    9640:	18800315 	stw	r2,12(r3)
    9644:	10c00215 	stw	r3,8(r2)
    9648:	b4800204 	addi	r18,r22,8
    964c:	21bfe52e 	bgeu	r4,r6,95e4 <__alt_mem_onchip_memory2_0+0xf70095e4>
    9650:	a80b883a 	mov	r5,r21
    9654:	9009883a 	mov	r4,r18
    9658:	000801c0 	call	801c <memmove>
    965c:	b821883a 	mov	r16,r23
    9660:	b027883a 	mov	r19,r22
    9664:	003f8a06 	br	9490 <__alt_mem_onchip_memory2_0+0xf7009490>
    9668:	300b883a 	mov	r5,r6
    966c:	dfc00917 	ldw	ra,36(sp)
    9670:	df000817 	ldw	fp,32(sp)
    9674:	ddc00717 	ldw	r23,28(sp)
    9678:	dd800617 	ldw	r22,24(sp)
    967c:	dd400517 	ldw	r21,20(sp)
    9680:	dd000417 	ldw	r20,16(sp)
    9684:	dcc00317 	ldw	r19,12(sp)
    9688:	dc800217 	ldw	r18,8(sp)
    968c:	dc400117 	ldw	r17,4(sp)
    9690:	dc000017 	ldw	r16,0(sp)
    9694:	dec00a04 	addi	sp,sp,40
    9698:	00075e41 	jmpi	75e4 <_malloc_r>
    969c:	a8c00017 	ldw	r3,0(r21)
    96a0:	90c00015 	stw	r3,0(r18)
    96a4:	a8c00117 	ldw	r3,4(r21)
    96a8:	90c00115 	stw	r3,4(r18)
    96ac:	00c006c4 	movi	r3,27
    96b0:	19804536 	bltu	r3,r6,97c8 <_realloc_r+0x470>
    96b4:	90800204 	addi	r2,r18,8
    96b8:	a8c00204 	addi	r3,r21,8
    96bc:	003f6306 	br	944c <__alt_mem_onchip_memory2_0+0xf700944c>
    96c0:	9005883a 	mov	r2,r18
    96c4:	a8c00017 	ldw	r3,0(r21)
    96c8:	b821883a 	mov	r16,r23
    96cc:	b027883a 	mov	r19,r22
    96d0:	10c00015 	stw	r3,0(r2)
    96d4:	a8c00117 	ldw	r3,4(r21)
    96d8:	10c00115 	stw	r3,4(r2)
    96dc:	a8c00217 	ldw	r3,8(r21)
    96e0:	10c00215 	stw	r3,8(r2)
    96e4:	003f6a06 	br	9490 <__alt_mem_onchip_memory2_0+0xf7009490>
    96e8:	9c67883a 	add	r19,r19,r17
    96ec:	4445c83a 	sub	r2,r8,r17
    96f0:	e4c00215 	stw	r19,8(fp)
    96f4:	10800054 	ori	r2,r2,1
    96f8:	98800115 	stw	r2,4(r19)
    96fc:	a8bfff17 	ldw	r2,-4(r21)
    9700:	a009883a 	mov	r4,r20
    9704:	1080004c 	andi	r2,r2,1
    9708:	1462b03a 	or	r17,r2,r17
    970c:	ac7fff15 	stw	r17,-4(r21)
    9710:	000f7e00 	call	f7e0 <__malloc_unlock>
    9714:	a805883a 	mov	r2,r21
    9718:	003f6b06 	br	94c8 <__alt_mem_onchip_memory2_0+0xf70094c8>
    971c:	a80b883a 	mov	r5,r21
    9720:	9009883a 	mov	r4,r18
    9724:	000801c0 	call	801c <memmove>
    9728:	003f4e06 	br	9464 <__alt_mem_onchip_memory2_0+0xf7009464>
    972c:	89000404 	addi	r4,r17,16
    9730:	b93fbc16 	blt	r23,r4,9624 <__alt_mem_onchip_memory2_0+0xf7009624>
    9734:	b0800317 	ldw	r2,12(r22)
    9738:	b0c00217 	ldw	r3,8(r22)
    973c:	81bfff04 	addi	r6,r16,-4
    9740:	01000904 	movi	r4,36
    9744:	18800315 	stw	r2,12(r3)
    9748:	10c00215 	stw	r3,8(r2)
    974c:	b4800204 	addi	r18,r22,8
    9750:	21804336 	bltu	r4,r6,9860 <_realloc_r+0x508>
    9754:	008004c4 	movi	r2,19
    9758:	11803f2e 	bgeu	r2,r6,9858 <_realloc_r+0x500>
    975c:	a8800017 	ldw	r2,0(r21)
    9760:	b0800215 	stw	r2,8(r22)
    9764:	a8800117 	ldw	r2,4(r21)
    9768:	b0800315 	stw	r2,12(r22)
    976c:	008006c4 	movi	r2,27
    9770:	11803f36 	bltu	r2,r6,9870 <_realloc_r+0x518>
    9774:	b0800404 	addi	r2,r22,16
    9778:	ad400204 	addi	r21,r21,8
    977c:	a8c00017 	ldw	r3,0(r21)
    9780:	10c00015 	stw	r3,0(r2)
    9784:	a8c00117 	ldw	r3,4(r21)
    9788:	10c00115 	stw	r3,4(r2)
    978c:	a8c00217 	ldw	r3,8(r21)
    9790:	10c00215 	stw	r3,8(r2)
    9794:	b447883a 	add	r3,r22,r17
    9798:	bc45c83a 	sub	r2,r23,r17
    979c:	e0c00215 	stw	r3,8(fp)
    97a0:	10800054 	ori	r2,r2,1
    97a4:	18800115 	stw	r2,4(r3)
    97a8:	b0800117 	ldw	r2,4(r22)
    97ac:	a009883a 	mov	r4,r20
    97b0:	1080004c 	andi	r2,r2,1
    97b4:	1462b03a 	or	r17,r2,r17
    97b8:	b4400115 	stw	r17,4(r22)
    97bc:	000f7e00 	call	f7e0 <__malloc_unlock>
    97c0:	9005883a 	mov	r2,r18
    97c4:	003f4006 	br	94c8 <__alt_mem_onchip_memory2_0+0xf70094c8>
    97c8:	a8c00217 	ldw	r3,8(r21)
    97cc:	90c00215 	stw	r3,8(r18)
    97d0:	a8c00317 	ldw	r3,12(r21)
    97d4:	90c00315 	stw	r3,12(r18)
    97d8:	30801126 	beq	r6,r2,9820 <_realloc_r+0x4c8>
    97dc:	90800404 	addi	r2,r18,16
    97e0:	a8c00404 	addi	r3,r21,16
    97e4:	003f1906 	br	944c <__alt_mem_onchip_memory2_0+0xf700944c>
    97e8:	90ffff17 	ldw	r3,-4(r18)
    97ec:	00bfff04 	movi	r2,-4
    97f0:	a825883a 	mov	r18,r21
    97f4:	1884703a 	and	r2,r3,r2
    97f8:	80a1883a 	add	r16,r16,r2
    97fc:	003f2406 	br	9490 <__alt_mem_onchip_memory2_0+0xf7009490>
    9800:	a8800217 	ldw	r2,8(r21)
    9804:	b0800415 	stw	r2,16(r22)
    9808:	a8800317 	ldw	r2,12(r21)
    980c:	b0800515 	stw	r2,20(r22)
    9810:	31000a26 	beq	r6,r4,983c <_realloc_r+0x4e4>
    9814:	b0800604 	addi	r2,r22,24
    9818:	ad400404 	addi	r21,r21,16
    981c:	003fa906 	br	96c4 <__alt_mem_onchip_memory2_0+0xf70096c4>
    9820:	a9000417 	ldw	r4,16(r21)
    9824:	90800604 	addi	r2,r18,24
    9828:	a8c00604 	addi	r3,r21,24
    982c:	91000415 	stw	r4,16(r18)
    9830:	a9000517 	ldw	r4,20(r21)
    9834:	91000515 	stw	r4,20(r18)
    9838:	003f0406 	br	944c <__alt_mem_onchip_memory2_0+0xf700944c>
    983c:	a8c00417 	ldw	r3,16(r21)
    9840:	ad400604 	addi	r21,r21,24
    9844:	b0800804 	addi	r2,r22,32
    9848:	b0c00615 	stw	r3,24(r22)
    984c:	a8ffff17 	ldw	r3,-4(r21)
    9850:	b0c00715 	stw	r3,28(r22)
    9854:	003f9b06 	br	96c4 <__alt_mem_onchip_memory2_0+0xf70096c4>
    9858:	9005883a 	mov	r2,r18
    985c:	003fc706 	br	977c <__alt_mem_onchip_memory2_0+0xf700977c>
    9860:	a80b883a 	mov	r5,r21
    9864:	9009883a 	mov	r4,r18
    9868:	000801c0 	call	801c <memmove>
    986c:	003fc906 	br	9794 <__alt_mem_onchip_memory2_0+0xf7009794>
    9870:	a8800217 	ldw	r2,8(r21)
    9874:	b0800415 	stw	r2,16(r22)
    9878:	a8800317 	ldw	r2,12(r21)
    987c:	b0800515 	stw	r2,20(r22)
    9880:	31000726 	beq	r6,r4,98a0 <_realloc_r+0x548>
    9884:	b0800604 	addi	r2,r22,24
    9888:	ad400404 	addi	r21,r21,16
    988c:	003fbb06 	br	977c <__alt_mem_onchip_memory2_0+0xf700977c>
    9890:	a009883a 	mov	r4,r20
    9894:	000f7e00 	call	f7e0 <__malloc_unlock>
    9898:	0005883a 	mov	r2,zero
    989c:	003f0a06 	br	94c8 <__alt_mem_onchip_memory2_0+0xf70094c8>
    98a0:	a8c00417 	ldw	r3,16(r21)
    98a4:	ad400604 	addi	r21,r21,24
    98a8:	b0800804 	addi	r2,r22,32
    98ac:	b0c00615 	stw	r3,24(r22)
    98b0:	a8ffff17 	ldw	r3,-4(r21)
    98b4:	b0c00715 	stw	r3,28(r22)
    98b8:	003fb006 	br	977c <__alt_mem_onchip_memory2_0+0xf700977c>

000098bc <__fpclassifyd>:
    98bc:	00a00034 	movhi	r2,32768
    98c0:	10bfffc4 	addi	r2,r2,-1
    98c4:	2884703a 	and	r2,r5,r2
    98c8:	10000726 	beq	r2,zero,98e8 <__fpclassifyd+0x2c>
    98cc:	00fffc34 	movhi	r3,65520
    98d0:	019ff834 	movhi	r6,32736
    98d4:	28c7883a 	add	r3,r5,r3
    98d8:	31bfffc4 	addi	r6,r6,-1
    98dc:	30c00536 	bltu	r6,r3,98f4 <__fpclassifyd+0x38>
    98e0:	00800104 	movi	r2,4
    98e4:	f800283a 	ret
    98e8:	2000021e 	bne	r4,zero,98f4 <__fpclassifyd+0x38>
    98ec:	00800084 	movi	r2,2
    98f0:	f800283a 	ret
    98f4:	00dffc34 	movhi	r3,32752
    98f8:	019ff834 	movhi	r6,32736
    98fc:	28cb883a 	add	r5,r5,r3
    9900:	31bfffc4 	addi	r6,r6,-1
    9904:	317ff62e 	bgeu	r6,r5,98e0 <__alt_mem_onchip_memory2_0+0xf70098e0>
    9908:	01400434 	movhi	r5,16
    990c:	297fffc4 	addi	r5,r5,-1
    9910:	28800236 	bltu	r5,r2,991c <__fpclassifyd+0x60>
    9914:	008000c4 	movi	r2,3
    9918:	f800283a 	ret
    991c:	10c00226 	beq	r2,r3,9928 <__fpclassifyd+0x6c>
    9920:	0005883a 	mov	r2,zero
    9924:	f800283a 	ret
    9928:	2005003a 	cmpeq	r2,r4,zero
    992c:	f800283a 	ret

00009930 <_sbrk_r>:
    9930:	defffd04 	addi	sp,sp,-12
    9934:	dc000015 	stw	r16,0(sp)
    9938:	04000074 	movhi	r16,1
    993c:	dc400115 	stw	r17,4(sp)
    9940:	8416ab04 	addi	r16,r16,23212
    9944:	2023883a 	mov	r17,r4
    9948:	2809883a 	mov	r4,r5
    994c:	dfc00215 	stw	ra,8(sp)
    9950:	80000015 	stw	zero,0(r16)
    9954:	000f9c80 	call	f9c8 <sbrk>
    9958:	00ffffc4 	movi	r3,-1
    995c:	10c00526 	beq	r2,r3,9974 <_sbrk_r+0x44>
    9960:	dfc00217 	ldw	ra,8(sp)
    9964:	dc400117 	ldw	r17,4(sp)
    9968:	dc000017 	ldw	r16,0(sp)
    996c:	dec00304 	addi	sp,sp,12
    9970:	f800283a 	ret
    9974:	80c00017 	ldw	r3,0(r16)
    9978:	183ff926 	beq	r3,zero,9960 <__alt_mem_onchip_memory2_0+0xf7009960>
    997c:	88c00015 	stw	r3,0(r17)
    9980:	003ff706 	br	9960 <__alt_mem_onchip_memory2_0+0xf7009960>

00009984 <__sread>:
    9984:	defffe04 	addi	sp,sp,-8
    9988:	dc000015 	stw	r16,0(sp)
    998c:	2821883a 	mov	r16,r5
    9990:	2940038f 	ldh	r5,14(r5)
    9994:	dfc00115 	stw	ra,4(sp)
    9998:	000b8400 	call	b840 <_read_r>
    999c:	10000716 	blt	r2,zero,99bc <__sread+0x38>
    99a0:	80c01417 	ldw	r3,80(r16)
    99a4:	1887883a 	add	r3,r3,r2
    99a8:	80c01415 	stw	r3,80(r16)
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	dc000017 	ldw	r16,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret
    99bc:	80c0030b 	ldhu	r3,12(r16)
    99c0:	18fbffcc 	andi	r3,r3,61439
    99c4:	80c0030d 	sth	r3,12(r16)
    99c8:	dfc00117 	ldw	ra,4(sp)
    99cc:	dc000017 	ldw	r16,0(sp)
    99d0:	dec00204 	addi	sp,sp,8
    99d4:	f800283a 	ret

000099d8 <__seofread>:
    99d8:	0005883a 	mov	r2,zero
    99dc:	f800283a 	ret

000099e0 <__swrite>:
    99e0:	2880030b 	ldhu	r2,12(r5)
    99e4:	defffb04 	addi	sp,sp,-20
    99e8:	dcc00315 	stw	r19,12(sp)
    99ec:	dc800215 	stw	r18,8(sp)
    99f0:	dc400115 	stw	r17,4(sp)
    99f4:	dc000015 	stw	r16,0(sp)
    99f8:	dfc00415 	stw	ra,16(sp)
    99fc:	10c0400c 	andi	r3,r2,256
    9a00:	2821883a 	mov	r16,r5
    9a04:	2023883a 	mov	r17,r4
    9a08:	3025883a 	mov	r18,r6
    9a0c:	3827883a 	mov	r19,r7
    9a10:	18000526 	beq	r3,zero,9a28 <__swrite+0x48>
    9a14:	2940038f 	ldh	r5,14(r5)
    9a18:	01c00084 	movi	r7,2
    9a1c:	000d883a 	mov	r6,zero
    9a20:	000b7e00 	call	b7e0 <_lseek_r>
    9a24:	8080030b 	ldhu	r2,12(r16)
    9a28:	8140038f 	ldh	r5,14(r16)
    9a2c:	10bbffcc 	andi	r2,r2,61439
    9a30:	980f883a 	mov	r7,r19
    9a34:	900d883a 	mov	r6,r18
    9a38:	8809883a 	mov	r4,r17
    9a3c:	8080030d 	sth	r2,12(r16)
    9a40:	dfc00417 	ldw	ra,16(sp)
    9a44:	dcc00317 	ldw	r19,12(sp)
    9a48:	dc800217 	ldw	r18,8(sp)
    9a4c:	dc400117 	ldw	r17,4(sp)
    9a50:	dc000017 	ldw	r16,0(sp)
    9a54:	dec00504 	addi	sp,sp,20
    9a58:	000b2941 	jmpi	b294 <_write_r>

00009a5c <__sseek>:
    9a5c:	defffe04 	addi	sp,sp,-8
    9a60:	dc000015 	stw	r16,0(sp)
    9a64:	2821883a 	mov	r16,r5
    9a68:	2940038f 	ldh	r5,14(r5)
    9a6c:	dfc00115 	stw	ra,4(sp)
    9a70:	000b7e00 	call	b7e0 <_lseek_r>
    9a74:	00ffffc4 	movi	r3,-1
    9a78:	10c00826 	beq	r2,r3,9a9c <__sseek+0x40>
    9a7c:	80c0030b 	ldhu	r3,12(r16)
    9a80:	80801415 	stw	r2,80(r16)
    9a84:	18c40014 	ori	r3,r3,4096
    9a88:	80c0030d 	sth	r3,12(r16)
    9a8c:	dfc00117 	ldw	ra,4(sp)
    9a90:	dc000017 	ldw	r16,0(sp)
    9a94:	dec00204 	addi	sp,sp,8
    9a98:	f800283a 	ret
    9a9c:	80c0030b 	ldhu	r3,12(r16)
    9aa0:	18fbffcc 	andi	r3,r3,61439
    9aa4:	80c0030d 	sth	r3,12(r16)
    9aa8:	dfc00117 	ldw	ra,4(sp)
    9aac:	dc000017 	ldw	r16,0(sp)
    9ab0:	dec00204 	addi	sp,sp,8
    9ab4:	f800283a 	ret

00009ab8 <__sclose>:
    9ab8:	2940038f 	ldh	r5,14(r5)
    9abc:	000b2f41 	jmpi	b2f4 <_close_r>

00009ac0 <strcmp>:
    9ac0:	2144b03a 	or	r2,r4,r5
    9ac4:	108000cc 	andi	r2,r2,3
    9ac8:	1000171e 	bne	r2,zero,9b28 <strcmp+0x68>
    9acc:	20800017 	ldw	r2,0(r4)
    9ad0:	28c00017 	ldw	r3,0(r5)
    9ad4:	10c0141e 	bne	r2,r3,9b28 <strcmp+0x68>
    9ad8:	027fbff4 	movhi	r9,65279
    9adc:	4a7fbfc4 	addi	r9,r9,-257
    9ae0:	0086303a 	nor	r3,zero,r2
    9ae4:	02202074 	movhi	r8,32897
    9ae8:	1245883a 	add	r2,r2,r9
    9aec:	42202004 	addi	r8,r8,-32640
    9af0:	10c4703a 	and	r2,r2,r3
    9af4:	1204703a 	and	r2,r2,r8
    9af8:	10000226 	beq	r2,zero,9b04 <strcmp+0x44>
    9afc:	00002306 	br	9b8c <strcmp+0xcc>
    9b00:	1000221e 	bne	r2,zero,9b8c <strcmp+0xcc>
    9b04:	21000104 	addi	r4,r4,4
    9b08:	20c00017 	ldw	r3,0(r4)
    9b0c:	29400104 	addi	r5,r5,4
    9b10:	29800017 	ldw	r6,0(r5)
    9b14:	1a4f883a 	add	r7,r3,r9
    9b18:	00c4303a 	nor	r2,zero,r3
    9b1c:	3884703a 	and	r2,r7,r2
    9b20:	1204703a 	and	r2,r2,r8
    9b24:	19bff626 	beq	r3,r6,9b00 <__alt_mem_onchip_memory2_0+0xf7009b00>
    9b28:	20800003 	ldbu	r2,0(r4)
    9b2c:	10c03fcc 	andi	r3,r2,255
    9b30:	18c0201c 	xori	r3,r3,128
    9b34:	18ffe004 	addi	r3,r3,-128
    9b38:	18000c26 	beq	r3,zero,9b6c <strcmp+0xac>
    9b3c:	29800007 	ldb	r6,0(r5)
    9b40:	19800326 	beq	r3,r6,9b50 <strcmp+0x90>
    9b44:	00001306 	br	9b94 <strcmp+0xd4>
    9b48:	29800007 	ldb	r6,0(r5)
    9b4c:	11800b1e 	bne	r2,r6,9b7c <strcmp+0xbc>
    9b50:	21000044 	addi	r4,r4,1
    9b54:	20c00003 	ldbu	r3,0(r4)
    9b58:	29400044 	addi	r5,r5,1
    9b5c:	18803fcc 	andi	r2,r3,255
    9b60:	1080201c 	xori	r2,r2,128
    9b64:	10bfe004 	addi	r2,r2,-128
    9b68:	103ff71e 	bne	r2,zero,9b48 <__alt_mem_onchip_memory2_0+0xf7009b48>
    9b6c:	0007883a 	mov	r3,zero
    9b70:	28800003 	ldbu	r2,0(r5)
    9b74:	1885c83a 	sub	r2,r3,r2
    9b78:	f800283a 	ret
    9b7c:	28800003 	ldbu	r2,0(r5)
    9b80:	18c03fcc 	andi	r3,r3,255
    9b84:	1885c83a 	sub	r2,r3,r2
    9b88:	f800283a 	ret
    9b8c:	0005883a 	mov	r2,zero
    9b90:	f800283a 	ret
    9b94:	10c03fcc 	andi	r3,r2,255
    9b98:	003ff506 	br	9b70 <__alt_mem_onchip_memory2_0+0xf7009b70>

00009b9c <__sprint_r.part.0>:
    9b9c:	28801917 	ldw	r2,100(r5)
    9ba0:	defff604 	addi	sp,sp,-40
    9ba4:	dd400515 	stw	r21,20(sp)
    9ba8:	dfc00915 	stw	ra,36(sp)
    9bac:	df000815 	stw	fp,32(sp)
    9bb0:	ddc00715 	stw	r23,28(sp)
    9bb4:	dd800615 	stw	r22,24(sp)
    9bb8:	dd000415 	stw	r20,16(sp)
    9bbc:	dcc00315 	stw	r19,12(sp)
    9bc0:	dc800215 	stw	r18,8(sp)
    9bc4:	dc400115 	stw	r17,4(sp)
    9bc8:	dc000015 	stw	r16,0(sp)
    9bcc:	1088000c 	andi	r2,r2,8192
    9bd0:	302b883a 	mov	r21,r6
    9bd4:	10002e26 	beq	r2,zero,9c90 <__sprint_r.part.0+0xf4>
    9bd8:	30800217 	ldw	r2,8(r6)
    9bdc:	35800017 	ldw	r22,0(r6)
    9be0:	10002926 	beq	r2,zero,9c88 <__sprint_r.part.0+0xec>
    9be4:	2827883a 	mov	r19,r5
    9be8:	2029883a 	mov	r20,r4
    9bec:	b5c00104 	addi	r23,r22,4
    9bf0:	04bfffc4 	movi	r18,-1
    9bf4:	bc400017 	ldw	r17,0(r23)
    9bf8:	b4000017 	ldw	r16,0(r22)
    9bfc:	0039883a 	mov	fp,zero
    9c00:	8822d0ba 	srli	r17,r17,2
    9c04:	8800031e 	bne	r17,zero,9c14 <__sprint_r.part.0+0x78>
    9c08:	00001806 	br	9c6c <__sprint_r.part.0+0xd0>
    9c0c:	84000104 	addi	r16,r16,4
    9c10:	8f001526 	beq	r17,fp,9c68 <__sprint_r.part.0+0xcc>
    9c14:	81400017 	ldw	r5,0(r16)
    9c18:	980d883a 	mov	r6,r19
    9c1c:	a009883a 	mov	r4,r20
    9c20:	000b68c0 	call	b68c <_fputwc_r>
    9c24:	e7000044 	addi	fp,fp,1
    9c28:	14bff81e 	bne	r2,r18,9c0c <__alt_mem_onchip_memory2_0+0xf7009c0c>
    9c2c:	9005883a 	mov	r2,r18
    9c30:	a8000215 	stw	zero,8(r21)
    9c34:	a8000115 	stw	zero,4(r21)
    9c38:	dfc00917 	ldw	ra,36(sp)
    9c3c:	df000817 	ldw	fp,32(sp)
    9c40:	ddc00717 	ldw	r23,28(sp)
    9c44:	dd800617 	ldw	r22,24(sp)
    9c48:	dd400517 	ldw	r21,20(sp)
    9c4c:	dd000417 	ldw	r20,16(sp)
    9c50:	dcc00317 	ldw	r19,12(sp)
    9c54:	dc800217 	ldw	r18,8(sp)
    9c58:	dc400117 	ldw	r17,4(sp)
    9c5c:	dc000017 	ldw	r16,0(sp)
    9c60:	dec00a04 	addi	sp,sp,40
    9c64:	f800283a 	ret
    9c68:	a8800217 	ldw	r2,8(r21)
    9c6c:	8c63883a 	add	r17,r17,r17
    9c70:	8c63883a 	add	r17,r17,r17
    9c74:	1445c83a 	sub	r2,r2,r17
    9c78:	a8800215 	stw	r2,8(r21)
    9c7c:	b5800204 	addi	r22,r22,8
    9c80:	bdc00204 	addi	r23,r23,8
    9c84:	103fdb1e 	bne	r2,zero,9bf4 <__alt_mem_onchip_memory2_0+0xf7009bf4>
    9c88:	0005883a 	mov	r2,zero
    9c8c:	003fe806 	br	9c30 <__alt_mem_onchip_memory2_0+0xf7009c30>
    9c90:	0006cfc0 	call	6cfc <__sfvwrite_r>
    9c94:	003fe606 	br	9c30 <__alt_mem_onchip_memory2_0+0xf7009c30>

00009c98 <__sprint_r>:
    9c98:	30c00217 	ldw	r3,8(r6)
    9c9c:	18000126 	beq	r3,zero,9ca4 <__sprint_r+0xc>
    9ca0:	0009b9c1 	jmpi	9b9c <__sprint_r.part.0>
    9ca4:	30000115 	stw	zero,4(r6)
    9ca8:	0005883a 	mov	r2,zero
    9cac:	f800283a 	ret

00009cb0 <___vfiprintf_internal_r>:
    9cb0:	deffca04 	addi	sp,sp,-216
    9cb4:	dd403115 	stw	r21,196(sp)
    9cb8:	dfc03515 	stw	ra,212(sp)
    9cbc:	df003415 	stw	fp,208(sp)
    9cc0:	ddc03315 	stw	r23,204(sp)
    9cc4:	dd803215 	stw	r22,200(sp)
    9cc8:	dd003015 	stw	r20,192(sp)
    9ccc:	dcc02f15 	stw	r19,188(sp)
    9cd0:	dc802e15 	stw	r18,184(sp)
    9cd4:	dc402d15 	stw	r17,180(sp)
    9cd8:	dc002c15 	stw	r16,176(sp)
    9cdc:	d9002115 	stw	r4,132(sp)
    9ce0:	d9402015 	stw	r5,128(sp)
    9ce4:	d9c02215 	stw	r7,136(sp)
    9ce8:	302b883a 	mov	r21,r6
    9cec:	20000226 	beq	r4,zero,9cf8 <___vfiprintf_internal_r+0x48>
    9cf0:	20800e17 	ldw	r2,56(r4)
    9cf4:	1000cf26 	beq	r2,zero,a034 <___vfiprintf_internal_r+0x384>
    9cf8:	d8c02017 	ldw	r3,128(sp)
    9cfc:	1880030b 	ldhu	r2,12(r3)
    9d00:	10c8000c 	andi	r3,r2,8192
    9d04:	1800071e 	bne	r3,zero,9d24 <___vfiprintf_internal_r+0x74>
    9d08:	d9402017 	ldw	r5,128(sp)
    9d0c:	00f7ffc4 	movi	r3,-8193
    9d10:	10880014 	ori	r2,r2,8192
    9d14:	29001917 	ldw	r4,100(r5)
    9d18:	2880030d 	sth	r2,12(r5)
    9d1c:	20c6703a 	and	r3,r4,r3
    9d20:	28c01915 	stw	r3,100(r5)
    9d24:	10c0020c 	andi	r3,r2,8
    9d28:	1800a526 	beq	r3,zero,9fc0 <___vfiprintf_internal_r+0x310>
    9d2c:	d9002017 	ldw	r4,128(sp)
    9d30:	20c00417 	ldw	r3,16(r4)
    9d34:	1800a226 	beq	r3,zero,9fc0 <___vfiprintf_internal_r+0x310>
    9d38:	1080068c 	andi	r2,r2,26
    9d3c:	00c00284 	movi	r3,10
    9d40:	10c0a826 	beq	r2,r3,9fe4 <___vfiprintf_internal_r+0x334>
    9d44:	d9001a04 	addi	r4,sp,104
    9d48:	d94019c4 	addi	r5,sp,103
    9d4c:	04800074 	movhi	r18,1
    9d50:	2145c83a 	sub	r2,r4,r5
    9d54:	9488d904 	addi	r18,r18,9060
    9d58:	d9001e15 	stw	r4,120(sp)
    9d5c:	d9401f15 	stw	r5,124(sp)
    9d60:	dec01a15 	stw	sp,104(sp)
    9d64:	d8001c15 	stw	zero,112(sp)
    9d68:	d8001b15 	stw	zero,108(sp)
    9d6c:	d811883a 	mov	r8,sp
    9d70:	d8002615 	stw	zero,152(sp)
    9d74:	d8002415 	stw	zero,144(sp)
    9d78:	d8802815 	stw	r2,160(sp)
    9d7c:	a82d883a 	mov	r22,r21
    9d80:	b0800007 	ldb	r2,0(r22)
    9d84:	10040d26 	beq	r2,zero,adbc <___vfiprintf_internal_r+0x110c>
    9d88:	00c00944 	movi	r3,37
    9d8c:	b029883a 	mov	r20,r22
    9d90:	10c0021e 	bne	r2,r3,9d9c <___vfiprintf_internal_r+0xec>
    9d94:	00001606 	br	9df0 <___vfiprintf_internal_r+0x140>
    9d98:	10c00326 	beq	r2,r3,9da8 <___vfiprintf_internal_r+0xf8>
    9d9c:	a5000044 	addi	r20,r20,1
    9da0:	a0800007 	ldb	r2,0(r20)
    9da4:	103ffc1e 	bne	r2,zero,9d98 <__alt_mem_onchip_memory2_0+0xf7009d98>
    9da8:	a5a1c83a 	sub	r16,r20,r22
    9dac:	80001026 	beq	r16,zero,9df0 <___vfiprintf_internal_r+0x140>
    9db0:	d8c01c17 	ldw	r3,112(sp)
    9db4:	d8801b17 	ldw	r2,108(sp)
    9db8:	45800015 	stw	r22,0(r8)
    9dbc:	80c7883a 	add	r3,r16,r3
    9dc0:	10800044 	addi	r2,r2,1
    9dc4:	44000115 	stw	r16,4(r8)
    9dc8:	d8c01c15 	stw	r3,112(sp)
    9dcc:	d8801b15 	stw	r2,108(sp)
    9dd0:	010001c4 	movi	r4,7
    9dd4:	2080750e 	bge	r4,r2,9fac <___vfiprintf_internal_r+0x2fc>
    9dd8:	1803951e 	bne	r3,zero,ac30 <___vfiprintf_internal_r+0xf80>
    9ddc:	d8c02417 	ldw	r3,144(sp)
    9de0:	d8001b15 	stw	zero,108(sp)
    9de4:	d811883a 	mov	r8,sp
    9de8:	1c07883a 	add	r3,r3,r16
    9dec:	d8c02415 	stw	r3,144(sp)
    9df0:	a0800007 	ldb	r2,0(r20)
    9df4:	1002e026 	beq	r2,zero,a978 <___vfiprintf_internal_r+0xcc8>
    9df8:	a5800044 	addi	r22,r20,1
    9dfc:	a0c00047 	ldb	r3,1(r20)
    9e00:	d8001d85 	stb	zero,118(sp)
    9e04:	0027883a 	mov	r19,zero
    9e08:	d8002305 	stb	zero,140(sp)
    9e0c:	043fffc4 	movi	r16,-1
    9e10:	d8002515 	stw	zero,148(sp)
    9e14:	0023883a 	mov	r17,zero
    9e18:	05001604 	movi	r20,88
    9e1c:	05400244 	movi	r21,9
    9e20:	402f883a 	mov	r23,r8
    9e24:	b5800044 	addi	r22,r22,1
    9e28:	18bff804 	addi	r2,r3,-32
    9e2c:	a0827736 	bltu	r20,r2,a80c <___vfiprintf_internal_r+0xb5c>
    9e30:	100490ba 	slli	r2,r2,2
    9e34:	01000074 	movhi	r4,1
    9e38:	21279204 	addi	r4,r4,-25016
    9e3c:	1105883a 	add	r2,r2,r4
    9e40:	10800017 	ldw	r2,0(r2)
    9e44:	1000683a 	jmp	r2
    9e48:	0000a50c 	andi	zero,zero,660
    9e4c:	0000a80c 	andi	zero,zero,672
    9e50:	0000a80c 	andi	zero,zero,672
    9e54:	0000a528 	cmpgeui	zero,zero,660
    9e58:	0000a80c 	andi	zero,zero,672
    9e5c:	0000a80c 	andi	zero,zero,672
    9e60:	0000a80c 	andi	zero,zero,672
    9e64:	0000a80c 	andi	zero,zero,672
    9e68:	0000a80c 	andi	zero,zero,672
    9e6c:	0000a80c 	andi	zero,zero,672
    9e70:	0000a730 	cmpltui	zero,zero,668
    9e74:	0000a754 	movui	zero,669
    9e78:	0000a80c 	andi	zero,zero,672
    9e7c:	0000a04c 	andi	zero,zero,641
    9e80:	0000a768 	cmpgeui	zero,zero,669
    9e84:	0000a80c 	andi	zero,zero,672
    9e88:	0000a534 	movhi	zero,660
    9e8c:	0000a540 	call	a54 <main+0x630>
    9e90:	0000a540 	call	a54 <main+0x630>
    9e94:	0000a540 	call	a54 <main+0x630>
    9e98:	0000a540 	call	a54 <main+0x630>
    9e9c:	0000a540 	call	a54 <main+0x630>
    9ea0:	0000a540 	call	a54 <main+0x630>
    9ea4:	0000a540 	call	a54 <main+0x630>
    9ea8:	0000a540 	call	a54 <main+0x630>
    9eac:	0000a540 	call	a54 <main+0x630>
    9eb0:	0000a80c 	andi	zero,zero,672
    9eb4:	0000a80c 	andi	zero,zero,672
    9eb8:	0000a80c 	andi	zero,zero,672
    9ebc:	0000a80c 	andi	zero,zero,672
    9ec0:	0000a80c 	andi	zero,zero,672
    9ec4:	0000a80c 	andi	zero,zero,672
    9ec8:	0000a80c 	andi	zero,zero,672
    9ecc:	0000a80c 	andi	zero,zero,672
    9ed0:	0000a80c 	andi	zero,zero,672
    9ed4:	0000a80c 	andi	zero,zero,672
    9ed8:	0000a580 	call	a58 <main+0x634>
    9edc:	0000a80c 	andi	zero,zero,672
    9ee0:	0000a80c 	andi	zero,zero,672
    9ee4:	0000a80c 	andi	zero,zero,672
    9ee8:	0000a80c 	andi	zero,zero,672
    9eec:	0000a80c 	andi	zero,zero,672
    9ef0:	0000a80c 	andi	zero,zero,672
    9ef4:	0000a80c 	andi	zero,zero,672
    9ef8:	0000a80c 	andi	zero,zero,672
    9efc:	0000a80c 	andi	zero,zero,672
    9f00:	0000a80c 	andi	zero,zero,672
    9f04:	0000a5bc 	xorhi	zero,zero,662
    9f08:	0000a80c 	andi	zero,zero,672
    9f0c:	0000a80c 	andi	zero,zero,672
    9f10:	0000a80c 	andi	zero,zero,672
    9f14:	0000a80c 	andi	zero,zero,672
    9f18:	0000a80c 	andi	zero,zero,672
    9f1c:	0000a618 	cmpnei	zero,zero,664
    9f20:	0000a80c 	andi	zero,zero,672
    9f24:	0000a80c 	andi	zero,zero,672
    9f28:	0000a68c 	andi	zero,zero,666
    9f2c:	0000a80c 	andi	zero,zero,672
    9f30:	0000a80c 	andi	zero,zero,672
    9f34:	0000a80c 	andi	zero,zero,672
    9f38:	0000a80c 	andi	zero,zero,672
    9f3c:	0000a80c 	andi	zero,zero,672
    9f40:	0000a80c 	andi	zero,zero,672
    9f44:	0000a80c 	andi	zero,zero,672
    9f48:	0000a80c 	andi	zero,zero,672
    9f4c:	0000a80c 	andi	zero,zero,672
    9f50:	0000a80c 	andi	zero,zero,672
    9f54:	0000a434 	movhi	zero,656
    9f58:	0000a464 	muli	zero,zero,657
    9f5c:	0000a80c 	andi	zero,zero,672
    9f60:	0000a80c 	andi	zero,zero,672
    9f64:	0000a80c 	andi	zero,zero,672
    9f68:	0000a7b4 	movhi	zero,670
    9f6c:	0000a464 	muli	zero,zero,657
    9f70:	0000a80c 	andi	zero,zero,672
    9f74:	0000a80c 	andi	zero,zero,672
    9f78:	0000a30c 	andi	zero,zero,652
    9f7c:	0000a80c 	andi	zero,zero,672
    9f80:	0000a320 	cmpeqi	zero,zero,652
    9f84:	0000a358 	cmpnei	zero,zero,653
    9f88:	0000a058 	cmpnei	zero,zero,641
    9f8c:	0000a300 	call	a30 <main+0x60c>
    9f90:	0000a80c 	andi	zero,zero,672
    9f94:	0000a6cc 	andi	zero,zero,667
    9f98:	0000a80c 	andi	zero,zero,672
    9f9c:	0000a718 	cmpnei	zero,zero,668
    9fa0:	0000a80c 	andi	zero,zero,672
    9fa4:	0000a80c 	andi	zero,zero,672
    9fa8:	0000a3dc 	xori	zero,zero,655
    9fac:	42000204 	addi	r8,r8,8
    9fb0:	d8c02417 	ldw	r3,144(sp)
    9fb4:	1c07883a 	add	r3,r3,r16
    9fb8:	d8c02415 	stw	r3,144(sp)
    9fbc:	003f8c06 	br	9df0 <__alt_mem_onchip_memory2_0+0xf7009df0>
    9fc0:	d9402017 	ldw	r5,128(sp)
    9fc4:	d9002117 	ldw	r4,132(sp)
    9fc8:	000486c0 	call	486c <__swsetup_r>
    9fcc:	1003c11e 	bne	r2,zero,aed4 <___vfiprintf_internal_r+0x1224>
    9fd0:	d9402017 	ldw	r5,128(sp)
    9fd4:	00c00284 	movi	r3,10
    9fd8:	2880030b 	ldhu	r2,12(r5)
    9fdc:	1080068c 	andi	r2,r2,26
    9fe0:	10ff581e 	bne	r2,r3,9d44 <__alt_mem_onchip_memory2_0+0xf7009d44>
    9fe4:	d8c02017 	ldw	r3,128(sp)
    9fe8:	1880038f 	ldh	r2,14(r3)
    9fec:	103f5516 	blt	r2,zero,9d44 <__alt_mem_onchip_memory2_0+0xf7009d44>
    9ff0:	d9c02217 	ldw	r7,136(sp)
    9ff4:	d9002117 	ldw	r4,132(sp)
    9ff8:	a80d883a 	mov	r6,r21
    9ffc:	180b883a 	mov	r5,r3
    a000:	000b1d80 	call	b1d8 <__sbprintf>
    a004:	dfc03517 	ldw	ra,212(sp)
    a008:	df003417 	ldw	fp,208(sp)
    a00c:	ddc03317 	ldw	r23,204(sp)
    a010:	dd803217 	ldw	r22,200(sp)
    a014:	dd403117 	ldw	r21,196(sp)
    a018:	dd003017 	ldw	r20,192(sp)
    a01c:	dcc02f17 	ldw	r19,188(sp)
    a020:	dc802e17 	ldw	r18,184(sp)
    a024:	dc402d17 	ldw	r17,180(sp)
    a028:	dc002c17 	ldw	r16,176(sp)
    a02c:	dec03604 	addi	sp,sp,216
    a030:	f800283a 	ret
    a034:	00068780 	call	6878 <__sinit>
    a038:	003f2f06 	br	9cf8 <__alt_mem_onchip_memory2_0+0xf7009cf8>
    a03c:	d8c02517 	ldw	r3,148(sp)
    a040:	d8802215 	stw	r2,136(sp)
    a044:	00c7c83a 	sub	r3,zero,r3
    a048:	d8c02515 	stw	r3,148(sp)
    a04c:	8c400114 	ori	r17,r17,4
    a050:	b0c00007 	ldb	r3,0(r22)
    a054:	003f7306 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a058:	00800c04 	movi	r2,48
    a05c:	d9402217 	ldw	r5,136(sp)
    a060:	d8801d05 	stb	r2,116(sp)
    a064:	00801e04 	movi	r2,120
    a068:	d8801d45 	stb	r2,117(sp)
    a06c:	d8001d85 	stb	zero,118(sp)
    a070:	b811883a 	mov	r8,r23
    a074:	28c00104 	addi	r3,r5,4
    a078:	2cc00017 	ldw	r19,0(r5)
    a07c:	0029883a 	mov	r20,zero
    a080:	88800094 	ori	r2,r17,2
    a084:	80032516 	blt	r16,zero,ad1c <___vfiprintf_internal_r+0x106c>
    a088:	00bfdfc4 	movi	r2,-129
    a08c:	88a2703a 	and	r17,r17,r2
    a090:	d8c02215 	stw	r3,136(sp)
    a094:	8c400094 	ori	r17,r17,2
    a098:	98032a1e 	bne	r19,zero,ad44 <___vfiprintf_internal_r+0x1094>
    a09c:	00800074 	movhi	r2,1
    a0a0:	10887804 	addi	r2,r2,8672
    a0a4:	d8802615 	stw	r2,152(sp)
    a0a8:	002b883a 	mov	r21,zero
    a0ac:	8001741e 	bne	r16,zero,a680 <___vfiprintf_internal_r+0x9d0>
    a0b0:	0021883a 	mov	r16,zero
    a0b4:	0029883a 	mov	r20,zero
    a0b8:	ddc01a04 	addi	r23,sp,104
    a0bc:	8027883a 	mov	r19,r16
    a0c0:	8500010e 	bge	r16,r20,a0c8 <___vfiprintf_internal_r+0x418>
    a0c4:	a027883a 	mov	r19,r20
    a0c8:	ad403fcc 	andi	r21,r21,255
    a0cc:	ad40201c 	xori	r21,r21,128
    a0d0:	ad7fe004 	addi	r21,r21,-128
    a0d4:	a8000126 	beq	r21,zero,a0dc <___vfiprintf_internal_r+0x42c>
    a0d8:	9cc00044 	addi	r19,r19,1
    a0dc:	89c0008c 	andi	r7,r17,2
    a0e0:	38000126 	beq	r7,zero,a0e8 <___vfiprintf_internal_r+0x438>
    a0e4:	9cc00084 	addi	r19,r19,2
    a0e8:	88c0210c 	andi	r3,r17,132
    a0ec:	1801dd1e 	bne	r3,zero,a864 <___vfiprintf_internal_r+0xbb4>
    a0f0:	d9402517 	ldw	r5,148(sp)
    a0f4:	2cebc83a 	sub	r21,r5,r19
    a0f8:	0541da0e 	bge	zero,r21,a864 <___vfiprintf_internal_r+0xbb4>
    a0fc:	07000404 	movi	fp,16
    a100:	d8801c17 	ldw	r2,112(sp)
    a104:	e543be0e 	bge	fp,r21,b000 <___vfiprintf_internal_r+0x1350>
    a108:	01400074 	movhi	r5,1
    a10c:	2948dd04 	addi	r5,r5,9076
    a110:	dc002715 	stw	r16,156(sp)
    a114:	d9801b17 	ldw	r6,108(sp)
    a118:	a821883a 	mov	r16,r21
    a11c:	d9402315 	stw	r5,140(sp)
    a120:	028001c4 	movi	r10,7
    a124:	d9c02915 	stw	r7,164(sp)
    a128:	182b883a 	mov	r21,r3
    a12c:	00000506 	br	a144 <___vfiprintf_internal_r+0x494>
    a130:	31000084 	addi	r4,r6,2
    a134:	42000204 	addi	r8,r8,8
    a138:	180d883a 	mov	r6,r3
    a13c:	843ffc04 	addi	r16,r16,-16
    a140:	e4000f0e 	bge	fp,r16,a180 <___vfiprintf_internal_r+0x4d0>
    a144:	01000074 	movhi	r4,1
    a148:	10800404 	addi	r2,r2,16
    a14c:	30c00044 	addi	r3,r6,1
    a150:	2108dd04 	addi	r4,r4,9076
    a154:	41000015 	stw	r4,0(r8)
    a158:	47000115 	stw	fp,4(r8)
    a15c:	d8801c15 	stw	r2,112(sp)
    a160:	d8c01b15 	stw	r3,108(sp)
    a164:	50fff20e 	bge	r10,r3,a130 <__alt_mem_onchip_memory2_0+0xf700a130>
    a168:	1001b21e 	bne	r2,zero,a834 <___vfiprintf_internal_r+0xb84>
    a16c:	843ffc04 	addi	r16,r16,-16
    a170:	000d883a 	mov	r6,zero
    a174:	01000044 	movi	r4,1
    a178:	d811883a 	mov	r8,sp
    a17c:	e43ff116 	blt	fp,r16,a144 <__alt_mem_onchip_memory2_0+0xf700a144>
    a180:	a807883a 	mov	r3,r21
    a184:	d9c02917 	ldw	r7,164(sp)
    a188:	802b883a 	mov	r21,r16
    a18c:	dc002717 	ldw	r16,156(sp)
    a190:	d9402317 	ldw	r5,140(sp)
    a194:	a885883a 	add	r2,r21,r2
    a198:	45400115 	stw	r21,4(r8)
    a19c:	41400015 	stw	r5,0(r8)
    a1a0:	d8801c15 	stw	r2,112(sp)
    a1a4:	d9001b15 	stw	r4,108(sp)
    a1a8:	014001c4 	movi	r5,7
    a1ac:	29026216 	blt	r5,r4,ab38 <___vfiprintf_internal_r+0xe88>
    a1b0:	d9801d87 	ldb	r6,118(sp)
    a1b4:	42000204 	addi	r8,r8,8
    a1b8:	21400044 	addi	r5,r4,1
    a1bc:	3001ae1e 	bne	r6,zero,a878 <___vfiprintf_internal_r+0xbc8>
    a1c0:	3801bb26 	beq	r7,zero,a8b0 <___vfiprintf_internal_r+0xc00>
    a1c4:	d9001d04 	addi	r4,sp,116
    a1c8:	10800084 	addi	r2,r2,2
    a1cc:	41000015 	stw	r4,0(r8)
    a1d0:	01000084 	movi	r4,2
    a1d4:	41000115 	stw	r4,4(r8)
    a1d8:	d8801c15 	stw	r2,112(sp)
    a1dc:	d9401b15 	stw	r5,108(sp)
    a1e0:	010001c4 	movi	r4,7
    a1e4:	2142680e 	bge	r4,r5,ab88 <___vfiprintf_internal_r+0xed8>
    a1e8:	1002b11e 	bne	r2,zero,acb0 <___vfiprintf_internal_r+0x1000>
    a1ec:	01802004 	movi	r6,128
    a1f0:	01400044 	movi	r5,1
    a1f4:	0009883a 	mov	r4,zero
    a1f8:	d811883a 	mov	r8,sp
    a1fc:	1981ae1e 	bne	r3,r6,a8b8 <___vfiprintf_internal_r+0xc08>
    a200:	d8c02517 	ldw	r3,148(sp)
    a204:	1cf9c83a 	sub	fp,r3,r19
    a208:	0701ab0e 	bge	zero,fp,a8b8 <___vfiprintf_internal_r+0xc08>
    a20c:	05400404 	movi	r21,16
    a210:	af03a90e 	bge	r21,fp,b0b8 <___vfiprintf_internal_r+0x1408>
    a214:	01400074 	movhi	r5,1
    a218:	2948d904 	addi	r5,r5,9060
    a21c:	d9402315 	stw	r5,140(sp)
    a220:	01c001c4 	movi	r7,7
    a224:	00000506 	br	a23c <___vfiprintf_internal_r+0x58c>
    a228:	21800084 	addi	r6,r4,2
    a22c:	42000204 	addi	r8,r8,8
    a230:	1809883a 	mov	r4,r3
    a234:	e73ffc04 	addi	fp,fp,-16
    a238:	af000d0e 	bge	r21,fp,a270 <___vfiprintf_internal_r+0x5c0>
    a23c:	10800404 	addi	r2,r2,16
    a240:	20c00044 	addi	r3,r4,1
    a244:	44800015 	stw	r18,0(r8)
    a248:	45400115 	stw	r21,4(r8)
    a24c:	d8801c15 	stw	r2,112(sp)
    a250:	d8c01b15 	stw	r3,108(sp)
    a254:	38fff40e 	bge	r7,r3,a228 <__alt_mem_onchip_memory2_0+0xf700a228>
    a258:	10022b1e 	bne	r2,zero,ab08 <___vfiprintf_internal_r+0xe58>
    a25c:	e73ffc04 	addi	fp,fp,-16
    a260:	01800044 	movi	r6,1
    a264:	0009883a 	mov	r4,zero
    a268:	d811883a 	mov	r8,sp
    a26c:	af3ff316 	blt	r21,fp,a23c <__alt_mem_onchip_memory2_0+0xf700a23c>
    a270:	d8c02317 	ldw	r3,140(sp)
    a274:	1705883a 	add	r2,r2,fp
    a278:	47000115 	stw	fp,4(r8)
    a27c:	40c00015 	stw	r3,0(r8)
    a280:	d8801c15 	stw	r2,112(sp)
    a284:	d9801b15 	stw	r6,108(sp)
    a288:	00c001c4 	movi	r3,7
    a28c:	19829416 	blt	r3,r6,ace0 <___vfiprintf_internal_r+0x1030>
    a290:	8521c83a 	sub	r16,r16,r20
    a294:	42000204 	addi	r8,r8,8
    a298:	31400044 	addi	r5,r6,1
    a29c:	3009883a 	mov	r4,r6
    a2a0:	04018716 	blt	zero,r16,a8c0 <___vfiprintf_internal_r+0xc10>
    a2a4:	a085883a 	add	r2,r20,r2
    a2a8:	45c00015 	stw	r23,0(r8)
    a2ac:	45000115 	stw	r20,4(r8)
    a2b0:	d8801c15 	stw	r2,112(sp)
    a2b4:	d9401b15 	stw	r5,108(sp)
    a2b8:	00c001c4 	movi	r3,7
    a2bc:	1941c20e 	bge	r3,r5,a9c8 <___vfiprintf_internal_r+0xd18>
    a2c0:	1002531e 	bne	r2,zero,ac10 <___vfiprintf_internal_r+0xf60>
    a2c4:	d8001b15 	stw	zero,108(sp)
    a2c8:	8c40010c 	andi	r17,r17,4
    a2cc:	88023226 	beq	r17,zero,ab98 <___vfiprintf_internal_r+0xee8>
    a2d0:	d9002517 	ldw	r4,148(sp)
    a2d4:	24e3c83a 	sub	r17,r4,r19
    a2d8:	04432916 	blt	zero,r17,af80 <___vfiprintf_internal_r+0x12d0>
    a2dc:	d8802517 	ldw	r2,148(sp)
    a2e0:	14c0010e 	bge	r2,r19,a2e8 <___vfiprintf_internal_r+0x638>
    a2e4:	9805883a 	mov	r2,r19
    a2e8:	d8c02417 	ldw	r3,144(sp)
    a2ec:	1887883a 	add	r3,r3,r2
    a2f0:	d8c02415 	stw	r3,144(sp)
    a2f4:	d8001b15 	stw	zero,108(sp)
    a2f8:	d811883a 	mov	r8,sp
    a2fc:	003ea006 	br	9d80 <__alt_mem_onchip_memory2_0+0xf7009d80>
    a300:	8c400814 	ori	r17,r17,32
    a304:	b0c00007 	ldb	r3,0(r22)
    a308:	003ec606 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a30c:	b0c00007 	ldb	r3,0(r22)
    a310:	00801b04 	movi	r2,108
    a314:	18832026 	beq	r3,r2,af98 <___vfiprintf_internal_r+0x12e8>
    a318:	8c400414 	ori	r17,r17,16
    a31c:	003ec106 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a320:	9cc03fcc 	andi	r19,r19,255
    a324:	b811883a 	mov	r8,r23
    a328:	9803981e 	bne	r19,zero,b18c <___vfiprintf_internal_r+0x14dc>
    a32c:	8880080c 	andi	r2,r17,32
    a330:	1002be26 	beq	r2,zero,ae2c <___vfiprintf_internal_r+0x117c>
    a334:	d9002217 	ldw	r4,136(sp)
    a338:	d9402417 	ldw	r5,144(sp)
    a33c:	20800017 	ldw	r2,0(r4)
    a340:	2807d7fa 	srai	r3,r5,31
    a344:	21000104 	addi	r4,r4,4
    a348:	d9002215 	stw	r4,136(sp)
    a34c:	11400015 	stw	r5,0(r2)
    a350:	10c00115 	stw	r3,4(r2)
    a354:	003e8a06 	br	9d80 <__alt_mem_onchip_memory2_0+0xf7009d80>
    a358:	9cc03fcc 	andi	r19,r19,255
    a35c:	b811883a 	mov	r8,r23
    a360:	9803871e 	bne	r19,zero,b180 <___vfiprintf_internal_r+0x14d0>
    a364:	8880080c 	andi	r2,r17,32
    a368:	10009a26 	beq	r2,zero,a5d4 <___vfiprintf_internal_r+0x924>
    a36c:	d9002217 	ldw	r4,136(sp)
    a370:	d8001d85 	stb	zero,118(sp)
    a374:	20800204 	addi	r2,r4,8
    a378:	24c00017 	ldw	r19,0(r4)
    a37c:	25000117 	ldw	r20,4(r4)
    a380:	8002a416 	blt	r16,zero,ae14 <___vfiprintf_internal_r+0x1164>
    a384:	013fdfc4 	movi	r4,-129
    a388:	9d06b03a 	or	r3,r19,r20
    a38c:	d8802215 	stw	r2,136(sp)
    a390:	8922703a 	and	r17,r17,r4
    a394:	18009b26 	beq	r3,zero,a604 <___vfiprintf_internal_r+0x954>
    a398:	002b883a 	mov	r21,zero
    a39c:	ddc01a04 	addi	r23,sp,104
    a3a0:	9806d0fa 	srli	r3,r19,3
    a3a4:	a008977a 	slli	r4,r20,29
    a3a8:	a028d0fa 	srli	r20,r20,3
    a3ac:	9cc001cc 	andi	r19,r19,7
    a3b0:	98800c04 	addi	r2,r19,48
    a3b4:	bdffffc4 	addi	r23,r23,-1
    a3b8:	20e6b03a 	or	r19,r4,r3
    a3bc:	b8800005 	stb	r2,0(r23)
    a3c0:	9d06b03a 	or	r3,r19,r20
    a3c4:	183ff61e 	bne	r3,zero,a3a0 <__alt_mem_onchip_memory2_0+0xf700a3a0>
    a3c8:	88c0004c 	andi	r3,r17,1
    a3cc:	18021f1e 	bne	r3,zero,ac4c <___vfiprintf_internal_r+0xf9c>
    a3d0:	d9401e17 	ldw	r5,120(sp)
    a3d4:	2de9c83a 	sub	r20,r5,r23
    a3d8:	003f3806 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    a3dc:	9cc03fcc 	andi	r19,r19,255
    a3e0:	b811883a 	mov	r8,r23
    a3e4:	98034f1e 	bne	r19,zero,b124 <___vfiprintf_internal_r+0x1474>
    a3e8:	00800074 	movhi	r2,1
    a3ec:	10887804 	addi	r2,r2,8672
    a3f0:	d8802615 	stw	r2,152(sp)
    a3f4:	8880080c 	andi	r2,r17,32
    a3f8:	1000ac26 	beq	r2,zero,a6ac <___vfiprintf_internal_r+0x9fc>
    a3fc:	d9002217 	ldw	r4,136(sp)
    a400:	24c00017 	ldw	r19,0(r4)
    a404:	25000117 	ldw	r20,4(r4)
    a408:	21000204 	addi	r4,r4,8
    a40c:	d9002215 	stw	r4,136(sp)
    a410:	8880004c 	andi	r2,r17,1
    a414:	1001e726 	beq	r2,zero,abb4 <___vfiprintf_internal_r+0xf04>
    a418:	9d04b03a 	or	r2,r19,r20
    a41c:	10025c1e 	bne	r2,zero,ad90 <___vfiprintf_internal_r+0x10e0>
    a420:	d8001d85 	stb	zero,118(sp)
    a424:	80024416 	blt	r16,zero,ad38 <___vfiprintf_internal_r+0x1088>
    a428:	00bfdfc4 	movi	r2,-129
    a42c:	88a2703a 	and	r17,r17,r2
    a430:	003f1d06 	br	a0a8 <__alt_mem_onchip_memory2_0+0xf700a0a8>
    a434:	d8c02217 	ldw	r3,136(sp)
    a438:	04c00044 	movi	r19,1
    a43c:	b811883a 	mov	r8,r23
    a440:	18800017 	ldw	r2,0(r3)
    a444:	18c00104 	addi	r3,r3,4
    a448:	d8001d85 	stb	zero,118(sp)
    a44c:	d8801005 	stb	r2,64(sp)
    a450:	d8c02215 	stw	r3,136(sp)
    a454:	9829883a 	mov	r20,r19
    a458:	ddc01004 	addi	r23,sp,64
    a45c:	0021883a 	mov	r16,zero
    a460:	003f1e06 	br	a0dc <__alt_mem_onchip_memory2_0+0xf700a0dc>
    a464:	9cc03fcc 	andi	r19,r19,255
    a468:	b811883a 	mov	r8,r23
    a46c:	9803331e 	bne	r19,zero,b13c <___vfiprintf_internal_r+0x148c>
    a470:	8880080c 	andi	r2,r17,32
    a474:	10004826 	beq	r2,zero,a598 <___vfiprintf_internal_r+0x8e8>
    a478:	d9002217 	ldw	r4,136(sp)
    a47c:	20800117 	ldw	r2,4(r4)
    a480:	24c00017 	ldw	r19,0(r4)
    a484:	21000204 	addi	r4,r4,8
    a488:	d9002215 	stw	r4,136(sp)
    a48c:	1029883a 	mov	r20,r2
    a490:	10024c16 	blt	r2,zero,adc4 <___vfiprintf_internal_r+0x1114>
    a494:	dd401d83 	ldbu	r21,118(sp)
    a498:	80007116 	blt	r16,zero,a660 <___vfiprintf_internal_r+0x9b0>
    a49c:	00ffdfc4 	movi	r3,-129
    a4a0:	9d04b03a 	or	r2,r19,r20
    a4a4:	88e2703a 	and	r17,r17,r3
    a4a8:	1000d126 	beq	r2,zero,a7f0 <___vfiprintf_internal_r+0xb40>
    a4ac:	a0023526 	beq	r20,zero,ad84 <___vfiprintf_internal_r+0x10d4>
    a4b0:	ddc01a04 	addi	r23,sp,104
    a4b4:	4039883a 	mov	fp,r8
    a4b8:	9809883a 	mov	r4,r19
    a4bc:	a00b883a 	mov	r5,r20
    a4c0:	01800284 	movi	r6,10
    a4c4:	000f883a 	mov	r7,zero
    a4c8:	000c1dc0 	call	c1dc <__umoddi3>
    a4cc:	10800c04 	addi	r2,r2,48
    a4d0:	bdffffc4 	addi	r23,r23,-1
    a4d4:	9809883a 	mov	r4,r19
    a4d8:	a00b883a 	mov	r5,r20
    a4dc:	b8800005 	stb	r2,0(r23)
    a4e0:	01800284 	movi	r6,10
    a4e4:	000f883a 	mov	r7,zero
    a4e8:	000bbe00 	call	bbe0 <__udivdi3>
    a4ec:	1027883a 	mov	r19,r2
    a4f0:	10c4b03a 	or	r2,r2,r3
    a4f4:	1829883a 	mov	r20,r3
    a4f8:	103fef1e 	bne	r2,zero,a4b8 <__alt_mem_onchip_memory2_0+0xf700a4b8>
    a4fc:	d9001e17 	ldw	r4,120(sp)
    a500:	e011883a 	mov	r8,fp
    a504:	25e9c83a 	sub	r20,r4,r23
    a508:	003eec06 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    a50c:	d8802307 	ldb	r2,140(sp)
    a510:	1002361e 	bne	r2,zero,adec <___vfiprintf_internal_r+0x113c>
    a514:	00c00804 	movi	r3,32
    a518:	d8c02305 	stb	r3,140(sp)
    a51c:	04c00044 	movi	r19,1
    a520:	b0c00007 	ldb	r3,0(r22)
    a524:	003e3f06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a528:	8c400054 	ori	r17,r17,1
    a52c:	b0c00007 	ldb	r3,0(r22)
    a530:	003e3c06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a534:	8c402014 	ori	r17,r17,128
    a538:	b0c00007 	ldb	r3,0(r22)
    a53c:	003e3906 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a540:	dc002715 	stw	r16,156(sp)
    a544:	d8002515 	stw	zero,148(sp)
    a548:	1f3ff404 	addi	fp,r3,-48
    a54c:	0009883a 	mov	r4,zero
    a550:	b021883a 	mov	r16,r22
    a554:	01400284 	movi	r5,10
    a558:	000c9540 	call	c954 <__mulsi3>
    a55c:	80c00007 	ldb	r3,0(r16)
    a560:	e089883a 	add	r4,fp,r2
    a564:	b5800044 	addi	r22,r22,1
    a568:	1f3ff404 	addi	fp,r3,-48
    a56c:	b021883a 	mov	r16,r22
    a570:	af3ff82e 	bgeu	r21,fp,a554 <__alt_mem_onchip_memory2_0+0xf700a554>
    a574:	d9002515 	stw	r4,148(sp)
    a578:	dc002717 	ldw	r16,156(sp)
    a57c:	003e2a06 	br	9e28 <__alt_mem_onchip_memory2_0+0xf7009e28>
    a580:	9cc03fcc 	andi	r19,r19,255
    a584:	b811883a 	mov	r8,r23
    a588:	9802e91e 	bne	r19,zero,b130 <___vfiprintf_internal_r+0x1480>
    a58c:	8c400414 	ori	r17,r17,16
    a590:	8880080c 	andi	r2,r17,32
    a594:	103fb81e 	bne	r2,zero,a478 <__alt_mem_onchip_memory2_0+0xf700a478>
    a598:	8880040c 	andi	r2,r17,16
    a59c:	10022e26 	beq	r2,zero,ae58 <___vfiprintf_internal_r+0x11a8>
    a5a0:	d9402217 	ldw	r5,136(sp)
    a5a4:	2cc00017 	ldw	r19,0(r5)
    a5a8:	29400104 	addi	r5,r5,4
    a5ac:	d9402215 	stw	r5,136(sp)
    a5b0:	9829d7fa 	srai	r20,r19,31
    a5b4:	a005883a 	mov	r2,r20
    a5b8:	003fb506 	br	a490 <__alt_mem_onchip_memory2_0+0xf700a490>
    a5bc:	9cc03fcc 	andi	r19,r19,255
    a5c0:	b811883a 	mov	r8,r23
    a5c4:	9802fa1e 	bne	r19,zero,b1b0 <___vfiprintf_internal_r+0x1500>
    a5c8:	8c400414 	ori	r17,r17,16
    a5cc:	8880080c 	andi	r2,r17,32
    a5d0:	103f661e 	bne	r2,zero,a36c <__alt_mem_onchip_memory2_0+0xf700a36c>
    a5d4:	8880040c 	andi	r2,r17,16
    a5d8:	10020626 	beq	r2,zero,adf4 <___vfiprintf_internal_r+0x1144>
    a5dc:	d9402217 	ldw	r5,136(sp)
    a5e0:	d8001d85 	stb	zero,118(sp)
    a5e4:	0029883a 	mov	r20,zero
    a5e8:	28800104 	addi	r2,r5,4
    a5ec:	2cc00017 	ldw	r19,0(r5)
    a5f0:	80020816 	blt	r16,zero,ae14 <___vfiprintf_internal_r+0x1164>
    a5f4:	00ffdfc4 	movi	r3,-129
    a5f8:	d8802215 	stw	r2,136(sp)
    a5fc:	88e2703a 	and	r17,r17,r3
    a600:	983f651e 	bne	r19,zero,a398 <__alt_mem_onchip_memory2_0+0xf700a398>
    a604:	002b883a 	mov	r21,zero
    a608:	8002cf26 	beq	r16,zero,b148 <___vfiprintf_internal_r+0x1498>
    a60c:	0027883a 	mov	r19,zero
    a610:	0029883a 	mov	r20,zero
    a614:	003f6106 	br	a39c <__alt_mem_onchip_memory2_0+0xf700a39c>
    a618:	9cc03fcc 	andi	r19,r19,255
    a61c:	b811883a 	mov	r8,r23
    a620:	9802e01e 	bne	r19,zero,b1a4 <___vfiprintf_internal_r+0x14f4>
    a624:	8c400414 	ori	r17,r17,16
    a628:	8880080c 	andi	r2,r17,32
    a62c:	1000641e 	bne	r2,zero,a7c0 <___vfiprintf_internal_r+0xb10>
    a630:	8880040c 	andi	r2,r17,16
    a634:	1001c81e 	bne	r2,zero,ad58 <___vfiprintf_internal_r+0x10a8>
    a638:	8880100c 	andi	r2,r17,64
    a63c:	d8001d85 	stb	zero,118(sp)
    a640:	1002281e 	bne	r2,zero,aee4 <___vfiprintf_internal_r+0x1234>
    a644:	d9002217 	ldw	r4,136(sp)
    a648:	0029883a 	mov	r20,zero
    a64c:	20800104 	addi	r2,r4,4
    a650:	24c00017 	ldw	r19,0(r4)
    a654:	8001c60e 	bge	r16,zero,ad70 <___vfiprintf_internal_r+0x10c0>
    a658:	d8802215 	stw	r2,136(sp)
    a65c:	002b883a 	mov	r21,zero
    a660:	9d04b03a 	or	r2,r19,r20
    a664:	103f911e 	bne	r2,zero,a4ac <__alt_mem_onchip_memory2_0+0xf700a4ac>
    a668:	00800044 	movi	r2,1
    a66c:	10803fcc 	andi	r2,r2,255
    a670:	00c00044 	movi	r3,1
    a674:	10c05f26 	beq	r2,r3,a7f4 <___vfiprintf_internal_r+0xb44>
    a678:	00c00084 	movi	r3,2
    a67c:	10ffe31e 	bne	r2,r3,a60c <__alt_mem_onchip_memory2_0+0xf700a60c>
    a680:	0027883a 	mov	r19,zero
    a684:	0029883a 	mov	r20,zero
    a688:	00015106 	br	abd0 <___vfiprintf_internal_r+0xf20>
    a68c:	9cc03fcc 	andi	r19,r19,255
    a690:	b811883a 	mov	r8,r23
    a694:	9802c01e 	bne	r19,zero,b198 <___vfiprintf_internal_r+0x14e8>
    a698:	01400074 	movhi	r5,1
    a69c:	29487304 	addi	r5,r5,8652
    a6a0:	d9402615 	stw	r5,152(sp)
    a6a4:	8880080c 	andi	r2,r17,32
    a6a8:	103f541e 	bne	r2,zero,a3fc <__alt_mem_onchip_memory2_0+0xf700a3fc>
    a6ac:	8880040c 	andi	r2,r17,16
    a6b0:	1001f226 	beq	r2,zero,ae7c <___vfiprintf_internal_r+0x11cc>
    a6b4:	d9402217 	ldw	r5,136(sp)
    a6b8:	0029883a 	mov	r20,zero
    a6bc:	2cc00017 	ldw	r19,0(r5)
    a6c0:	29400104 	addi	r5,r5,4
    a6c4:	d9402215 	stw	r5,136(sp)
    a6c8:	003f5106 	br	a410 <__alt_mem_onchip_memory2_0+0xf700a410>
    a6cc:	d8c02217 	ldw	r3,136(sp)
    a6d0:	b811883a 	mov	r8,r23
    a6d4:	d8001d85 	stb	zero,118(sp)
    a6d8:	1dc00017 	ldw	r23,0(r3)
    a6dc:	1f000104 	addi	fp,r3,4
    a6e0:	b8025926 	beq	r23,zero,b048 <___vfiprintf_internal_r+0x1398>
    a6e4:	80023316 	blt	r16,zero,afb4 <___vfiprintf_internal_r+0x1304>
    a6e8:	800d883a 	mov	r6,r16
    a6ec:	000b883a 	mov	r5,zero
    a6f0:	b809883a 	mov	r4,r23
    a6f4:	da002a15 	stw	r8,168(sp)
    a6f8:	0007df00 	call	7df0 <memchr>
    a6fc:	da002a17 	ldw	r8,168(sp)
    a700:	10026826 	beq	r2,zero,b0a4 <___vfiprintf_internal_r+0x13f4>
    a704:	15e9c83a 	sub	r20,r2,r23
    a708:	dd401d83 	ldbu	r21,118(sp)
    a70c:	df002215 	stw	fp,136(sp)
    a710:	0021883a 	mov	r16,zero
    a714:	003e6906 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    a718:	9cc03fcc 	andi	r19,r19,255
    a71c:	b811883a 	mov	r8,r23
    a720:	983fc126 	beq	r19,zero,a628 <__alt_mem_onchip_memory2_0+0xf700a628>
    a724:	d8c02303 	ldbu	r3,140(sp)
    a728:	d8c01d85 	stb	r3,118(sp)
    a72c:	003fbe06 	br	a628 <__alt_mem_onchip_memory2_0+0xf700a628>
    a730:	d9002217 	ldw	r4,136(sp)
    a734:	d9402217 	ldw	r5,136(sp)
    a738:	21000017 	ldw	r4,0(r4)
    a73c:	28800104 	addi	r2,r5,4
    a740:	d9002515 	stw	r4,148(sp)
    a744:	203e3d16 	blt	r4,zero,a03c <__alt_mem_onchip_memory2_0+0xf700a03c>
    a748:	d8802215 	stw	r2,136(sp)
    a74c:	b0c00007 	ldb	r3,0(r22)
    a750:	003db406 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a754:	00c00ac4 	movi	r3,43
    a758:	d8c02305 	stb	r3,140(sp)
    a75c:	04c00044 	movi	r19,1
    a760:	b0c00007 	ldb	r3,0(r22)
    a764:	003daf06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a768:	b0c00007 	ldb	r3,0(r22)
    a76c:	01000a84 	movi	r4,42
    a770:	b4000044 	addi	r16,r22,1
    a774:	19025e26 	beq	r3,r4,b0f0 <___vfiprintf_internal_r+0x1440>
    a778:	1f3ff404 	addi	fp,r3,-48
    a77c:	0009883a 	mov	r4,zero
    a780:	af025236 	bltu	r21,fp,b0cc <___vfiprintf_internal_r+0x141c>
    a784:	01400284 	movi	r5,10
    a788:	000c9540 	call	c954 <__mulsi3>
    a78c:	80c00007 	ldb	r3,0(r16)
    a790:	1709883a 	add	r4,r2,fp
    a794:	85800044 	addi	r22,r16,1
    a798:	1f3ff404 	addi	fp,r3,-48
    a79c:	b021883a 	mov	r16,r22
    a7a0:	af3ff82e 	bgeu	r21,fp,a784 <__alt_mem_onchip_memory2_0+0xf700a784>
    a7a4:	2021883a 	mov	r16,r4
    a7a8:	203d9f0e 	bge	r4,zero,9e28 <__alt_mem_onchip_memory2_0+0xf7009e28>
    a7ac:	043fffc4 	movi	r16,-1
    a7b0:	003d9d06 	br	9e28 <__alt_mem_onchip_memory2_0+0xf7009e28>
    a7b4:	8c401014 	ori	r17,r17,64
    a7b8:	b0c00007 	ldb	r3,0(r22)
    a7bc:	003d9906 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    a7c0:	d9002217 	ldw	r4,136(sp)
    a7c4:	d8001d85 	stb	zero,118(sp)
    a7c8:	20c00204 	addi	r3,r4,8
    a7cc:	24c00017 	ldw	r19,0(r4)
    a7d0:	25000117 	ldw	r20,4(r4)
    a7d4:	8001e716 	blt	r16,zero,af74 <___vfiprintf_internal_r+0x12c4>
    a7d8:	013fdfc4 	movi	r4,-129
    a7dc:	9d04b03a 	or	r2,r19,r20
    a7e0:	d8c02215 	stw	r3,136(sp)
    a7e4:	8922703a 	and	r17,r17,r4
    a7e8:	002b883a 	mov	r21,zero
    a7ec:	103f2f1e 	bne	r2,zero,a4ac <__alt_mem_onchip_memory2_0+0xf700a4ac>
    a7f0:	803e2f26 	beq	r16,zero,a0b0 <__alt_mem_onchip_memory2_0+0xf700a0b0>
    a7f4:	0027883a 	mov	r19,zero
    a7f8:	9cc00c04 	addi	r19,r19,48
    a7fc:	dcc019c5 	stb	r19,103(sp)
    a800:	dd002817 	ldw	r20,160(sp)
    a804:	ddc019c4 	addi	r23,sp,103
    a808:	003e2c06 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    a80c:	9cc03fcc 	andi	r19,r19,255
    a810:	b811883a 	mov	r8,r23
    a814:	9802571e 	bne	r19,zero,b174 <___vfiprintf_internal_r+0x14c4>
    a818:	18005726 	beq	r3,zero,a978 <___vfiprintf_internal_r+0xcc8>
    a81c:	04c00044 	movi	r19,1
    a820:	d8c01005 	stb	r3,64(sp)
    a824:	d8001d85 	stb	zero,118(sp)
    a828:	9829883a 	mov	r20,r19
    a82c:	ddc01004 	addi	r23,sp,64
    a830:	003f0a06 	br	a45c <__alt_mem_onchip_memory2_0+0xf700a45c>
    a834:	d9402017 	ldw	r5,128(sp)
    a838:	d9002117 	ldw	r4,132(sp)
    a83c:	d9801a04 	addi	r6,sp,104
    a840:	da802a15 	stw	r10,168(sp)
    a844:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    a848:	da802a17 	ldw	r10,168(sp)
    a84c:	1000501e 	bne	r2,zero,a990 <___vfiprintf_internal_r+0xce0>
    a850:	d9801b17 	ldw	r6,108(sp)
    a854:	d8801c17 	ldw	r2,112(sp)
    a858:	d811883a 	mov	r8,sp
    a85c:	31000044 	addi	r4,r6,1
    a860:	003e3606 	br	a13c <__alt_mem_onchip_memory2_0+0xf700a13c>
    a864:	d9001b17 	ldw	r4,108(sp)
    a868:	d8801c17 	ldw	r2,112(sp)
    a86c:	21400044 	addi	r5,r4,1
    a870:	d9801d87 	ldb	r6,118(sp)
    a874:	303e5226 	beq	r6,zero,a1c0 <__alt_mem_onchip_memory2_0+0xf700a1c0>
    a878:	01800044 	movi	r6,1
    a87c:	d9001d84 	addi	r4,sp,118
    a880:	1185883a 	add	r2,r2,r6
    a884:	41000015 	stw	r4,0(r8)
    a888:	41800115 	stw	r6,4(r8)
    a88c:	d8801c15 	stw	r2,112(sp)
    a890:	d9401b15 	stw	r5,108(sp)
    a894:	010001c4 	movi	r4,7
    a898:	2140b00e 	bge	r4,r5,ab5c <___vfiprintf_internal_r+0xeac>
    a89c:	1000f61e 	bne	r2,zero,ac78 <___vfiprintf_internal_r+0xfc8>
    a8a0:	3800b31e 	bne	r7,zero,ab70 <___vfiprintf_internal_r+0xec0>
    a8a4:	0009883a 	mov	r4,zero
    a8a8:	300b883a 	mov	r5,r6
    a8ac:	d811883a 	mov	r8,sp
    a8b0:	01802004 	movi	r6,128
    a8b4:	19be5226 	beq	r3,r6,a200 <__alt_mem_onchip_memory2_0+0xf700a200>
    a8b8:	8521c83a 	sub	r16,r16,r20
    a8bc:	043e790e 	bge	zero,r16,a2a4 <__alt_mem_onchip_memory2_0+0xf700a2a4>
    a8c0:	05400404 	movi	r21,16
    a8c4:	ac01b00e 	bge	r21,r16,af88 <___vfiprintf_internal_r+0x12d8>
    a8c8:	01400074 	movhi	r5,1
    a8cc:	2948d904 	addi	r5,r5,9060
    a8d0:	d9402315 	stw	r5,140(sp)
    a8d4:	070001c4 	movi	fp,7
    a8d8:	00000506 	br	a8f0 <___vfiprintf_internal_r+0xc40>
    a8dc:	21400084 	addi	r5,r4,2
    a8e0:	42000204 	addi	r8,r8,8
    a8e4:	1809883a 	mov	r4,r3
    a8e8:	843ffc04 	addi	r16,r16,-16
    a8ec:	ac000d0e 	bge	r21,r16,a924 <___vfiprintf_internal_r+0xc74>
    a8f0:	10800404 	addi	r2,r2,16
    a8f4:	20c00044 	addi	r3,r4,1
    a8f8:	44800015 	stw	r18,0(r8)
    a8fc:	45400115 	stw	r21,4(r8)
    a900:	d8801c15 	stw	r2,112(sp)
    a904:	d8c01b15 	stw	r3,108(sp)
    a908:	e0fff40e 	bge	fp,r3,a8dc <__alt_mem_onchip_memory2_0+0xf700a8dc>
    a90c:	1000101e 	bne	r2,zero,a950 <___vfiprintf_internal_r+0xca0>
    a910:	843ffc04 	addi	r16,r16,-16
    a914:	01400044 	movi	r5,1
    a918:	0009883a 	mov	r4,zero
    a91c:	d811883a 	mov	r8,sp
    a920:	ac3ff316 	blt	r21,r16,a8f0 <__alt_mem_onchip_memory2_0+0xf700a8f0>
    a924:	d8c02317 	ldw	r3,140(sp)
    a928:	1405883a 	add	r2,r2,r16
    a92c:	44000115 	stw	r16,4(r8)
    a930:	40c00015 	stw	r3,0(r8)
    a934:	d8801c15 	stw	r2,112(sp)
    a938:	d9401b15 	stw	r5,108(sp)
    a93c:	00c001c4 	movi	r3,7
    a940:	19401916 	blt	r3,r5,a9a8 <___vfiprintf_internal_r+0xcf8>
    a944:	42000204 	addi	r8,r8,8
    a948:	29400044 	addi	r5,r5,1
    a94c:	003e5506 	br	a2a4 <__alt_mem_onchip_memory2_0+0xf700a2a4>
    a950:	d9402017 	ldw	r5,128(sp)
    a954:	d9002117 	ldw	r4,132(sp)
    a958:	d9801a04 	addi	r6,sp,104
    a95c:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    a960:	10000b1e 	bne	r2,zero,a990 <___vfiprintf_internal_r+0xce0>
    a964:	d9001b17 	ldw	r4,108(sp)
    a968:	d8801c17 	ldw	r2,112(sp)
    a96c:	d811883a 	mov	r8,sp
    a970:	21400044 	addi	r5,r4,1
    a974:	003fdc06 	br	a8e8 <__alt_mem_onchip_memory2_0+0xf700a8e8>
    a978:	d8801c17 	ldw	r2,112(sp)
    a97c:	10000426 	beq	r2,zero,a990 <___vfiprintf_internal_r+0xce0>
    a980:	d9402017 	ldw	r5,128(sp)
    a984:	d9002117 	ldw	r4,132(sp)
    a988:	d9801a04 	addi	r6,sp,104
    a98c:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    a990:	d9402017 	ldw	r5,128(sp)
    a994:	2880030b 	ldhu	r2,12(r5)
    a998:	1080100c 	andi	r2,r2,64
    a99c:	10014d1e 	bne	r2,zero,aed4 <___vfiprintf_internal_r+0x1224>
    a9a0:	d8802417 	ldw	r2,144(sp)
    a9a4:	003d9706 	br	a004 <__alt_mem_onchip_memory2_0+0xf700a004>
    a9a8:	1000d21e 	bne	r2,zero,acf4 <___vfiprintf_internal_r+0x1044>
    a9ac:	00c00044 	movi	r3,1
    a9b0:	a005883a 	mov	r2,r20
    a9b4:	ddc00015 	stw	r23,0(sp)
    a9b8:	dd000115 	stw	r20,4(sp)
    a9bc:	dd001c15 	stw	r20,112(sp)
    a9c0:	d8c01b15 	stw	r3,108(sp)
    a9c4:	d811883a 	mov	r8,sp
    a9c8:	42000204 	addi	r8,r8,8
    a9cc:	8c40010c 	andi	r17,r17,4
    a9d0:	88004026 	beq	r17,zero,aad4 <___vfiprintf_internal_r+0xe24>
    a9d4:	d9002517 	ldw	r4,148(sp)
    a9d8:	24e3c83a 	sub	r17,r4,r19
    a9dc:	04403d0e 	bge	zero,r17,aad4 <___vfiprintf_internal_r+0xe24>
    a9e0:	04000404 	movi	r16,16
    a9e4:	8441a90e 	bge	r16,r17,b08c <___vfiprintf_internal_r+0x13dc>
    a9e8:	00c00074 	movhi	r3,1
    a9ec:	18c8dd04 	addi	r3,r3,9076
    a9f0:	d9001b17 	ldw	r4,108(sp)
    a9f4:	d8c02315 	stw	r3,140(sp)
    a9f8:	050001c4 	movi	r20,7
    a9fc:	dd402117 	ldw	r21,132(sp)
    aa00:	ddc02017 	ldw	r23,128(sp)
    aa04:	00000506 	br	aa1c <___vfiprintf_internal_r+0xd6c>
    aa08:	21400084 	addi	r5,r4,2
    aa0c:	42000204 	addi	r8,r8,8
    aa10:	1809883a 	mov	r4,r3
    aa14:	8c7ffc04 	addi	r17,r17,-16
    aa18:	84400f0e 	bge	r16,r17,aa58 <___vfiprintf_internal_r+0xda8>
    aa1c:	01400074 	movhi	r5,1
    aa20:	10800404 	addi	r2,r2,16
    aa24:	20c00044 	addi	r3,r4,1
    aa28:	2948dd04 	addi	r5,r5,9076
    aa2c:	41400015 	stw	r5,0(r8)
    aa30:	44000115 	stw	r16,4(r8)
    aa34:	d8801c15 	stw	r2,112(sp)
    aa38:	d8c01b15 	stw	r3,108(sp)
    aa3c:	a0fff20e 	bge	r20,r3,aa08 <__alt_mem_onchip_memory2_0+0xf700aa08>
    aa40:	1000141e 	bne	r2,zero,aa94 <___vfiprintf_internal_r+0xde4>
    aa44:	8c7ffc04 	addi	r17,r17,-16
    aa48:	01400044 	movi	r5,1
    aa4c:	0009883a 	mov	r4,zero
    aa50:	d811883a 	mov	r8,sp
    aa54:	847ff116 	blt	r16,r17,aa1c <__alt_mem_onchip_memory2_0+0xf700aa1c>
    aa58:	d8c02317 	ldw	r3,140(sp)
    aa5c:	1445883a 	add	r2,r2,r17
    aa60:	44400115 	stw	r17,4(r8)
    aa64:	40c00015 	stw	r3,0(r8)
    aa68:	d8801c15 	stw	r2,112(sp)
    aa6c:	d9401b15 	stw	r5,108(sp)
    aa70:	00c001c4 	movi	r3,7
    aa74:	1940170e 	bge	r3,r5,aad4 <___vfiprintf_internal_r+0xe24>
    aa78:	1000101e 	bne	r2,zero,aabc <___vfiprintf_internal_r+0xe0c>
    aa7c:	d8802517 	ldw	r2,148(sp)
    aa80:	14c11616 	blt	r2,r19,aedc <___vfiprintf_internal_r+0x122c>
    aa84:	d9002417 	ldw	r4,144(sp)
    aa88:	2089883a 	add	r4,r4,r2
    aa8c:	d9002415 	stw	r4,144(sp)
    aa90:	003e1806 	br	a2f4 <__alt_mem_onchip_memory2_0+0xf700a2f4>
    aa94:	d9801a04 	addi	r6,sp,104
    aa98:	b80b883a 	mov	r5,r23
    aa9c:	a809883a 	mov	r4,r21
    aaa0:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    aaa4:	103fba1e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    aaa8:	d9001b17 	ldw	r4,108(sp)
    aaac:	d8801c17 	ldw	r2,112(sp)
    aab0:	d811883a 	mov	r8,sp
    aab4:	21400044 	addi	r5,r4,1
    aab8:	003fd606 	br	aa14 <__alt_mem_onchip_memory2_0+0xf700aa14>
    aabc:	d9402017 	ldw	r5,128(sp)
    aac0:	d9002117 	ldw	r4,132(sp)
    aac4:	d9801a04 	addi	r6,sp,104
    aac8:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    aacc:	103fb01e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    aad0:	d8801c17 	ldw	r2,112(sp)
    aad4:	d8c02517 	ldw	r3,148(sp)
    aad8:	1cc0010e 	bge	r3,r19,aae0 <___vfiprintf_internal_r+0xe30>
    aadc:	9807883a 	mov	r3,r19
    aae0:	d9002417 	ldw	r4,144(sp)
    aae4:	20c9883a 	add	r4,r4,r3
    aae8:	d9002415 	stw	r4,144(sp)
    aaec:	103e0126 	beq	r2,zero,a2f4 <__alt_mem_onchip_memory2_0+0xf700a2f4>
    aaf0:	d9402017 	ldw	r5,128(sp)
    aaf4:	d9002117 	ldw	r4,132(sp)
    aaf8:	d9801a04 	addi	r6,sp,104
    aafc:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ab00:	103dfc26 	beq	r2,zero,a2f4 <__alt_mem_onchip_memory2_0+0xf700a2f4>
    ab04:	003fa206 	br	a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ab08:	d9402017 	ldw	r5,128(sp)
    ab0c:	d9002117 	ldw	r4,132(sp)
    ab10:	d9801a04 	addi	r6,sp,104
    ab14:	d9c02b15 	stw	r7,172(sp)
    ab18:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ab1c:	d9c02b17 	ldw	r7,172(sp)
    ab20:	103f9b1e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ab24:	d9001b17 	ldw	r4,108(sp)
    ab28:	d8801c17 	ldw	r2,112(sp)
    ab2c:	d811883a 	mov	r8,sp
    ab30:	21800044 	addi	r6,r4,1
    ab34:	003dbf06 	br	a234 <__alt_mem_onchip_memory2_0+0xf700a234>
    ab38:	1000d81e 	bne	r2,zero,ae9c <___vfiprintf_internal_r+0x11ec>
    ab3c:	d9001d87 	ldb	r4,118(sp)
    ab40:	20000a26 	beq	r4,zero,ab6c <___vfiprintf_internal_r+0xebc>
    ab44:	00800044 	movi	r2,1
    ab48:	d9001d84 	addi	r4,sp,118
    ab4c:	100b883a 	mov	r5,r2
    ab50:	d9000015 	stw	r4,0(sp)
    ab54:	d8800115 	stw	r2,4(sp)
    ab58:	d811883a 	mov	r8,sp
    ab5c:	2809883a 	mov	r4,r5
    ab60:	42000204 	addi	r8,r8,8
    ab64:	29400044 	addi	r5,r5,1
    ab68:	003d9506 	br	a1c0 <__alt_mem_onchip_memory2_0+0xf700a1c0>
    ab6c:	3800fd26 	beq	r7,zero,af64 <___vfiprintf_internal_r+0x12b4>
    ab70:	00800084 	movi	r2,2
    ab74:	d9001d04 	addi	r4,sp,116
    ab78:	d9000015 	stw	r4,0(sp)
    ab7c:	d8800115 	stw	r2,4(sp)
    ab80:	01400044 	movi	r5,1
    ab84:	d811883a 	mov	r8,sp
    ab88:	2809883a 	mov	r4,r5
    ab8c:	42000204 	addi	r8,r8,8
    ab90:	29400044 	addi	r5,r5,1
    ab94:	003f4606 	br	a8b0 <__alt_mem_onchip_memory2_0+0xf700a8b0>
    ab98:	d8802517 	ldw	r2,148(sp)
    ab9c:	14c0010e 	bge	r2,r19,aba4 <___vfiprintf_internal_r+0xef4>
    aba0:	9805883a 	mov	r2,r19
    aba4:	d9402417 	ldw	r5,144(sp)
    aba8:	288b883a 	add	r5,r5,r2
    abac:	d9402415 	stw	r5,144(sp)
    abb0:	003dd006 	br	a2f4 <__alt_mem_onchip_memory2_0+0xf700a2f4>
    abb4:	d8001d85 	stb	zero,118(sp)
    abb8:	80005d16 	blt	r16,zero,ad30 <___vfiprintf_internal_r+0x1080>
    abbc:	00ffdfc4 	movi	r3,-129
    abc0:	9d04b03a 	or	r2,r19,r20
    abc4:	88e2703a 	and	r17,r17,r3
    abc8:	103d3726 	beq	r2,zero,a0a8 <__alt_mem_onchip_memory2_0+0xf700a0a8>
    abcc:	002b883a 	mov	r21,zero
    abd0:	d9002617 	ldw	r4,152(sp)
    abd4:	ddc01a04 	addi	r23,sp,104
    abd8:	988003cc 	andi	r2,r19,15
    abdc:	a006973a 	slli	r3,r20,28
    abe0:	2085883a 	add	r2,r4,r2
    abe4:	9826d13a 	srli	r19,r19,4
    abe8:	10800003 	ldbu	r2,0(r2)
    abec:	a028d13a 	srli	r20,r20,4
    abf0:	bdffffc4 	addi	r23,r23,-1
    abf4:	1ce6b03a 	or	r19,r3,r19
    abf8:	b8800005 	stb	r2,0(r23)
    abfc:	9d04b03a 	or	r2,r19,r20
    ac00:	103ff51e 	bne	r2,zero,abd8 <__alt_mem_onchip_memory2_0+0xf700abd8>
    ac04:	d8801e17 	ldw	r2,120(sp)
    ac08:	15e9c83a 	sub	r20,r2,r23
    ac0c:	003d2b06 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    ac10:	d9402017 	ldw	r5,128(sp)
    ac14:	d9002117 	ldw	r4,132(sp)
    ac18:	d9801a04 	addi	r6,sp,104
    ac1c:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ac20:	103f5b1e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ac24:	d8801c17 	ldw	r2,112(sp)
    ac28:	d811883a 	mov	r8,sp
    ac2c:	003f6706 	br	a9cc <__alt_mem_onchip_memory2_0+0xf700a9cc>
    ac30:	d9402017 	ldw	r5,128(sp)
    ac34:	d9002117 	ldw	r4,132(sp)
    ac38:	d9801a04 	addi	r6,sp,104
    ac3c:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ac40:	103f531e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ac44:	d811883a 	mov	r8,sp
    ac48:	003cd906 	br	9fb0 <__alt_mem_onchip_memory2_0+0xf7009fb0>
    ac4c:	10803fcc 	andi	r2,r2,255
    ac50:	1080201c 	xori	r2,r2,128
    ac54:	10bfe004 	addi	r2,r2,-128
    ac58:	00c00c04 	movi	r3,48
    ac5c:	10ffe926 	beq	r2,r3,ac04 <__alt_mem_onchip_memory2_0+0xf700ac04>
    ac60:	b8ffffc5 	stb	r3,-1(r23)
    ac64:	d8c01e17 	ldw	r3,120(sp)
    ac68:	b8bfffc4 	addi	r2,r23,-1
    ac6c:	102f883a 	mov	r23,r2
    ac70:	18a9c83a 	sub	r20,r3,r2
    ac74:	003d1106 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    ac78:	d9402017 	ldw	r5,128(sp)
    ac7c:	d9002117 	ldw	r4,132(sp)
    ac80:	d9801a04 	addi	r6,sp,104
    ac84:	d8c02a15 	stw	r3,168(sp)
    ac88:	d9c02b15 	stw	r7,172(sp)
    ac8c:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ac90:	d8c02a17 	ldw	r3,168(sp)
    ac94:	d9c02b17 	ldw	r7,172(sp)
    ac98:	103f3d1e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ac9c:	d9001b17 	ldw	r4,108(sp)
    aca0:	d8801c17 	ldw	r2,112(sp)
    aca4:	d811883a 	mov	r8,sp
    aca8:	21400044 	addi	r5,r4,1
    acac:	003d4406 	br	a1c0 <__alt_mem_onchip_memory2_0+0xf700a1c0>
    acb0:	d9402017 	ldw	r5,128(sp)
    acb4:	d9002117 	ldw	r4,132(sp)
    acb8:	d9801a04 	addi	r6,sp,104
    acbc:	d8c02a15 	stw	r3,168(sp)
    acc0:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    acc4:	d8c02a17 	ldw	r3,168(sp)
    acc8:	103f311e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    accc:	d9001b17 	ldw	r4,108(sp)
    acd0:	d8801c17 	ldw	r2,112(sp)
    acd4:	d811883a 	mov	r8,sp
    acd8:	21400044 	addi	r5,r4,1
    acdc:	003ef406 	br	a8b0 <__alt_mem_onchip_memory2_0+0xf700a8b0>
    ace0:	1000bd1e 	bne	r2,zero,afd8 <___vfiprintf_internal_r+0x1328>
    ace4:	01400044 	movi	r5,1
    ace8:	0009883a 	mov	r4,zero
    acec:	d811883a 	mov	r8,sp
    acf0:	003ef106 	br	a8b8 <__alt_mem_onchip_memory2_0+0xf700a8b8>
    acf4:	d9402017 	ldw	r5,128(sp)
    acf8:	d9002117 	ldw	r4,132(sp)
    acfc:	d9801a04 	addi	r6,sp,104
    ad00:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    ad04:	103f221e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    ad08:	d9401b17 	ldw	r5,108(sp)
    ad0c:	d8801c17 	ldw	r2,112(sp)
    ad10:	d811883a 	mov	r8,sp
    ad14:	29400044 	addi	r5,r5,1
    ad18:	003d6206 	br	a2a4 <__alt_mem_onchip_memory2_0+0xf700a2a4>
    ad1c:	01400074 	movhi	r5,1
    ad20:	29487804 	addi	r5,r5,8672
    ad24:	d9402615 	stw	r5,152(sp)
    ad28:	d8c02215 	stw	r3,136(sp)
    ad2c:	1023883a 	mov	r17,r2
    ad30:	9d04b03a 	or	r2,r19,r20
    ad34:	103fa51e 	bne	r2,zero,abcc <__alt_mem_onchip_memory2_0+0xf700abcc>
    ad38:	002b883a 	mov	r21,zero
    ad3c:	00800084 	movi	r2,2
    ad40:	003e4a06 	br	a66c <__alt_mem_onchip_memory2_0+0xf700a66c>
    ad44:	01400074 	movhi	r5,1
    ad48:	29487804 	addi	r5,r5,8672
    ad4c:	002b883a 	mov	r21,zero
    ad50:	d9402615 	stw	r5,152(sp)
    ad54:	003f9e06 	br	abd0 <__alt_mem_onchip_memory2_0+0xf700abd0>
    ad58:	d9402217 	ldw	r5,136(sp)
    ad5c:	d8001d85 	stb	zero,118(sp)
    ad60:	0029883a 	mov	r20,zero
    ad64:	28800104 	addi	r2,r5,4
    ad68:	2cc00017 	ldw	r19,0(r5)
    ad6c:	803e3a16 	blt	r16,zero,a658 <__alt_mem_onchip_memory2_0+0xf700a658>
    ad70:	00ffdfc4 	movi	r3,-129
    ad74:	d8802215 	stw	r2,136(sp)
    ad78:	88e2703a 	and	r17,r17,r3
    ad7c:	002b883a 	mov	r21,zero
    ad80:	983e9b26 	beq	r19,zero,a7f0 <__alt_mem_onchip_memory2_0+0xf700a7f0>
    ad84:	00800244 	movi	r2,9
    ad88:	14fdc936 	bltu	r2,r19,a4b0 <__alt_mem_onchip_memory2_0+0xf700a4b0>
    ad8c:	003e9a06 	br	a7f8 <__alt_mem_onchip_memory2_0+0xf700a7f8>
    ad90:	00800c04 	movi	r2,48
    ad94:	d8c01d45 	stb	r3,117(sp)
    ad98:	d8801d05 	stb	r2,116(sp)
    ad9c:	d8001d85 	stb	zero,118(sp)
    ada0:	88c00094 	ori	r3,r17,2
    ada4:	80009c16 	blt	r16,zero,b018 <___vfiprintf_internal_r+0x1368>
    ada8:	00bfdfc4 	movi	r2,-129
    adac:	88a2703a 	and	r17,r17,r2
    adb0:	8c400094 	ori	r17,r17,2
    adb4:	002b883a 	mov	r21,zero
    adb8:	003f8506 	br	abd0 <__alt_mem_onchip_memory2_0+0xf700abd0>
    adbc:	b029883a 	mov	r20,r22
    adc0:	003c0b06 	br	9df0 <__alt_mem_onchip_memory2_0+0xf7009df0>
    adc4:	04e7c83a 	sub	r19,zero,r19
    adc8:	05400b44 	movi	r21,45
    adcc:	9804c03a 	cmpne	r2,r19,zero
    add0:	0529c83a 	sub	r20,zero,r20
    add4:	dd401d85 	stb	r21,118(sp)
    add8:	a0a9c83a 	sub	r20,r20,r2
    addc:	80009716 	blt	r16,zero,b03c <___vfiprintf_internal_r+0x138c>
    ade0:	00bfdfc4 	movi	r2,-129
    ade4:	88a2703a 	and	r17,r17,r2
    ade8:	003db006 	br	a4ac <__alt_mem_onchip_memory2_0+0xf700a4ac>
    adec:	b0c00007 	ldb	r3,0(r22)
    adf0:	003c0c06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    adf4:	8880100c 	andi	r2,r17,64
    adf8:	d8001d85 	stb	zero,118(sp)
    adfc:	1000461e 	bne	r2,zero,af18 <___vfiprintf_internal_r+0x1268>
    ae00:	d9002217 	ldw	r4,136(sp)
    ae04:	0029883a 	mov	r20,zero
    ae08:	20800104 	addi	r2,r4,4
    ae0c:	24c00017 	ldw	r19,0(r4)
    ae10:	803df80e 	bge	r16,zero,a5f4 <__alt_mem_onchip_memory2_0+0xf700a5f4>
    ae14:	9d06b03a 	or	r3,r19,r20
    ae18:	d8802215 	stw	r2,136(sp)
    ae1c:	183d5e1e 	bne	r3,zero,a398 <__alt_mem_onchip_memory2_0+0xf700a398>
    ae20:	002b883a 	mov	r21,zero
    ae24:	0005883a 	mov	r2,zero
    ae28:	003e1006 	br	a66c <__alt_mem_onchip_memory2_0+0xf700a66c>
    ae2c:	8880040c 	andi	r2,r17,16
    ae30:	1000321e 	bne	r2,zero,aefc <___vfiprintf_internal_r+0x124c>
    ae34:	8c40100c 	andi	r17,r17,64
    ae38:	88008d26 	beq	r17,zero,b070 <___vfiprintf_internal_r+0x13c0>
    ae3c:	d9402217 	ldw	r5,136(sp)
    ae40:	d8c02417 	ldw	r3,144(sp)
    ae44:	28800017 	ldw	r2,0(r5)
    ae48:	29400104 	addi	r5,r5,4
    ae4c:	d9402215 	stw	r5,136(sp)
    ae50:	10c0000d 	sth	r3,0(r2)
    ae54:	003bca06 	br	9d80 <__alt_mem_onchip_memory2_0+0xf7009d80>
    ae58:	8880100c 	andi	r2,r17,64
    ae5c:	10003a26 	beq	r2,zero,af48 <___vfiprintf_internal_r+0x1298>
    ae60:	d8802217 	ldw	r2,136(sp)
    ae64:	14c0000f 	ldh	r19,0(r2)
    ae68:	10800104 	addi	r2,r2,4
    ae6c:	d8802215 	stw	r2,136(sp)
    ae70:	9829d7fa 	srai	r20,r19,31
    ae74:	a005883a 	mov	r2,r20
    ae78:	003d8506 	br	a490 <__alt_mem_onchip_memory2_0+0xf700a490>
    ae7c:	8880100c 	andi	r2,r17,64
    ae80:	10002b26 	beq	r2,zero,af30 <___vfiprintf_internal_r+0x1280>
    ae84:	d8802217 	ldw	r2,136(sp)
    ae88:	0029883a 	mov	r20,zero
    ae8c:	14c0000b 	ldhu	r19,0(r2)
    ae90:	10800104 	addi	r2,r2,4
    ae94:	d8802215 	stw	r2,136(sp)
    ae98:	003d5d06 	br	a410 <__alt_mem_onchip_memory2_0+0xf700a410>
    ae9c:	d9402017 	ldw	r5,128(sp)
    aea0:	d9002117 	ldw	r4,132(sp)
    aea4:	d9801a04 	addi	r6,sp,104
    aea8:	d8c02a15 	stw	r3,168(sp)
    aeac:	d9c02b15 	stw	r7,172(sp)
    aeb0:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    aeb4:	d8c02a17 	ldw	r3,168(sp)
    aeb8:	d9c02b17 	ldw	r7,172(sp)
    aebc:	103eb41e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    aec0:	d9001b17 	ldw	r4,108(sp)
    aec4:	d8801c17 	ldw	r2,112(sp)
    aec8:	d811883a 	mov	r8,sp
    aecc:	21400044 	addi	r5,r4,1
    aed0:	003e6706 	br	a870 <__alt_mem_onchip_memory2_0+0xf700a870>
    aed4:	00bfffc4 	movi	r2,-1
    aed8:	003c4a06 	br	a004 <__alt_mem_onchip_memory2_0+0xf700a004>
    aedc:	9805883a 	mov	r2,r19
    aee0:	003ee806 	br	aa84 <__alt_mem_onchip_memory2_0+0xf700aa84>
    aee4:	d8c02217 	ldw	r3,136(sp)
    aee8:	0029883a 	mov	r20,zero
    aeec:	18800104 	addi	r2,r3,4
    aef0:	1cc0000b 	ldhu	r19,0(r3)
    aef4:	803f9e0e 	bge	r16,zero,ad70 <__alt_mem_onchip_memory2_0+0xf700ad70>
    aef8:	003dd706 	br	a658 <__alt_mem_onchip_memory2_0+0xf700a658>
    aefc:	d8c02217 	ldw	r3,136(sp)
    af00:	d9002417 	ldw	r4,144(sp)
    af04:	18800017 	ldw	r2,0(r3)
    af08:	18c00104 	addi	r3,r3,4
    af0c:	d8c02215 	stw	r3,136(sp)
    af10:	11000015 	stw	r4,0(r2)
    af14:	003b9a06 	br	9d80 <__alt_mem_onchip_memory2_0+0xf7009d80>
    af18:	d8c02217 	ldw	r3,136(sp)
    af1c:	0029883a 	mov	r20,zero
    af20:	18800104 	addi	r2,r3,4
    af24:	1cc0000b 	ldhu	r19,0(r3)
    af28:	803db20e 	bge	r16,zero,a5f4 <__alt_mem_onchip_memory2_0+0xf700a5f4>
    af2c:	003fb906 	br	ae14 <__alt_mem_onchip_memory2_0+0xf700ae14>
    af30:	d9002217 	ldw	r4,136(sp)
    af34:	0029883a 	mov	r20,zero
    af38:	24c00017 	ldw	r19,0(r4)
    af3c:	21000104 	addi	r4,r4,4
    af40:	d9002215 	stw	r4,136(sp)
    af44:	003d3206 	br	a410 <__alt_mem_onchip_memory2_0+0xf700a410>
    af48:	d8c02217 	ldw	r3,136(sp)
    af4c:	1cc00017 	ldw	r19,0(r3)
    af50:	18c00104 	addi	r3,r3,4
    af54:	d8c02215 	stw	r3,136(sp)
    af58:	9829d7fa 	srai	r20,r19,31
    af5c:	a005883a 	mov	r2,r20
    af60:	003d4b06 	br	a490 <__alt_mem_onchip_memory2_0+0xf700a490>
    af64:	0009883a 	mov	r4,zero
    af68:	01400044 	movi	r5,1
    af6c:	d811883a 	mov	r8,sp
    af70:	003e4f06 	br	a8b0 <__alt_mem_onchip_memory2_0+0xf700a8b0>
    af74:	d8c02215 	stw	r3,136(sp)
    af78:	002b883a 	mov	r21,zero
    af7c:	003db806 	br	a660 <__alt_mem_onchip_memory2_0+0xf700a660>
    af80:	d811883a 	mov	r8,sp
    af84:	003e9606 	br	a9e0 <__alt_mem_onchip_memory2_0+0xf700a9e0>
    af88:	01000074 	movhi	r4,1
    af8c:	2108d904 	addi	r4,r4,9060
    af90:	d9002315 	stw	r4,140(sp)
    af94:	003e6306 	br	a924 <__alt_mem_onchip_memory2_0+0xf700a924>
    af98:	b0c00043 	ldbu	r3,1(r22)
    af9c:	8c400814 	ori	r17,r17,32
    afa0:	b5800044 	addi	r22,r22,1
    afa4:	18c03fcc 	andi	r3,r3,255
    afa8:	18c0201c 	xori	r3,r3,128
    afac:	18ffe004 	addi	r3,r3,-128
    afb0:	003b9c06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    afb4:	b809883a 	mov	r4,r23
    afb8:	da002a15 	stw	r8,168(sp)
    afbc:	00024200 	call	2420 <strlen>
    afc0:	1029883a 	mov	r20,r2
    afc4:	dd401d83 	ldbu	r21,118(sp)
    afc8:	df002215 	stw	fp,136(sp)
    afcc:	0021883a 	mov	r16,zero
    afd0:	da002a17 	ldw	r8,168(sp)
    afd4:	003c3906 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    afd8:	d9402017 	ldw	r5,128(sp)
    afdc:	d9002117 	ldw	r4,132(sp)
    afe0:	d9801a04 	addi	r6,sp,104
    afe4:	0009b9c0 	call	9b9c <__sprint_r.part.0>
    afe8:	103e691e 	bne	r2,zero,a990 <__alt_mem_onchip_memory2_0+0xf700a990>
    afec:	d9001b17 	ldw	r4,108(sp)
    aff0:	d8801c17 	ldw	r2,112(sp)
    aff4:	d811883a 	mov	r8,sp
    aff8:	21400044 	addi	r5,r4,1
    affc:	003e2e06 	br	a8b8 <__alt_mem_onchip_memory2_0+0xf700a8b8>
    b000:	01000074 	movhi	r4,1
    b004:	2108dd04 	addi	r4,r4,9076
    b008:	d9002315 	stw	r4,140(sp)
    b00c:	d9001b17 	ldw	r4,108(sp)
    b010:	21000044 	addi	r4,r4,1
    b014:	003c5e06 	br	a190 <__alt_mem_onchip_memory2_0+0xf700a190>
    b018:	002b883a 	mov	r21,zero
    b01c:	00800084 	movi	r2,2
    b020:	10803fcc 	andi	r2,r2,255
    b024:	01000044 	movi	r4,1
    b028:	11002b26 	beq	r2,r4,b0d8 <___vfiprintf_internal_r+0x1428>
    b02c:	01000084 	movi	r4,2
    b030:	11002b1e 	bne	r2,r4,b0e0 <___vfiprintf_internal_r+0x1430>
    b034:	1823883a 	mov	r17,r3
    b038:	003ee506 	br	abd0 <__alt_mem_onchip_memory2_0+0xf700abd0>
    b03c:	8807883a 	mov	r3,r17
    b040:	00800044 	movi	r2,1
    b044:	003ff606 	br	b020 <__alt_mem_onchip_memory2_0+0xf700b020>
    b048:	00800184 	movi	r2,6
    b04c:	1400012e 	bgeu	r2,r16,b054 <___vfiprintf_internal_r+0x13a4>
    b050:	1021883a 	mov	r16,r2
    b054:	8029883a 	mov	r20,r16
    b058:	8027883a 	mov	r19,r16
    b05c:	80002216 	blt	r16,zero,b0e8 <___vfiprintf_internal_r+0x1438>
    b060:	05c00074 	movhi	r23,1
    b064:	df002215 	stw	fp,136(sp)
    b068:	bdc87d04 	addi	r23,r23,8692
    b06c:	003cfb06 	br	a45c <__alt_mem_onchip_memory2_0+0xf700a45c>
    b070:	d9002217 	ldw	r4,136(sp)
    b074:	d9402417 	ldw	r5,144(sp)
    b078:	20800017 	ldw	r2,0(r4)
    b07c:	21000104 	addi	r4,r4,4
    b080:	d9002215 	stw	r4,136(sp)
    b084:	11400015 	stw	r5,0(r2)
    b088:	003b3d06 	br	9d80 <__alt_mem_onchip_memory2_0+0xf7009d80>
    b08c:	01400074 	movhi	r5,1
    b090:	2948dd04 	addi	r5,r5,9076
    b094:	d9402315 	stw	r5,140(sp)
    b098:	d9401b17 	ldw	r5,108(sp)
    b09c:	29400044 	addi	r5,r5,1
    b0a0:	003e6d06 	br	aa58 <__alt_mem_onchip_memory2_0+0xf700aa58>
    b0a4:	8029883a 	mov	r20,r16
    b0a8:	dd401d83 	ldbu	r21,118(sp)
    b0ac:	df002215 	stw	fp,136(sp)
    b0b0:	0021883a 	mov	r16,zero
    b0b4:	003c0106 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    b0b8:	00c00074 	movhi	r3,1
    b0bc:	18c8d904 	addi	r3,r3,9060
    b0c0:	d8c02315 	stw	r3,140(sp)
    b0c4:	280d883a 	mov	r6,r5
    b0c8:	003c6906 	br	a270 <__alt_mem_onchip_memory2_0+0xf700a270>
    b0cc:	802d883a 	mov	r22,r16
    b0d0:	0021883a 	mov	r16,zero
    b0d4:	003b5406 	br	9e28 <__alt_mem_onchip_memory2_0+0xf7009e28>
    b0d8:	1823883a 	mov	r17,r3
    b0dc:	003cf306 	br	a4ac <__alt_mem_onchip_memory2_0+0xf700a4ac>
    b0e0:	1823883a 	mov	r17,r3
    b0e4:	003cad06 	br	a39c <__alt_mem_onchip_memory2_0+0xf700a39c>
    b0e8:	0027883a 	mov	r19,zero
    b0ec:	003fdc06 	br	b060 <__alt_mem_onchip_memory2_0+0xf700b060>
    b0f0:	d9402217 	ldw	r5,136(sp)
    b0f4:	8005883a 	mov	r2,r16
    b0f8:	b0c00043 	ldbu	r3,1(r22)
    b0fc:	2c000017 	ldw	r16,0(r5)
    b100:	29000104 	addi	r4,r5,4
    b104:	d9002215 	stw	r4,136(sp)
    b108:	102d883a 	mov	r22,r2
    b10c:	803fa50e 	bge	r16,zero,afa4 <__alt_mem_onchip_memory2_0+0xf700afa4>
    b110:	18c03fcc 	andi	r3,r3,255
    b114:	18c0201c 	xori	r3,r3,128
    b118:	043fffc4 	movi	r16,-1
    b11c:	18ffe004 	addi	r3,r3,-128
    b120:	003b4006 	br	9e24 <__alt_mem_onchip_memory2_0+0xf7009e24>
    b124:	d9402303 	ldbu	r5,140(sp)
    b128:	d9401d85 	stb	r5,118(sp)
    b12c:	003cae06 	br	a3e8 <__alt_mem_onchip_memory2_0+0xf700a3e8>
    b130:	d8c02303 	ldbu	r3,140(sp)
    b134:	d8c01d85 	stb	r3,118(sp)
    b138:	003d1406 	br	a58c <__alt_mem_onchip_memory2_0+0xf700a58c>
    b13c:	d8c02303 	ldbu	r3,140(sp)
    b140:	d8c01d85 	stb	r3,118(sp)
    b144:	003cca06 	br	a470 <__alt_mem_onchip_memory2_0+0xf700a470>
    b148:	8880004c 	andi	r2,r17,1
    b14c:	002b883a 	mov	r21,zero
    b150:	10000526 	beq	r2,zero,b168 <___vfiprintf_internal_r+0x14b8>
    b154:	00800c04 	movi	r2,48
    b158:	d88019c5 	stb	r2,103(sp)
    b15c:	dd002817 	ldw	r20,160(sp)
    b160:	ddc019c4 	addi	r23,sp,103
    b164:	003bd506 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    b168:	0029883a 	mov	r20,zero
    b16c:	ddc01a04 	addi	r23,sp,104
    b170:	003bd206 	br	a0bc <__alt_mem_onchip_memory2_0+0xf700a0bc>
    b174:	d9002303 	ldbu	r4,140(sp)
    b178:	d9001d85 	stb	r4,118(sp)
    b17c:	003da606 	br	a818 <__alt_mem_onchip_memory2_0+0xf700a818>
    b180:	d8c02303 	ldbu	r3,140(sp)
    b184:	d8c01d85 	stb	r3,118(sp)
    b188:	003c7606 	br	a364 <__alt_mem_onchip_memory2_0+0xf700a364>
    b18c:	d8c02303 	ldbu	r3,140(sp)
    b190:	d8c01d85 	stb	r3,118(sp)
    b194:	003c6506 	br	a32c <__alt_mem_onchip_memory2_0+0xf700a32c>
    b198:	d9002303 	ldbu	r4,140(sp)
    b19c:	d9001d85 	stb	r4,118(sp)
    b1a0:	003d3d06 	br	a698 <__alt_mem_onchip_memory2_0+0xf700a698>
    b1a4:	d8c02303 	ldbu	r3,140(sp)
    b1a8:	d8c01d85 	stb	r3,118(sp)
    b1ac:	003d1d06 	br	a624 <__alt_mem_onchip_memory2_0+0xf700a624>
    b1b0:	d8c02303 	ldbu	r3,140(sp)
    b1b4:	d8c01d85 	stb	r3,118(sp)
    b1b8:	003d0306 	br	a5c8 <__alt_mem_onchip_memory2_0+0xf700a5c8>

0000b1bc <__vfiprintf_internal>:
    b1bc:	00800074 	movhi	r2,1
    b1c0:	108fda04 	addi	r2,r2,16232
    b1c4:	300f883a 	mov	r7,r6
    b1c8:	280d883a 	mov	r6,r5
    b1cc:	200b883a 	mov	r5,r4
    b1d0:	11000017 	ldw	r4,0(r2)
    b1d4:	0009cb01 	jmpi	9cb0 <___vfiprintf_internal_r>

0000b1d8 <__sbprintf>:
    b1d8:	2880030b 	ldhu	r2,12(r5)
    b1dc:	2ac01917 	ldw	r11,100(r5)
    b1e0:	2a80038b 	ldhu	r10,14(r5)
    b1e4:	2a400717 	ldw	r9,28(r5)
    b1e8:	2a000917 	ldw	r8,36(r5)
    b1ec:	defee204 	addi	sp,sp,-1144
    b1f0:	00c10004 	movi	r3,1024
    b1f4:	dc011a15 	stw	r16,1128(sp)
    b1f8:	10bfff4c 	andi	r2,r2,65533
    b1fc:	2821883a 	mov	r16,r5
    b200:	d8cb883a 	add	r5,sp,r3
    b204:	dc811c15 	stw	r18,1136(sp)
    b208:	dc411b15 	stw	r17,1132(sp)
    b20c:	dfc11d15 	stw	ra,1140(sp)
    b210:	2025883a 	mov	r18,r4
    b214:	d881030d 	sth	r2,1036(sp)
    b218:	dac11915 	stw	r11,1124(sp)
    b21c:	da81038d 	sth	r10,1038(sp)
    b220:	da410715 	stw	r9,1052(sp)
    b224:	da010915 	stw	r8,1060(sp)
    b228:	dec10015 	stw	sp,1024(sp)
    b22c:	dec10415 	stw	sp,1040(sp)
    b230:	d8c10215 	stw	r3,1032(sp)
    b234:	d8c10515 	stw	r3,1044(sp)
    b238:	d8010615 	stw	zero,1048(sp)
    b23c:	0009cb00 	call	9cb0 <___vfiprintf_internal_r>
    b240:	1023883a 	mov	r17,r2
    b244:	10000416 	blt	r2,zero,b258 <__sbprintf+0x80>
    b248:	d9410004 	addi	r5,sp,1024
    b24c:	9009883a 	mov	r4,r18
    b250:	000648c0 	call	648c <_fflush_r>
    b254:	10000d1e 	bne	r2,zero,b28c <__sbprintf+0xb4>
    b258:	d881030b 	ldhu	r2,1036(sp)
    b25c:	1080100c 	andi	r2,r2,64
    b260:	10000326 	beq	r2,zero,b270 <__sbprintf+0x98>
    b264:	8080030b 	ldhu	r2,12(r16)
    b268:	10801014 	ori	r2,r2,64
    b26c:	8080030d 	sth	r2,12(r16)
    b270:	8805883a 	mov	r2,r17
    b274:	dfc11d17 	ldw	ra,1140(sp)
    b278:	dc811c17 	ldw	r18,1136(sp)
    b27c:	dc411b17 	ldw	r17,1132(sp)
    b280:	dc011a17 	ldw	r16,1128(sp)
    b284:	dec11e04 	addi	sp,sp,1144
    b288:	f800283a 	ret
    b28c:	047fffc4 	movi	r17,-1
    b290:	003ff106 	br	b258 <__alt_mem_onchip_memory2_0+0xf700b258>

0000b294 <_write_r>:
    b294:	defffd04 	addi	sp,sp,-12
    b298:	2805883a 	mov	r2,r5
    b29c:	dc000015 	stw	r16,0(sp)
    b2a0:	04000074 	movhi	r16,1
    b2a4:	dc400115 	stw	r17,4(sp)
    b2a8:	300b883a 	mov	r5,r6
    b2ac:	8416ab04 	addi	r16,r16,23212
    b2b0:	2023883a 	mov	r17,r4
    b2b4:	380d883a 	mov	r6,r7
    b2b8:	1009883a 	mov	r4,r2
    b2bc:	dfc00215 	stw	ra,8(sp)
    b2c0:	80000015 	stw	zero,0(r16)
    b2c4:	000fae40 	call	fae4 <write>
    b2c8:	00ffffc4 	movi	r3,-1
    b2cc:	10c00526 	beq	r2,r3,b2e4 <_write_r+0x50>
    b2d0:	dfc00217 	ldw	ra,8(sp)
    b2d4:	dc400117 	ldw	r17,4(sp)
    b2d8:	dc000017 	ldw	r16,0(sp)
    b2dc:	dec00304 	addi	sp,sp,12
    b2e0:	f800283a 	ret
    b2e4:	80c00017 	ldw	r3,0(r16)
    b2e8:	183ff926 	beq	r3,zero,b2d0 <__alt_mem_onchip_memory2_0+0xf700b2d0>
    b2ec:	88c00015 	stw	r3,0(r17)
    b2f0:	003ff706 	br	b2d0 <__alt_mem_onchip_memory2_0+0xf700b2d0>

0000b2f4 <_close_r>:
    b2f4:	defffd04 	addi	sp,sp,-12
    b2f8:	dc000015 	stw	r16,0(sp)
    b2fc:	04000074 	movhi	r16,1
    b300:	dc400115 	stw	r17,4(sp)
    b304:	8416ab04 	addi	r16,r16,23212
    b308:	2023883a 	mov	r17,r4
    b30c:	2809883a 	mov	r4,r5
    b310:	dfc00215 	stw	ra,8(sp)
    b314:	80000015 	stw	zero,0(r16)
    b318:	000f25c0 	call	f25c <close>
    b31c:	00ffffc4 	movi	r3,-1
    b320:	10c00526 	beq	r2,r3,b338 <_close_r+0x44>
    b324:	dfc00217 	ldw	ra,8(sp)
    b328:	dc400117 	ldw	r17,4(sp)
    b32c:	dc000017 	ldw	r16,0(sp)
    b330:	dec00304 	addi	sp,sp,12
    b334:	f800283a 	ret
    b338:	80c00017 	ldw	r3,0(r16)
    b33c:	183ff926 	beq	r3,zero,b324 <__alt_mem_onchip_memory2_0+0xf700b324>
    b340:	88c00015 	stw	r3,0(r17)
    b344:	003ff706 	br	b324 <__alt_mem_onchip_memory2_0+0xf700b324>

0000b348 <_calloc_r>:
    b348:	defffe04 	addi	sp,sp,-8
    b34c:	2805883a 	mov	r2,r5
    b350:	dc000015 	stw	r16,0(sp)
    b354:	300b883a 	mov	r5,r6
    b358:	2021883a 	mov	r16,r4
    b35c:	1009883a 	mov	r4,r2
    b360:	dfc00115 	stw	ra,4(sp)
    b364:	000c9540 	call	c954 <__mulsi3>
    b368:	100b883a 	mov	r5,r2
    b36c:	8009883a 	mov	r4,r16
    b370:	00075e40 	call	75e4 <_malloc_r>
    b374:	10002926 	beq	r2,zero,b41c <_calloc_r+0xd4>
    b378:	11bfff17 	ldw	r6,-4(r2)
    b37c:	1021883a 	mov	r16,r2
    b380:	00bfff04 	movi	r2,-4
    b384:	308c703a 	and	r6,r6,r2
    b388:	00c00904 	movi	r3,36
    b38c:	308d883a 	add	r6,r6,r2
    b390:	19801636 	bltu	r3,r6,b3ec <_calloc_r+0xa4>
    b394:	008004c4 	movi	r2,19
    b398:	11800b2e 	bgeu	r2,r6,b3c8 <_calloc_r+0x80>
    b39c:	80000015 	stw	zero,0(r16)
    b3a0:	80000115 	stw	zero,4(r16)
    b3a4:	008006c4 	movi	r2,27
    b3a8:	11801a2e 	bgeu	r2,r6,b414 <_calloc_r+0xcc>
    b3ac:	80000215 	stw	zero,8(r16)
    b3b0:	80000315 	stw	zero,12(r16)
    b3b4:	30c0151e 	bne	r6,r3,b40c <_calloc_r+0xc4>
    b3b8:	80000415 	stw	zero,16(r16)
    b3bc:	80800604 	addi	r2,r16,24
    b3c0:	80000515 	stw	zero,20(r16)
    b3c4:	00000106 	br	b3cc <_calloc_r+0x84>
    b3c8:	8005883a 	mov	r2,r16
    b3cc:	10000015 	stw	zero,0(r2)
    b3d0:	10000115 	stw	zero,4(r2)
    b3d4:	10000215 	stw	zero,8(r2)
    b3d8:	8005883a 	mov	r2,r16
    b3dc:	dfc00117 	ldw	ra,4(sp)
    b3e0:	dc000017 	ldw	r16,0(sp)
    b3e4:	dec00204 	addi	sp,sp,8
    b3e8:	f800283a 	ret
    b3ec:	000b883a 	mov	r5,zero
    b3f0:	8009883a 	mov	r4,r16
    b3f4:	00081780 	call	8178 <memset>
    b3f8:	8005883a 	mov	r2,r16
    b3fc:	dfc00117 	ldw	ra,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00204 	addi	sp,sp,8
    b408:	f800283a 	ret
    b40c:	80800404 	addi	r2,r16,16
    b410:	003fee06 	br	b3cc <__alt_mem_onchip_memory2_0+0xf700b3cc>
    b414:	80800204 	addi	r2,r16,8
    b418:	003fec06 	br	b3cc <__alt_mem_onchip_memory2_0+0xf700b3cc>
    b41c:	0005883a 	mov	r2,zero
    b420:	003fee06 	br	b3dc <__alt_mem_onchip_memory2_0+0xf700b3dc>

0000b424 <_fclose_r>:
    b424:	28003926 	beq	r5,zero,b50c <_fclose_r+0xe8>
    b428:	defffc04 	addi	sp,sp,-16
    b42c:	dc400115 	stw	r17,4(sp)
    b430:	dc000015 	stw	r16,0(sp)
    b434:	dfc00315 	stw	ra,12(sp)
    b438:	dc800215 	stw	r18,8(sp)
    b43c:	2023883a 	mov	r17,r4
    b440:	2821883a 	mov	r16,r5
    b444:	20000226 	beq	r4,zero,b450 <_fclose_r+0x2c>
    b448:	20800e17 	ldw	r2,56(r4)
    b44c:	10002726 	beq	r2,zero,b4ec <_fclose_r+0xc8>
    b450:	8080030f 	ldh	r2,12(r16)
    b454:	1000071e 	bne	r2,zero,b474 <_fclose_r+0x50>
    b458:	0005883a 	mov	r2,zero
    b45c:	dfc00317 	ldw	ra,12(sp)
    b460:	dc800217 	ldw	r18,8(sp)
    b464:	dc400117 	ldw	r17,4(sp)
    b468:	dc000017 	ldw	r16,0(sp)
    b46c:	dec00404 	addi	sp,sp,16
    b470:	f800283a 	ret
    b474:	800b883a 	mov	r5,r16
    b478:	8809883a 	mov	r4,r17
    b47c:	00062700 	call	6270 <__sflush_r>
    b480:	1025883a 	mov	r18,r2
    b484:	80800b17 	ldw	r2,44(r16)
    b488:	10000426 	beq	r2,zero,b49c <_fclose_r+0x78>
    b48c:	81400717 	ldw	r5,28(r16)
    b490:	8809883a 	mov	r4,r17
    b494:	103ee83a 	callr	r2
    b498:	10001616 	blt	r2,zero,b4f4 <_fclose_r+0xd0>
    b49c:	8080030b 	ldhu	r2,12(r16)
    b4a0:	1080200c 	andi	r2,r2,128
    b4a4:	1000151e 	bne	r2,zero,b4fc <_fclose_r+0xd8>
    b4a8:	81400c17 	ldw	r5,48(r16)
    b4ac:	28000526 	beq	r5,zero,b4c4 <_fclose_r+0xa0>
    b4b0:	80801004 	addi	r2,r16,64
    b4b4:	28800226 	beq	r5,r2,b4c0 <_fclose_r+0x9c>
    b4b8:	8809883a 	mov	r4,r17
    b4bc:	00069ec0 	call	69ec <_free_r>
    b4c0:	80000c15 	stw	zero,48(r16)
    b4c4:	81401117 	ldw	r5,68(r16)
    b4c8:	28000326 	beq	r5,zero,b4d8 <_fclose_r+0xb4>
    b4cc:	8809883a 	mov	r4,r17
    b4d0:	00069ec0 	call	69ec <_free_r>
    b4d4:	80001115 	stw	zero,68(r16)
    b4d8:	00068880 	call	6888 <__sfp_lock_acquire>
    b4dc:	8000030d 	sth	zero,12(r16)
    b4e0:	000688c0 	call	688c <__sfp_lock_release>
    b4e4:	9005883a 	mov	r2,r18
    b4e8:	003fdc06 	br	b45c <__alt_mem_onchip_memory2_0+0xf700b45c>
    b4ec:	00068780 	call	6878 <__sinit>
    b4f0:	003fd706 	br	b450 <__alt_mem_onchip_memory2_0+0xf700b450>
    b4f4:	04bfffc4 	movi	r18,-1
    b4f8:	003fe806 	br	b49c <__alt_mem_onchip_memory2_0+0xf700b49c>
    b4fc:	81400417 	ldw	r5,16(r16)
    b500:	8809883a 	mov	r4,r17
    b504:	00069ec0 	call	69ec <_free_r>
    b508:	003fe706 	br	b4a8 <__alt_mem_onchip_memory2_0+0xf700b4a8>
    b50c:	0005883a 	mov	r2,zero
    b510:	f800283a 	ret

0000b514 <fclose>:
    b514:	00800074 	movhi	r2,1
    b518:	108fda04 	addi	r2,r2,16232
    b51c:	200b883a 	mov	r5,r4
    b520:	11000017 	ldw	r4,0(r2)
    b524:	000b4241 	jmpi	b424 <_fclose_r>

0000b528 <__fputwc>:
    b528:	defff804 	addi	sp,sp,-32
    b52c:	dcc00415 	stw	r19,16(sp)
    b530:	dc800315 	stw	r18,12(sp)
    b534:	dc000115 	stw	r16,4(sp)
    b538:	dfc00715 	stw	ra,28(sp)
    b53c:	dd400615 	stw	r21,24(sp)
    b540:	dd000515 	stw	r20,20(sp)
    b544:	dc400215 	stw	r17,8(sp)
    b548:	2027883a 	mov	r19,r4
    b54c:	2825883a 	mov	r18,r5
    b550:	3021883a 	mov	r16,r6
    b554:	00073d40 	call	73d4 <__locale_mb_cur_max>
    b558:	00c00044 	movi	r3,1
    b55c:	10c03e26 	beq	r2,r3,b658 <__fputwc+0x130>
    b560:	81c01704 	addi	r7,r16,92
    b564:	900d883a 	mov	r6,r18
    b568:	d80b883a 	mov	r5,sp
    b56c:	9809883a 	mov	r4,r19
    b570:	000b9f80 	call	b9f8 <_wcrtomb_r>
    b574:	1029883a 	mov	r20,r2
    b578:	00bfffc4 	movi	r2,-1
    b57c:	a0802026 	beq	r20,r2,b600 <__fputwc+0xd8>
    b580:	d9400003 	ldbu	r5,0(sp)
    b584:	a0001c26 	beq	r20,zero,b5f8 <__fputwc+0xd0>
    b588:	0023883a 	mov	r17,zero
    b58c:	05400284 	movi	r21,10
    b590:	00000906 	br	b5b8 <__fputwc+0x90>
    b594:	80800017 	ldw	r2,0(r16)
    b598:	11400005 	stb	r5,0(r2)
    b59c:	80c00017 	ldw	r3,0(r16)
    b5a0:	18c00044 	addi	r3,r3,1
    b5a4:	80c00015 	stw	r3,0(r16)
    b5a8:	8c400044 	addi	r17,r17,1
    b5ac:	dc45883a 	add	r2,sp,r17
    b5b0:	8d00112e 	bgeu	r17,r20,b5f8 <__fputwc+0xd0>
    b5b4:	11400003 	ldbu	r5,0(r2)
    b5b8:	80c00217 	ldw	r3,8(r16)
    b5bc:	18ffffc4 	addi	r3,r3,-1
    b5c0:	80c00215 	stw	r3,8(r16)
    b5c4:	183ff30e 	bge	r3,zero,b594 <__alt_mem_onchip_memory2_0+0xf700b594>
    b5c8:	80800617 	ldw	r2,24(r16)
    b5cc:	18801916 	blt	r3,r2,b634 <__fputwc+0x10c>
    b5d0:	80800017 	ldw	r2,0(r16)
    b5d4:	11400005 	stb	r5,0(r2)
    b5d8:	80800017 	ldw	r2,0(r16)
    b5dc:	10c00003 	ldbu	r3,0(r2)
    b5e0:	10800044 	addi	r2,r2,1
    b5e4:	1d402326 	beq	r3,r21,b674 <__fputwc+0x14c>
    b5e8:	80800015 	stw	r2,0(r16)
    b5ec:	8c400044 	addi	r17,r17,1
    b5f0:	dc45883a 	add	r2,sp,r17
    b5f4:	8d3fef36 	bltu	r17,r20,b5b4 <__alt_mem_onchip_memory2_0+0xf700b5b4>
    b5f8:	9005883a 	mov	r2,r18
    b5fc:	00000406 	br	b610 <__fputwc+0xe8>
    b600:	80c0030b 	ldhu	r3,12(r16)
    b604:	a005883a 	mov	r2,r20
    b608:	18c01014 	ori	r3,r3,64
    b60c:	80c0030d 	sth	r3,12(r16)
    b610:	dfc00717 	ldw	ra,28(sp)
    b614:	dd400617 	ldw	r21,24(sp)
    b618:	dd000517 	ldw	r20,20(sp)
    b61c:	dcc00417 	ldw	r19,16(sp)
    b620:	dc800317 	ldw	r18,12(sp)
    b624:	dc400217 	ldw	r17,8(sp)
    b628:	dc000117 	ldw	r16,4(sp)
    b62c:	dec00804 	addi	sp,sp,32
    b630:	f800283a 	ret
    b634:	800d883a 	mov	r6,r16
    b638:	29403fcc 	andi	r5,r5,255
    b63c:	9809883a 	mov	r4,r19
    b640:	000b8a00 	call	b8a0 <__swbuf_r>
    b644:	10bfffe0 	cmpeqi	r2,r2,-1
    b648:	10803fcc 	andi	r2,r2,255
    b64c:	103fd626 	beq	r2,zero,b5a8 <__alt_mem_onchip_memory2_0+0xf700b5a8>
    b650:	00bfffc4 	movi	r2,-1
    b654:	003fee06 	br	b610 <__alt_mem_onchip_memory2_0+0xf700b610>
    b658:	90ffffc4 	addi	r3,r18,-1
    b65c:	01003f84 	movi	r4,254
    b660:	20ffbf36 	bltu	r4,r3,b560 <__alt_mem_onchip_memory2_0+0xf700b560>
    b664:	900b883a 	mov	r5,r18
    b668:	dc800005 	stb	r18,0(sp)
    b66c:	1029883a 	mov	r20,r2
    b670:	003fc506 	br	b588 <__alt_mem_onchip_memory2_0+0xf700b588>
    b674:	800d883a 	mov	r6,r16
    b678:	a80b883a 	mov	r5,r21
    b67c:	9809883a 	mov	r4,r19
    b680:	000b8a00 	call	b8a0 <__swbuf_r>
    b684:	10bfffe0 	cmpeqi	r2,r2,-1
    b688:	003fef06 	br	b648 <__alt_mem_onchip_memory2_0+0xf700b648>

0000b68c <_fputwc_r>:
    b68c:	3080030b 	ldhu	r2,12(r6)
    b690:	10c8000c 	andi	r3,r2,8192
    b694:	1800051e 	bne	r3,zero,b6ac <_fputwc_r+0x20>
    b698:	30c01917 	ldw	r3,100(r6)
    b69c:	10880014 	ori	r2,r2,8192
    b6a0:	3080030d 	sth	r2,12(r6)
    b6a4:	18880014 	ori	r2,r3,8192
    b6a8:	30801915 	stw	r2,100(r6)
    b6ac:	000b5281 	jmpi	b528 <__fputwc>

0000b6b0 <fputwc>:
    b6b0:	00800074 	movhi	r2,1
    b6b4:	defffc04 	addi	sp,sp,-16
    b6b8:	108fda04 	addi	r2,r2,16232
    b6bc:	dc000115 	stw	r16,4(sp)
    b6c0:	14000017 	ldw	r16,0(r2)
    b6c4:	dc400215 	stw	r17,8(sp)
    b6c8:	dfc00315 	stw	ra,12(sp)
    b6cc:	2023883a 	mov	r17,r4
    b6d0:	80000226 	beq	r16,zero,b6dc <fputwc+0x2c>
    b6d4:	80800e17 	ldw	r2,56(r16)
    b6d8:	10001026 	beq	r2,zero,b71c <fputwc+0x6c>
    b6dc:	2880030b 	ldhu	r2,12(r5)
    b6e0:	10c8000c 	andi	r3,r2,8192
    b6e4:	1800051e 	bne	r3,zero,b6fc <fputwc+0x4c>
    b6e8:	28c01917 	ldw	r3,100(r5)
    b6ec:	10880014 	ori	r2,r2,8192
    b6f0:	2880030d 	sth	r2,12(r5)
    b6f4:	18880014 	ori	r2,r3,8192
    b6f8:	28801915 	stw	r2,100(r5)
    b6fc:	280d883a 	mov	r6,r5
    b700:	8009883a 	mov	r4,r16
    b704:	880b883a 	mov	r5,r17
    b708:	dfc00317 	ldw	ra,12(sp)
    b70c:	dc400217 	ldw	r17,8(sp)
    b710:	dc000117 	ldw	r16,4(sp)
    b714:	dec00404 	addi	sp,sp,16
    b718:	000b5281 	jmpi	b528 <__fputwc>
    b71c:	8009883a 	mov	r4,r16
    b720:	d9400015 	stw	r5,0(sp)
    b724:	00068780 	call	6878 <__sinit>
    b728:	d9400017 	ldw	r5,0(sp)
    b72c:	003feb06 	br	b6dc <__alt_mem_onchip_memory2_0+0xf700b6dc>

0000b730 <_fstat_r>:
    b730:	defffd04 	addi	sp,sp,-12
    b734:	2805883a 	mov	r2,r5
    b738:	dc000015 	stw	r16,0(sp)
    b73c:	04000074 	movhi	r16,1
    b740:	dc400115 	stw	r17,4(sp)
    b744:	8416ab04 	addi	r16,r16,23212
    b748:	2023883a 	mov	r17,r4
    b74c:	300b883a 	mov	r5,r6
    b750:	1009883a 	mov	r4,r2
    b754:	dfc00215 	stw	ra,8(sp)
    b758:	80000015 	stw	zero,0(r16)
    b75c:	000f39c0 	call	f39c <fstat>
    b760:	00ffffc4 	movi	r3,-1
    b764:	10c00526 	beq	r2,r3,b77c <_fstat_r+0x4c>
    b768:	dfc00217 	ldw	ra,8(sp)
    b76c:	dc400117 	ldw	r17,4(sp)
    b770:	dc000017 	ldw	r16,0(sp)
    b774:	dec00304 	addi	sp,sp,12
    b778:	f800283a 	ret
    b77c:	80c00017 	ldw	r3,0(r16)
    b780:	183ff926 	beq	r3,zero,b768 <__alt_mem_onchip_memory2_0+0xf700b768>
    b784:	88c00015 	stw	r3,0(r17)
    b788:	003ff706 	br	b768 <__alt_mem_onchip_memory2_0+0xf700b768>

0000b78c <_isatty_r>:
    b78c:	defffd04 	addi	sp,sp,-12
    b790:	dc000015 	stw	r16,0(sp)
    b794:	04000074 	movhi	r16,1
    b798:	dc400115 	stw	r17,4(sp)
    b79c:	8416ab04 	addi	r16,r16,23212
    b7a0:	2023883a 	mov	r17,r4
    b7a4:	2809883a 	mov	r4,r5
    b7a8:	dfc00215 	stw	ra,8(sp)
    b7ac:	80000015 	stw	zero,0(r16)
    b7b0:	000f4900 	call	f490 <isatty>
    b7b4:	00ffffc4 	movi	r3,-1
    b7b8:	10c00526 	beq	r2,r3,b7d0 <_isatty_r+0x44>
    b7bc:	dfc00217 	ldw	ra,8(sp)
    b7c0:	dc400117 	ldw	r17,4(sp)
    b7c4:	dc000017 	ldw	r16,0(sp)
    b7c8:	dec00304 	addi	sp,sp,12
    b7cc:	f800283a 	ret
    b7d0:	80c00017 	ldw	r3,0(r16)
    b7d4:	183ff926 	beq	r3,zero,b7bc <__alt_mem_onchip_memory2_0+0xf700b7bc>
    b7d8:	88c00015 	stw	r3,0(r17)
    b7dc:	003ff706 	br	b7bc <__alt_mem_onchip_memory2_0+0xf700b7bc>

0000b7e0 <_lseek_r>:
    b7e0:	defffd04 	addi	sp,sp,-12
    b7e4:	2805883a 	mov	r2,r5
    b7e8:	dc000015 	stw	r16,0(sp)
    b7ec:	04000074 	movhi	r16,1
    b7f0:	dc400115 	stw	r17,4(sp)
    b7f4:	300b883a 	mov	r5,r6
    b7f8:	8416ab04 	addi	r16,r16,23212
    b7fc:	2023883a 	mov	r17,r4
    b800:	380d883a 	mov	r6,r7
    b804:	1009883a 	mov	r4,r2
    b808:	dfc00215 	stw	ra,8(sp)
    b80c:	80000015 	stw	zero,0(r16)
    b810:	000f6640 	call	f664 <lseek>
    b814:	00ffffc4 	movi	r3,-1
    b818:	10c00526 	beq	r2,r3,b830 <_lseek_r+0x50>
    b81c:	dfc00217 	ldw	ra,8(sp)
    b820:	dc400117 	ldw	r17,4(sp)
    b824:	dc000017 	ldw	r16,0(sp)
    b828:	dec00304 	addi	sp,sp,12
    b82c:	f800283a 	ret
    b830:	80c00017 	ldw	r3,0(r16)
    b834:	183ff926 	beq	r3,zero,b81c <__alt_mem_onchip_memory2_0+0xf700b81c>
    b838:	88c00015 	stw	r3,0(r17)
    b83c:	003ff706 	br	b81c <__alt_mem_onchip_memory2_0+0xf700b81c>

0000b840 <_read_r>:
    b840:	defffd04 	addi	sp,sp,-12
    b844:	2805883a 	mov	r2,r5
    b848:	dc000015 	stw	r16,0(sp)
    b84c:	04000074 	movhi	r16,1
    b850:	dc400115 	stw	r17,4(sp)
    b854:	300b883a 	mov	r5,r6
    b858:	8416ab04 	addi	r16,r16,23212
    b85c:	2023883a 	mov	r17,r4
    b860:	380d883a 	mov	r6,r7
    b864:	1009883a 	mov	r4,r2
    b868:	dfc00215 	stw	ra,8(sp)
    b86c:	80000015 	stw	zero,0(r16)
    b870:	000f8400 	call	f840 <read>
    b874:	00ffffc4 	movi	r3,-1
    b878:	10c00526 	beq	r2,r3,b890 <_read_r+0x50>
    b87c:	dfc00217 	ldw	ra,8(sp)
    b880:	dc400117 	ldw	r17,4(sp)
    b884:	dc000017 	ldw	r16,0(sp)
    b888:	dec00304 	addi	sp,sp,12
    b88c:	f800283a 	ret
    b890:	80c00017 	ldw	r3,0(r16)
    b894:	183ff926 	beq	r3,zero,b87c <__alt_mem_onchip_memory2_0+0xf700b87c>
    b898:	88c00015 	stw	r3,0(r17)
    b89c:	003ff706 	br	b87c <__alt_mem_onchip_memory2_0+0xf700b87c>

0000b8a0 <__swbuf_r>:
    b8a0:	defffb04 	addi	sp,sp,-20
    b8a4:	dcc00315 	stw	r19,12(sp)
    b8a8:	dc800215 	stw	r18,8(sp)
    b8ac:	dc000015 	stw	r16,0(sp)
    b8b0:	dfc00415 	stw	ra,16(sp)
    b8b4:	dc400115 	stw	r17,4(sp)
    b8b8:	2025883a 	mov	r18,r4
    b8bc:	2827883a 	mov	r19,r5
    b8c0:	3021883a 	mov	r16,r6
    b8c4:	20000226 	beq	r4,zero,b8d0 <__swbuf_r+0x30>
    b8c8:	20800e17 	ldw	r2,56(r4)
    b8cc:	10004226 	beq	r2,zero,b9d8 <__swbuf_r+0x138>
    b8d0:	80800617 	ldw	r2,24(r16)
    b8d4:	8100030b 	ldhu	r4,12(r16)
    b8d8:	80800215 	stw	r2,8(r16)
    b8dc:	2080020c 	andi	r2,r4,8
    b8e0:	10003626 	beq	r2,zero,b9bc <__swbuf_r+0x11c>
    b8e4:	80c00417 	ldw	r3,16(r16)
    b8e8:	18003426 	beq	r3,zero,b9bc <__swbuf_r+0x11c>
    b8ec:	2088000c 	andi	r2,r4,8192
    b8f0:	9c403fcc 	andi	r17,r19,255
    b8f4:	10001a26 	beq	r2,zero,b960 <__swbuf_r+0xc0>
    b8f8:	80800017 	ldw	r2,0(r16)
    b8fc:	81000517 	ldw	r4,20(r16)
    b900:	10c7c83a 	sub	r3,r2,r3
    b904:	1900200e 	bge	r3,r4,b988 <__swbuf_r+0xe8>
    b908:	18c00044 	addi	r3,r3,1
    b90c:	81000217 	ldw	r4,8(r16)
    b910:	11400044 	addi	r5,r2,1
    b914:	81400015 	stw	r5,0(r16)
    b918:	213fffc4 	addi	r4,r4,-1
    b91c:	81000215 	stw	r4,8(r16)
    b920:	14c00005 	stb	r19,0(r2)
    b924:	80800517 	ldw	r2,20(r16)
    b928:	10c01e26 	beq	r2,r3,b9a4 <__swbuf_r+0x104>
    b92c:	8080030b 	ldhu	r2,12(r16)
    b930:	1080004c 	andi	r2,r2,1
    b934:	10000226 	beq	r2,zero,b940 <__swbuf_r+0xa0>
    b938:	00800284 	movi	r2,10
    b93c:	88801926 	beq	r17,r2,b9a4 <__swbuf_r+0x104>
    b940:	8805883a 	mov	r2,r17
    b944:	dfc00417 	ldw	ra,16(sp)
    b948:	dcc00317 	ldw	r19,12(sp)
    b94c:	dc800217 	ldw	r18,8(sp)
    b950:	dc400117 	ldw	r17,4(sp)
    b954:	dc000017 	ldw	r16,0(sp)
    b958:	dec00504 	addi	sp,sp,20
    b95c:	f800283a 	ret
    b960:	81401917 	ldw	r5,100(r16)
    b964:	00b7ffc4 	movi	r2,-8193
    b968:	21080014 	ori	r4,r4,8192
    b96c:	2884703a 	and	r2,r5,r2
    b970:	80801915 	stw	r2,100(r16)
    b974:	80800017 	ldw	r2,0(r16)
    b978:	8100030d 	sth	r4,12(r16)
    b97c:	81000517 	ldw	r4,20(r16)
    b980:	10c7c83a 	sub	r3,r2,r3
    b984:	193fe016 	blt	r3,r4,b908 <__alt_mem_onchip_memory2_0+0xf700b908>
    b988:	800b883a 	mov	r5,r16
    b98c:	9009883a 	mov	r4,r18
    b990:	000648c0 	call	648c <_fflush_r>
    b994:	1000071e 	bne	r2,zero,b9b4 <__swbuf_r+0x114>
    b998:	80800017 	ldw	r2,0(r16)
    b99c:	00c00044 	movi	r3,1
    b9a0:	003fda06 	br	b90c <__alt_mem_onchip_memory2_0+0xf700b90c>
    b9a4:	800b883a 	mov	r5,r16
    b9a8:	9009883a 	mov	r4,r18
    b9ac:	000648c0 	call	648c <_fflush_r>
    b9b0:	103fe326 	beq	r2,zero,b940 <__alt_mem_onchip_memory2_0+0xf700b940>
    b9b4:	00bfffc4 	movi	r2,-1
    b9b8:	003fe206 	br	b944 <__alt_mem_onchip_memory2_0+0xf700b944>
    b9bc:	800b883a 	mov	r5,r16
    b9c0:	9009883a 	mov	r4,r18
    b9c4:	000486c0 	call	486c <__swsetup_r>
    b9c8:	103ffa1e 	bne	r2,zero,b9b4 <__alt_mem_onchip_memory2_0+0xf700b9b4>
    b9cc:	8100030b 	ldhu	r4,12(r16)
    b9d0:	80c00417 	ldw	r3,16(r16)
    b9d4:	003fc506 	br	b8ec <__alt_mem_onchip_memory2_0+0xf700b8ec>
    b9d8:	00068780 	call	6878 <__sinit>
    b9dc:	003fbc06 	br	b8d0 <__alt_mem_onchip_memory2_0+0xf700b8d0>

0000b9e0 <__swbuf>:
    b9e0:	00800074 	movhi	r2,1
    b9e4:	108fda04 	addi	r2,r2,16232
    b9e8:	280d883a 	mov	r6,r5
    b9ec:	200b883a 	mov	r5,r4
    b9f0:	11000017 	ldw	r4,0(r2)
    b9f4:	000b8a01 	jmpi	b8a0 <__swbuf_r>

0000b9f8 <_wcrtomb_r>:
    b9f8:	defff604 	addi	sp,sp,-40
    b9fc:	00800074 	movhi	r2,1
    ba00:	dc800815 	stw	r18,32(sp)
    ba04:	dc400715 	stw	r17,28(sp)
    ba08:	dc000615 	stw	r16,24(sp)
    ba0c:	108fde04 	addi	r2,r2,16248
    ba10:	dfc00915 	stw	ra,36(sp)
    ba14:	2021883a 	mov	r16,r4
    ba18:	3823883a 	mov	r17,r7
    ba1c:	14800017 	ldw	r18,0(r2)
    ba20:	28001426 	beq	r5,zero,ba74 <_wcrtomb_r+0x7c>
    ba24:	d9400415 	stw	r5,16(sp)
    ba28:	d9800515 	stw	r6,20(sp)
    ba2c:	00073c80 	call	73c8 <__locale_charset>
    ba30:	d9800517 	ldw	r6,20(sp)
    ba34:	d9400417 	ldw	r5,16(sp)
    ba38:	100f883a 	mov	r7,r2
    ba3c:	dc400015 	stw	r17,0(sp)
    ba40:	8009883a 	mov	r4,r16
    ba44:	903ee83a 	callr	r18
    ba48:	00ffffc4 	movi	r3,-1
    ba4c:	10c0031e 	bne	r2,r3,ba5c <_wcrtomb_r+0x64>
    ba50:	88000015 	stw	zero,0(r17)
    ba54:	00c02284 	movi	r3,138
    ba58:	80c00015 	stw	r3,0(r16)
    ba5c:	dfc00917 	ldw	ra,36(sp)
    ba60:	dc800817 	ldw	r18,32(sp)
    ba64:	dc400717 	ldw	r17,28(sp)
    ba68:	dc000617 	ldw	r16,24(sp)
    ba6c:	dec00a04 	addi	sp,sp,40
    ba70:	f800283a 	ret
    ba74:	00073c80 	call	73c8 <__locale_charset>
    ba78:	100f883a 	mov	r7,r2
    ba7c:	dc400015 	stw	r17,0(sp)
    ba80:	000d883a 	mov	r6,zero
    ba84:	d9400104 	addi	r5,sp,4
    ba88:	8009883a 	mov	r4,r16
    ba8c:	903ee83a 	callr	r18
    ba90:	003fed06 	br	ba48 <__alt_mem_onchip_memory2_0+0xf700ba48>

0000ba94 <wcrtomb>:
    ba94:	defff604 	addi	sp,sp,-40
    ba98:	00800074 	movhi	r2,1
    ba9c:	dc800615 	stw	r18,24(sp)
    baa0:	dc400515 	stw	r17,20(sp)
    baa4:	108fda04 	addi	r2,r2,16232
    baa8:	dfc00915 	stw	ra,36(sp)
    baac:	dd000815 	stw	r20,32(sp)
    bab0:	dcc00715 	stw	r19,28(sp)
    bab4:	dc000415 	stw	r16,16(sp)
    bab8:	3025883a 	mov	r18,r6
    babc:	14400017 	ldw	r17,0(r2)
    bac0:	20001926 	beq	r4,zero,bb28 <wcrtomb+0x94>
    bac4:	00800074 	movhi	r2,1
    bac8:	108fde04 	addi	r2,r2,16248
    bacc:	15000017 	ldw	r20,0(r2)
    bad0:	2021883a 	mov	r16,r4
    bad4:	2827883a 	mov	r19,r5
    bad8:	00073c80 	call	73c8 <__locale_charset>
    badc:	100f883a 	mov	r7,r2
    bae0:	dc800015 	stw	r18,0(sp)
    bae4:	980d883a 	mov	r6,r19
    bae8:	800b883a 	mov	r5,r16
    baec:	8809883a 	mov	r4,r17
    baf0:	a03ee83a 	callr	r20
    baf4:	00ffffc4 	movi	r3,-1
    baf8:	10c0031e 	bne	r2,r3,bb08 <wcrtomb+0x74>
    bafc:	90000015 	stw	zero,0(r18)
    bb00:	00c02284 	movi	r3,138
    bb04:	88c00015 	stw	r3,0(r17)
    bb08:	dfc00917 	ldw	ra,36(sp)
    bb0c:	dd000817 	ldw	r20,32(sp)
    bb10:	dcc00717 	ldw	r19,28(sp)
    bb14:	dc800617 	ldw	r18,24(sp)
    bb18:	dc400517 	ldw	r17,20(sp)
    bb1c:	dc000417 	ldw	r16,16(sp)
    bb20:	dec00a04 	addi	sp,sp,40
    bb24:	f800283a 	ret
    bb28:	00800074 	movhi	r2,1
    bb2c:	108fde04 	addi	r2,r2,16248
    bb30:	14000017 	ldw	r16,0(r2)
    bb34:	00073c80 	call	73c8 <__locale_charset>
    bb38:	100f883a 	mov	r7,r2
    bb3c:	dc800015 	stw	r18,0(sp)
    bb40:	000d883a 	mov	r6,zero
    bb44:	d9400104 	addi	r5,sp,4
    bb48:	8809883a 	mov	r4,r17
    bb4c:	803ee83a 	callr	r16
    bb50:	003fe806 	br	baf4 <__alt_mem_onchip_memory2_0+0xf700baf4>

0000bb54 <__ascii_wctomb>:
    bb54:	28000526 	beq	r5,zero,bb6c <__ascii_wctomb+0x18>
    bb58:	00803fc4 	movi	r2,255
    bb5c:	11800536 	bltu	r2,r6,bb74 <__ascii_wctomb+0x20>
    bb60:	29800005 	stb	r6,0(r5)
    bb64:	00800044 	movi	r2,1
    bb68:	f800283a 	ret
    bb6c:	0005883a 	mov	r2,zero
    bb70:	f800283a 	ret
    bb74:	00802284 	movi	r2,138
    bb78:	20800015 	stw	r2,0(r4)
    bb7c:	00bfffc4 	movi	r2,-1
    bb80:	f800283a 	ret

0000bb84 <_wctomb_r>:
    bb84:	00800074 	movhi	r2,1
    bb88:	defff904 	addi	sp,sp,-28
    bb8c:	108fde04 	addi	r2,r2,16248
    bb90:	dfc00615 	stw	ra,24(sp)
    bb94:	dc400515 	stw	r17,20(sp)
    bb98:	dc000415 	stw	r16,16(sp)
    bb9c:	3823883a 	mov	r17,r7
    bba0:	14000017 	ldw	r16,0(r2)
    bba4:	d9000115 	stw	r4,4(sp)
    bba8:	d9400215 	stw	r5,8(sp)
    bbac:	d9800315 	stw	r6,12(sp)
    bbb0:	00073c80 	call	73c8 <__locale_charset>
    bbb4:	d9800317 	ldw	r6,12(sp)
    bbb8:	d9400217 	ldw	r5,8(sp)
    bbbc:	d9000117 	ldw	r4,4(sp)
    bbc0:	100f883a 	mov	r7,r2
    bbc4:	dc400015 	stw	r17,0(sp)
    bbc8:	803ee83a 	callr	r16
    bbcc:	dfc00617 	ldw	ra,24(sp)
    bbd0:	dc400517 	ldw	r17,20(sp)
    bbd4:	dc000417 	ldw	r16,16(sp)
    bbd8:	dec00704 	addi	sp,sp,28
    bbdc:	f800283a 	ret

0000bbe0 <__udivdi3>:
    bbe0:	defff404 	addi	sp,sp,-48
    bbe4:	dcc00515 	stw	r19,20(sp)
    bbe8:	dc000215 	stw	r16,8(sp)
    bbec:	dfc00b15 	stw	ra,44(sp)
    bbf0:	df000a15 	stw	fp,40(sp)
    bbf4:	ddc00915 	stw	r23,36(sp)
    bbf8:	dd800815 	stw	r22,32(sp)
    bbfc:	dd400715 	stw	r21,28(sp)
    bc00:	dd000615 	stw	r20,24(sp)
    bc04:	dc800415 	stw	r18,16(sp)
    bc08:	dc400315 	stw	r17,12(sp)
    bc0c:	2027883a 	mov	r19,r4
    bc10:	2821883a 	mov	r16,r5
    bc14:	3800461e 	bne	r7,zero,bd30 <__udivdi3+0x150>
    bc18:	3023883a 	mov	r17,r6
    bc1c:	2025883a 	mov	r18,r4
    bc20:	2980572e 	bgeu	r5,r6,bd80 <__udivdi3+0x1a0>
    bc24:	00bfffd4 	movui	r2,65535
    bc28:	282d883a 	mov	r22,r5
    bc2c:	1180b236 	bltu	r2,r6,bef8 <__udivdi3+0x318>
    bc30:	00803fc4 	movi	r2,255
    bc34:	1185803a 	cmpltu	r2,r2,r6
    bc38:	100490fa 	slli	r2,r2,3
    bc3c:	3086d83a 	srl	r3,r6,r2
    bc40:	01000074 	movhi	r4,1
    bc44:	2108e104 	addi	r4,r4,9092
    bc48:	20c7883a 	add	r3,r4,r3
    bc4c:	18c00003 	ldbu	r3,0(r3)
    bc50:	1885883a 	add	r2,r3,r2
    bc54:	00c00804 	movi	r3,32
    bc58:	1887c83a 	sub	r3,r3,r2
    bc5c:	18000526 	beq	r3,zero,bc74 <__udivdi3+0x94>
    bc60:	80e0983a 	sll	r16,r16,r3
    bc64:	9884d83a 	srl	r2,r19,r2
    bc68:	30e2983a 	sll	r17,r6,r3
    bc6c:	98e4983a 	sll	r18,r19,r3
    bc70:	142cb03a 	or	r22,r2,r16
    bc74:	882ad43a 	srli	r21,r17,16
    bc78:	b009883a 	mov	r4,r22
    bc7c:	8d3fffcc 	andi	r20,r17,65535
    bc80:	a80b883a 	mov	r5,r21
    bc84:	000c8fc0 	call	c8fc <__umodsi3>
    bc88:	b009883a 	mov	r4,r22
    bc8c:	a80b883a 	mov	r5,r21
    bc90:	1027883a 	mov	r19,r2
    bc94:	000c8980 	call	c898 <__udivsi3>
    bc98:	100b883a 	mov	r5,r2
    bc9c:	a009883a 	mov	r4,r20
    bca0:	102d883a 	mov	r22,r2
    bca4:	000c9540 	call	c954 <__mulsi3>
    bca8:	9826943a 	slli	r19,r19,16
    bcac:	9006d43a 	srli	r3,r18,16
    bcb0:	1cc6b03a 	or	r3,r3,r19
    bcb4:	1880052e 	bgeu	r3,r2,bccc <__udivdi3+0xec>
    bcb8:	1c47883a 	add	r3,r3,r17
    bcbc:	b13fffc4 	addi	r4,r22,-1
    bcc0:	1c400136 	bltu	r3,r17,bcc8 <__udivdi3+0xe8>
    bcc4:	18814236 	bltu	r3,r2,c1d0 <__udivdi3+0x5f0>
    bcc8:	202d883a 	mov	r22,r4
    bccc:	18a1c83a 	sub	r16,r3,r2
    bcd0:	8009883a 	mov	r4,r16
    bcd4:	a80b883a 	mov	r5,r21
    bcd8:	000c8fc0 	call	c8fc <__umodsi3>
    bcdc:	1027883a 	mov	r19,r2
    bce0:	8009883a 	mov	r4,r16
    bce4:	a80b883a 	mov	r5,r21
    bce8:	9826943a 	slli	r19,r19,16
    bcec:	000c8980 	call	c898 <__udivsi3>
    bcf0:	100b883a 	mov	r5,r2
    bcf4:	a009883a 	mov	r4,r20
    bcf8:	94bfffcc 	andi	r18,r18,65535
    bcfc:	1021883a 	mov	r16,r2
    bd00:	94e4b03a 	or	r18,r18,r19
    bd04:	000c9540 	call	c954 <__mulsi3>
    bd08:	9080052e 	bgeu	r18,r2,bd20 <__udivdi3+0x140>
    bd0c:	8ca5883a 	add	r18,r17,r18
    bd10:	80ffffc4 	addi	r3,r16,-1
    bd14:	94410c36 	bltu	r18,r17,c148 <__udivdi3+0x568>
    bd18:	90810b2e 	bgeu	r18,r2,c148 <__udivdi3+0x568>
    bd1c:	843fff84 	addi	r16,r16,-2
    bd20:	b004943a 	slli	r2,r22,16
    bd24:	0007883a 	mov	r3,zero
    bd28:	1404b03a 	or	r2,r2,r16
    bd2c:	00005e06 	br	bea8 <__udivdi3+0x2c8>
    bd30:	29c05b36 	bltu	r5,r7,bea0 <__udivdi3+0x2c0>
    bd34:	00bfffd4 	movui	r2,65535
    bd38:	11c0672e 	bgeu	r2,r7,bed8 <__udivdi3+0x2f8>
    bd3c:	00804034 	movhi	r2,256
    bd40:	10bfffc4 	addi	r2,r2,-1
    bd44:	11c10a36 	bltu	r2,r7,c170 <__udivdi3+0x590>
    bd48:	00800404 	movi	r2,16
    bd4c:	3886d83a 	srl	r3,r7,r2
    bd50:	01000074 	movhi	r4,1
    bd54:	2108e104 	addi	r4,r4,9092
    bd58:	20c7883a 	add	r3,r4,r3
    bd5c:	18c00003 	ldbu	r3,0(r3)
    bd60:	05c00804 	movi	r23,32
    bd64:	1885883a 	add	r2,r3,r2
    bd68:	b8afc83a 	sub	r23,r23,r2
    bd6c:	b800671e 	bne	r23,zero,bf0c <__udivdi3+0x32c>
    bd70:	3c010536 	bltu	r7,r16,c188 <__udivdi3+0x5a8>
    bd74:	9985403a 	cmpgeu	r2,r19,r6
    bd78:	0007883a 	mov	r3,zero
    bd7c:	00004a06 	br	bea8 <__udivdi3+0x2c8>
    bd80:	3000041e 	bne	r6,zero,bd94 <__udivdi3+0x1b4>
    bd84:	000b883a 	mov	r5,zero
    bd88:	01000044 	movi	r4,1
    bd8c:	000c8980 	call	c898 <__udivsi3>
    bd90:	1023883a 	mov	r17,r2
    bd94:	00bfffd4 	movui	r2,65535
    bd98:	1440532e 	bgeu	r2,r17,bee8 <__udivdi3+0x308>
    bd9c:	00804034 	movhi	r2,256
    bda0:	10bfffc4 	addi	r2,r2,-1
    bda4:	1440f436 	bltu	r2,r17,c178 <__udivdi3+0x598>
    bda8:	00800404 	movi	r2,16
    bdac:	8886d83a 	srl	r3,r17,r2
    bdb0:	01000074 	movhi	r4,1
    bdb4:	2108e104 	addi	r4,r4,9092
    bdb8:	20c7883a 	add	r3,r4,r3
    bdbc:	18c00003 	ldbu	r3,0(r3)
    bdc0:	1885883a 	add	r2,r3,r2
    bdc4:	00c00804 	movi	r3,32
    bdc8:	1887c83a 	sub	r3,r3,r2
    bdcc:	1800a51e 	bne	r3,zero,c064 <__udivdi3+0x484>
    bdd0:	882ad43a 	srli	r21,r17,16
    bdd4:	8461c83a 	sub	r16,r16,r17
    bdd8:	8d3fffcc 	andi	r20,r17,65535
    bddc:	00c00044 	movi	r3,1
    bde0:	a80b883a 	mov	r5,r21
    bde4:	8009883a 	mov	r4,r16
    bde8:	d8c00115 	stw	r3,4(sp)
    bdec:	000c8fc0 	call	c8fc <__umodsi3>
    bdf0:	a80b883a 	mov	r5,r21
    bdf4:	8009883a 	mov	r4,r16
    bdf8:	1027883a 	mov	r19,r2
    bdfc:	000c8980 	call	c898 <__udivsi3>
    be00:	a00b883a 	mov	r5,r20
    be04:	1009883a 	mov	r4,r2
    be08:	102d883a 	mov	r22,r2
    be0c:	000c9540 	call	c954 <__mulsi3>
    be10:	9826943a 	slli	r19,r19,16
    be14:	900ed43a 	srli	r7,r18,16
    be18:	d8c00117 	ldw	r3,4(sp)
    be1c:	3cceb03a 	or	r7,r7,r19
    be20:	3880052e 	bgeu	r7,r2,be38 <__udivdi3+0x258>
    be24:	3c4f883a 	add	r7,r7,r17
    be28:	b13fffc4 	addi	r4,r22,-1
    be2c:	3c400136 	bltu	r7,r17,be34 <__udivdi3+0x254>
    be30:	3880e436 	bltu	r7,r2,c1c4 <__udivdi3+0x5e4>
    be34:	202d883a 	mov	r22,r4
    be38:	38a1c83a 	sub	r16,r7,r2
    be3c:	8009883a 	mov	r4,r16
    be40:	a80b883a 	mov	r5,r21
    be44:	d8c00115 	stw	r3,4(sp)
    be48:	000c8fc0 	call	c8fc <__umodsi3>
    be4c:	1027883a 	mov	r19,r2
    be50:	8009883a 	mov	r4,r16
    be54:	a80b883a 	mov	r5,r21
    be58:	9826943a 	slli	r19,r19,16
    be5c:	000c8980 	call	c898 <__udivsi3>
    be60:	a00b883a 	mov	r5,r20
    be64:	1009883a 	mov	r4,r2
    be68:	94bfffcc 	andi	r18,r18,65535
    be6c:	1021883a 	mov	r16,r2
    be70:	94e4b03a 	or	r18,r18,r19
    be74:	000c9540 	call	c954 <__mulsi3>
    be78:	d8c00117 	ldw	r3,4(sp)
    be7c:	9080052e 	bgeu	r18,r2,be94 <__udivdi3+0x2b4>
    be80:	8ca5883a 	add	r18,r17,r18
    be84:	813fffc4 	addi	r4,r16,-1
    be88:	9440ad36 	bltu	r18,r17,c140 <__udivdi3+0x560>
    be8c:	9080ac2e 	bgeu	r18,r2,c140 <__udivdi3+0x560>
    be90:	843fff84 	addi	r16,r16,-2
    be94:	b004943a 	slli	r2,r22,16
    be98:	1404b03a 	or	r2,r2,r16
    be9c:	00000206 	br	bea8 <__udivdi3+0x2c8>
    bea0:	0007883a 	mov	r3,zero
    bea4:	0005883a 	mov	r2,zero
    bea8:	dfc00b17 	ldw	ra,44(sp)
    beac:	df000a17 	ldw	fp,40(sp)
    beb0:	ddc00917 	ldw	r23,36(sp)
    beb4:	dd800817 	ldw	r22,32(sp)
    beb8:	dd400717 	ldw	r21,28(sp)
    bebc:	dd000617 	ldw	r20,24(sp)
    bec0:	dcc00517 	ldw	r19,20(sp)
    bec4:	dc800417 	ldw	r18,16(sp)
    bec8:	dc400317 	ldw	r17,12(sp)
    becc:	dc000217 	ldw	r16,8(sp)
    bed0:	dec00c04 	addi	sp,sp,48
    bed4:	f800283a 	ret
    bed8:	00803fc4 	movi	r2,255
    bedc:	11c5803a 	cmpltu	r2,r2,r7
    bee0:	100490fa 	slli	r2,r2,3
    bee4:	003f9906 	br	bd4c <__alt_mem_onchip_memory2_0+0xf700bd4c>
    bee8:	00803fc4 	movi	r2,255
    beec:	1445803a 	cmpltu	r2,r2,r17
    bef0:	100490fa 	slli	r2,r2,3
    bef4:	003fad06 	br	bdac <__alt_mem_onchip_memory2_0+0xf700bdac>
    bef8:	00804034 	movhi	r2,256
    befc:	10bfffc4 	addi	r2,r2,-1
    bf00:	11809f36 	bltu	r2,r6,c180 <__udivdi3+0x5a0>
    bf04:	00800404 	movi	r2,16
    bf08:	003f4c06 	br	bc3c <__alt_mem_onchip_memory2_0+0xf700bc3c>
    bf0c:	3dce983a 	sll	r7,r7,r23
    bf10:	30b8d83a 	srl	fp,r6,r2
    bf14:	80a2d83a 	srl	r17,r16,r2
    bf18:	35cc983a 	sll	r6,r6,r23
    bf1c:	3f38b03a 	or	fp,r7,fp
    bf20:	e024d43a 	srli	r18,fp,16
    bf24:	9884d83a 	srl	r2,r19,r2
    bf28:	85e0983a 	sll	r16,r16,r23
    bf2c:	8809883a 	mov	r4,r17
    bf30:	900b883a 	mov	r5,r18
    bf34:	d9800015 	stw	r6,0(sp)
    bf38:	1420b03a 	or	r16,r2,r16
    bf3c:	000c8fc0 	call	c8fc <__umodsi3>
    bf40:	900b883a 	mov	r5,r18
    bf44:	8809883a 	mov	r4,r17
    bf48:	1029883a 	mov	r20,r2
    bf4c:	e5bfffcc 	andi	r22,fp,65535
    bf50:	000c8980 	call	c898 <__udivsi3>
    bf54:	100b883a 	mov	r5,r2
    bf58:	b009883a 	mov	r4,r22
    bf5c:	102b883a 	mov	r21,r2
    bf60:	000c9540 	call	c954 <__mulsi3>
    bf64:	a028943a 	slli	r20,r20,16
    bf68:	8006d43a 	srli	r3,r16,16
    bf6c:	1d06b03a 	or	r3,r3,r20
    bf70:	1880042e 	bgeu	r3,r2,bf84 <__udivdi3+0x3a4>
    bf74:	1f07883a 	add	r3,r3,fp
    bf78:	a93fffc4 	addi	r4,r21,-1
    bf7c:	1f00892e 	bgeu	r3,fp,c1a4 <__udivdi3+0x5c4>
    bf80:	202b883a 	mov	r21,r4
    bf84:	18a3c83a 	sub	r17,r3,r2
    bf88:	8809883a 	mov	r4,r17
    bf8c:	900b883a 	mov	r5,r18
    bf90:	000c8fc0 	call	c8fc <__umodsi3>
    bf94:	1029883a 	mov	r20,r2
    bf98:	8809883a 	mov	r4,r17
    bf9c:	900b883a 	mov	r5,r18
    bfa0:	a028943a 	slli	r20,r20,16
    bfa4:	000c8980 	call	c898 <__udivsi3>
    bfa8:	100b883a 	mov	r5,r2
    bfac:	b009883a 	mov	r4,r22
    bfb0:	843fffcc 	andi	r16,r16,65535
    bfb4:	1023883a 	mov	r17,r2
    bfb8:	8520b03a 	or	r16,r16,r20
    bfbc:	000c9540 	call	c954 <__mulsi3>
    bfc0:	8080042e 	bgeu	r16,r2,bfd4 <__udivdi3+0x3f4>
    bfc4:	8721883a 	add	r16,r16,fp
    bfc8:	88ffffc4 	addi	r3,r17,-1
    bfcc:	8700712e 	bgeu	r16,fp,c194 <__udivdi3+0x5b4>
    bfd0:	1823883a 	mov	r17,r3
    bfd4:	a80e943a 	slli	r7,r21,16
    bfd8:	d8c00017 	ldw	r3,0(sp)
    bfdc:	80a1c83a 	sub	r16,r16,r2
    bfe0:	3c64b03a 	or	r18,r7,r17
    bfe4:	1d3fffcc 	andi	r20,r3,65535
    bfe8:	9022d43a 	srli	r17,r18,16
    bfec:	95bfffcc 	andi	r22,r18,65535
    bff0:	a00b883a 	mov	r5,r20
    bff4:	b009883a 	mov	r4,r22
    bff8:	182ad43a 	srli	r21,r3,16
    bffc:	000c9540 	call	c954 <__mulsi3>
    c000:	a00b883a 	mov	r5,r20
    c004:	8809883a 	mov	r4,r17
    c008:	1039883a 	mov	fp,r2
    c00c:	000c9540 	call	c954 <__mulsi3>
    c010:	8809883a 	mov	r4,r17
    c014:	a80b883a 	mov	r5,r21
    c018:	1029883a 	mov	r20,r2
    c01c:	000c9540 	call	c954 <__mulsi3>
    c020:	a80b883a 	mov	r5,r21
    c024:	b009883a 	mov	r4,r22
    c028:	1023883a 	mov	r17,r2
    c02c:	000c9540 	call	c954 <__mulsi3>
    c030:	e006d43a 	srli	r3,fp,16
    c034:	1505883a 	add	r2,r2,r20
    c038:	1887883a 	add	r3,r3,r2
    c03c:	1d00022e 	bgeu	r3,r20,c048 <__udivdi3+0x468>
    c040:	00800074 	movhi	r2,1
    c044:	88a3883a 	add	r17,r17,r2
    c048:	1804d43a 	srli	r2,r3,16
    c04c:	1463883a 	add	r17,r2,r17
    c050:	84404436 	bltu	r16,r17,c164 <__udivdi3+0x584>
    c054:	84403e26 	beq	r16,r17,c150 <__udivdi3+0x570>
    c058:	9005883a 	mov	r2,r18
    c05c:	0007883a 	mov	r3,zero
    c060:	003f9106 	br	bea8 <__alt_mem_onchip_memory2_0+0xf700bea8>
    c064:	88e2983a 	sll	r17,r17,r3
    c068:	80aed83a 	srl	r23,r16,r2
    c06c:	80e0983a 	sll	r16,r16,r3
    c070:	882ad43a 	srli	r21,r17,16
    c074:	9884d83a 	srl	r2,r19,r2
    c078:	b809883a 	mov	r4,r23
    c07c:	a80b883a 	mov	r5,r21
    c080:	98e4983a 	sll	r18,r19,r3
    c084:	142cb03a 	or	r22,r2,r16
    c088:	000c8fc0 	call	c8fc <__umodsi3>
    c08c:	b809883a 	mov	r4,r23
    c090:	a80b883a 	mov	r5,r21
    c094:	1027883a 	mov	r19,r2
    c098:	8d3fffcc 	andi	r20,r17,65535
    c09c:	000c8980 	call	c898 <__udivsi3>
    c0a0:	a009883a 	mov	r4,r20
    c0a4:	100b883a 	mov	r5,r2
    c0a8:	102f883a 	mov	r23,r2
    c0ac:	000c9540 	call	c954 <__mulsi3>
    c0b0:	9826943a 	slli	r19,r19,16
    c0b4:	b008d43a 	srli	r4,r22,16
    c0b8:	24c8b03a 	or	r4,r4,r19
    c0bc:	2080062e 	bgeu	r4,r2,c0d8 <__udivdi3+0x4f8>
    c0c0:	2449883a 	add	r4,r4,r17
    c0c4:	b8ffffc4 	addi	r3,r23,-1
    c0c8:	24403c36 	bltu	r4,r17,c1bc <__udivdi3+0x5dc>
    c0cc:	20803b2e 	bgeu	r4,r2,c1bc <__udivdi3+0x5dc>
    c0d0:	bdffff84 	addi	r23,r23,-2
    c0d4:	2449883a 	add	r4,r4,r17
    c0d8:	20a1c83a 	sub	r16,r4,r2
    c0dc:	a80b883a 	mov	r5,r21
    c0e0:	8009883a 	mov	r4,r16
    c0e4:	000c8fc0 	call	c8fc <__umodsi3>
    c0e8:	a80b883a 	mov	r5,r21
    c0ec:	8009883a 	mov	r4,r16
    c0f0:	1027883a 	mov	r19,r2
    c0f4:	000c8980 	call	c898 <__udivsi3>
    c0f8:	a009883a 	mov	r4,r20
    c0fc:	100b883a 	mov	r5,r2
    c100:	9826943a 	slli	r19,r19,16
    c104:	1039883a 	mov	fp,r2
    c108:	000c9540 	call	c954 <__mulsi3>
    c10c:	b13fffcc 	andi	r4,r22,65535
    c110:	24c8b03a 	or	r4,r4,r19
    c114:	2080062e 	bgeu	r4,r2,c130 <__udivdi3+0x550>
    c118:	2449883a 	add	r4,r4,r17
    c11c:	e0ffffc4 	addi	r3,fp,-1
    c120:	24402436 	bltu	r4,r17,c1b4 <__udivdi3+0x5d4>
    c124:	2080232e 	bgeu	r4,r2,c1b4 <__udivdi3+0x5d4>
    c128:	e73fff84 	addi	fp,fp,-2
    c12c:	2449883a 	add	r4,r4,r17
    c130:	b82e943a 	slli	r23,r23,16
    c134:	20a1c83a 	sub	r16,r4,r2
    c138:	bf06b03a 	or	r3,r23,fp
    c13c:	003f2806 	br	bde0 <__alt_mem_onchip_memory2_0+0xf700bde0>
    c140:	2021883a 	mov	r16,r4
    c144:	003f5306 	br	be94 <__alt_mem_onchip_memory2_0+0xf700be94>
    c148:	1821883a 	mov	r16,r3
    c14c:	003ef406 	br	bd20 <__alt_mem_onchip_memory2_0+0xf700bd20>
    c150:	1806943a 	slli	r3,r3,16
    c154:	9de6983a 	sll	r19,r19,r23
    c158:	e73fffcc 	andi	fp,fp,65535
    c15c:	1f07883a 	add	r3,r3,fp
    c160:	98ffbd2e 	bgeu	r19,r3,c058 <__alt_mem_onchip_memory2_0+0xf700c058>
    c164:	90bfffc4 	addi	r2,r18,-1
    c168:	0007883a 	mov	r3,zero
    c16c:	003f4e06 	br	bea8 <__alt_mem_onchip_memory2_0+0xf700bea8>
    c170:	00800604 	movi	r2,24
    c174:	003ef506 	br	bd4c <__alt_mem_onchip_memory2_0+0xf700bd4c>
    c178:	00800604 	movi	r2,24
    c17c:	003f0b06 	br	bdac <__alt_mem_onchip_memory2_0+0xf700bdac>
    c180:	00800604 	movi	r2,24
    c184:	003ead06 	br	bc3c <__alt_mem_onchip_memory2_0+0xf700bc3c>
    c188:	0007883a 	mov	r3,zero
    c18c:	00800044 	movi	r2,1
    c190:	003f4506 	br	bea8 <__alt_mem_onchip_memory2_0+0xf700bea8>
    c194:	80bf8e2e 	bgeu	r16,r2,bfd0 <__alt_mem_onchip_memory2_0+0xf700bfd0>
    c198:	8c7fff84 	addi	r17,r17,-2
    c19c:	8721883a 	add	r16,r16,fp
    c1a0:	003f8c06 	br	bfd4 <__alt_mem_onchip_memory2_0+0xf700bfd4>
    c1a4:	18bf762e 	bgeu	r3,r2,bf80 <__alt_mem_onchip_memory2_0+0xf700bf80>
    c1a8:	ad7fff84 	addi	r21,r21,-2
    c1ac:	1f07883a 	add	r3,r3,fp
    c1b0:	003f7406 	br	bf84 <__alt_mem_onchip_memory2_0+0xf700bf84>
    c1b4:	1839883a 	mov	fp,r3
    c1b8:	003fdd06 	br	c130 <__alt_mem_onchip_memory2_0+0xf700c130>
    c1bc:	182f883a 	mov	r23,r3
    c1c0:	003fc506 	br	c0d8 <__alt_mem_onchip_memory2_0+0xf700c0d8>
    c1c4:	b5bfff84 	addi	r22,r22,-2
    c1c8:	3c4f883a 	add	r7,r7,r17
    c1cc:	003f1a06 	br	be38 <__alt_mem_onchip_memory2_0+0xf700be38>
    c1d0:	b5bfff84 	addi	r22,r22,-2
    c1d4:	1c47883a 	add	r3,r3,r17
    c1d8:	003ebc06 	br	bccc <__alt_mem_onchip_memory2_0+0xf700bccc>

0000c1dc <__umoddi3>:
    c1dc:	defff304 	addi	sp,sp,-52
    c1e0:	df000b15 	stw	fp,44(sp)
    c1e4:	dc400415 	stw	r17,16(sp)
    c1e8:	dc000315 	stw	r16,12(sp)
    c1ec:	dfc00c15 	stw	ra,48(sp)
    c1f0:	ddc00a15 	stw	r23,40(sp)
    c1f4:	dd800915 	stw	r22,36(sp)
    c1f8:	dd400815 	stw	r21,32(sp)
    c1fc:	dd000715 	stw	r20,28(sp)
    c200:	dcc00615 	stw	r19,24(sp)
    c204:	dc800515 	stw	r18,20(sp)
    c208:	2021883a 	mov	r16,r4
    c20c:	2823883a 	mov	r17,r5
    c210:	2839883a 	mov	fp,r5
    c214:	3800401e 	bne	r7,zero,c318 <__umoddi3+0x13c>
    c218:	3027883a 	mov	r19,r6
    c21c:	2029883a 	mov	r20,r4
    c220:	2980552e 	bgeu	r5,r6,c378 <__umoddi3+0x19c>
    c224:	00bfffd4 	movui	r2,65535
    c228:	1180a236 	bltu	r2,r6,c4b4 <__umoddi3+0x2d8>
    c22c:	01003fc4 	movi	r4,255
    c230:	2189803a 	cmpltu	r4,r4,r6
    c234:	200890fa 	slli	r4,r4,3
    c238:	3104d83a 	srl	r2,r6,r4
    c23c:	00c00074 	movhi	r3,1
    c240:	18c8e104 	addi	r3,r3,9092
    c244:	1885883a 	add	r2,r3,r2
    c248:	10c00003 	ldbu	r3,0(r2)
    c24c:	00800804 	movi	r2,32
    c250:	1909883a 	add	r4,r3,r4
    c254:	1125c83a 	sub	r18,r2,r4
    c258:	90000526 	beq	r18,zero,c270 <__umoddi3+0x94>
    c25c:	8ca2983a 	sll	r17,r17,r18
    c260:	8108d83a 	srl	r4,r16,r4
    c264:	34a6983a 	sll	r19,r6,r18
    c268:	84a8983a 	sll	r20,r16,r18
    c26c:	2478b03a 	or	fp,r4,r17
    c270:	982cd43a 	srli	r22,r19,16
    c274:	e009883a 	mov	r4,fp
    c278:	9dffffcc 	andi	r23,r19,65535
    c27c:	b00b883a 	mov	r5,r22
    c280:	000c8fc0 	call	c8fc <__umodsi3>
    c284:	b00b883a 	mov	r5,r22
    c288:	e009883a 	mov	r4,fp
    c28c:	102b883a 	mov	r21,r2
    c290:	000c8980 	call	c898 <__udivsi3>
    c294:	100b883a 	mov	r5,r2
    c298:	b809883a 	mov	r4,r23
    c29c:	000c9540 	call	c954 <__mulsi3>
    c2a0:	a82a943a 	slli	r21,r21,16
    c2a4:	a006d43a 	srli	r3,r20,16
    c2a8:	1d46b03a 	or	r3,r3,r21
    c2ac:	1880032e 	bgeu	r3,r2,c2bc <__umoddi3+0xe0>
    c2b0:	1cc7883a 	add	r3,r3,r19
    c2b4:	1cc00136 	bltu	r3,r19,c2bc <__umoddi3+0xe0>
    c2b8:	18813136 	bltu	r3,r2,c780 <__umoddi3+0x5a4>
    c2bc:	18a1c83a 	sub	r16,r3,r2
    c2c0:	b00b883a 	mov	r5,r22
    c2c4:	8009883a 	mov	r4,r16
    c2c8:	000c8fc0 	call	c8fc <__umodsi3>
    c2cc:	b00b883a 	mov	r5,r22
    c2d0:	8009883a 	mov	r4,r16
    c2d4:	1023883a 	mov	r17,r2
    c2d8:	000c8980 	call	c898 <__udivsi3>
    c2dc:	100b883a 	mov	r5,r2
    c2e0:	b809883a 	mov	r4,r23
    c2e4:	8822943a 	slli	r17,r17,16
    c2e8:	000c9540 	call	c954 <__mulsi3>
    c2ec:	a0ffffcc 	andi	r3,r20,65535
    c2f0:	1c46b03a 	or	r3,r3,r17
    c2f4:	1880042e 	bgeu	r3,r2,c308 <__umoddi3+0x12c>
    c2f8:	1cc7883a 	add	r3,r3,r19
    c2fc:	1cc00236 	bltu	r3,r19,c308 <__umoddi3+0x12c>
    c300:	1880012e 	bgeu	r3,r2,c308 <__umoddi3+0x12c>
    c304:	1cc7883a 	add	r3,r3,r19
    c308:	1885c83a 	sub	r2,r3,r2
    c30c:	1484d83a 	srl	r2,r2,r18
    c310:	0007883a 	mov	r3,zero
    c314:	00005306 	br	c464 <__umoddi3+0x288>
    c318:	29c05036 	bltu	r5,r7,c45c <__umoddi3+0x280>
    c31c:	00bfffd4 	movui	r2,65535
    c320:	11c05c2e 	bgeu	r2,r7,c494 <__umoddi3+0x2b8>
    c324:	00804034 	movhi	r2,256
    c328:	10bfffc4 	addi	r2,r2,-1
    c32c:	11c10636 	bltu	r2,r7,c748 <__umoddi3+0x56c>
    c330:	01000404 	movi	r4,16
    c334:	3904d83a 	srl	r2,r7,r4
    c338:	00c00074 	movhi	r3,1
    c33c:	18c8e104 	addi	r3,r3,9092
    c340:	1885883a 	add	r2,r3,r2
    c344:	14c00003 	ldbu	r19,0(r2)
    c348:	00c00804 	movi	r3,32
    c34c:	9927883a 	add	r19,r19,r4
    c350:	1ce9c83a 	sub	r20,r3,r19
    c354:	a0005c1e 	bne	r20,zero,c4c8 <__umoddi3+0x2ec>
    c358:	3c400136 	bltu	r7,r17,c360 <__umoddi3+0x184>
    c35c:	81810a36 	bltu	r16,r6,c788 <__umoddi3+0x5ac>
    c360:	8185c83a 	sub	r2,r16,r6
    c364:	89e3c83a 	sub	r17,r17,r7
    c368:	8089803a 	cmpltu	r4,r16,r2
    c36c:	8939c83a 	sub	fp,r17,r4
    c370:	e007883a 	mov	r3,fp
    c374:	00003b06 	br	c464 <__umoddi3+0x288>
    c378:	3000041e 	bne	r6,zero,c38c <__umoddi3+0x1b0>
    c37c:	000b883a 	mov	r5,zero
    c380:	01000044 	movi	r4,1
    c384:	000c8980 	call	c898 <__udivsi3>
    c388:	1027883a 	mov	r19,r2
    c38c:	00bfffd4 	movui	r2,65535
    c390:	14c0442e 	bgeu	r2,r19,c4a4 <__umoddi3+0x2c8>
    c394:	00804034 	movhi	r2,256
    c398:	10bfffc4 	addi	r2,r2,-1
    c39c:	14c0ec36 	bltu	r2,r19,c750 <__umoddi3+0x574>
    c3a0:	00800404 	movi	r2,16
    c3a4:	9886d83a 	srl	r3,r19,r2
    c3a8:	01000074 	movhi	r4,1
    c3ac:	2108e104 	addi	r4,r4,9092
    c3b0:	20c7883a 	add	r3,r4,r3
    c3b4:	18c00003 	ldbu	r3,0(r3)
    c3b8:	1887883a 	add	r3,r3,r2
    c3bc:	00800804 	movi	r2,32
    c3c0:	10e5c83a 	sub	r18,r2,r3
    c3c4:	9000ab1e 	bne	r18,zero,c674 <__umoddi3+0x498>
    c3c8:	982cd43a 	srli	r22,r19,16
    c3cc:	8ce3c83a 	sub	r17,r17,r19
    c3d0:	9dffffcc 	andi	r23,r19,65535
    c3d4:	b00b883a 	mov	r5,r22
    c3d8:	8809883a 	mov	r4,r17
    c3dc:	000c8fc0 	call	c8fc <__umodsi3>
    c3e0:	b00b883a 	mov	r5,r22
    c3e4:	8809883a 	mov	r4,r17
    c3e8:	102b883a 	mov	r21,r2
    c3ec:	000c8980 	call	c898 <__udivsi3>
    c3f0:	b80b883a 	mov	r5,r23
    c3f4:	1009883a 	mov	r4,r2
    c3f8:	000c9540 	call	c954 <__mulsi3>
    c3fc:	a82a943a 	slli	r21,r21,16
    c400:	a006d43a 	srli	r3,r20,16
    c404:	1d46b03a 	or	r3,r3,r21
    c408:	1880042e 	bgeu	r3,r2,c41c <__umoddi3+0x240>
    c40c:	1cc7883a 	add	r3,r3,r19
    c410:	1cc00236 	bltu	r3,r19,c41c <__umoddi3+0x240>
    c414:	1880012e 	bgeu	r3,r2,c41c <__umoddi3+0x240>
    c418:	1cc7883a 	add	r3,r3,r19
    c41c:	18a1c83a 	sub	r16,r3,r2
    c420:	b00b883a 	mov	r5,r22
    c424:	8009883a 	mov	r4,r16
    c428:	000c8fc0 	call	c8fc <__umodsi3>
    c42c:	1023883a 	mov	r17,r2
    c430:	b00b883a 	mov	r5,r22
    c434:	8009883a 	mov	r4,r16
    c438:	000c8980 	call	c898 <__udivsi3>
    c43c:	8822943a 	slli	r17,r17,16
    c440:	b80b883a 	mov	r5,r23
    c444:	1009883a 	mov	r4,r2
    c448:	000c9540 	call	c954 <__mulsi3>
    c44c:	a53fffcc 	andi	r20,r20,65535
    c450:	a446b03a 	or	r3,r20,r17
    c454:	18bfac2e 	bgeu	r3,r2,c308 <__alt_mem_onchip_memory2_0+0xf700c308>
    c458:	003fa706 	br	c2f8 <__alt_mem_onchip_memory2_0+0xf700c2f8>
    c45c:	2005883a 	mov	r2,r4
    c460:	2807883a 	mov	r3,r5
    c464:	dfc00c17 	ldw	ra,48(sp)
    c468:	df000b17 	ldw	fp,44(sp)
    c46c:	ddc00a17 	ldw	r23,40(sp)
    c470:	dd800917 	ldw	r22,36(sp)
    c474:	dd400817 	ldw	r21,32(sp)
    c478:	dd000717 	ldw	r20,28(sp)
    c47c:	dcc00617 	ldw	r19,24(sp)
    c480:	dc800517 	ldw	r18,20(sp)
    c484:	dc400417 	ldw	r17,16(sp)
    c488:	dc000317 	ldw	r16,12(sp)
    c48c:	dec00d04 	addi	sp,sp,52
    c490:	f800283a 	ret
    c494:	04c03fc4 	movi	r19,255
    c498:	99c9803a 	cmpltu	r4,r19,r7
    c49c:	200890fa 	slli	r4,r4,3
    c4a0:	003fa406 	br	c334 <__alt_mem_onchip_memory2_0+0xf700c334>
    c4a4:	00803fc4 	movi	r2,255
    c4a8:	14c5803a 	cmpltu	r2,r2,r19
    c4ac:	100490fa 	slli	r2,r2,3
    c4b0:	003fbc06 	br	c3a4 <__alt_mem_onchip_memory2_0+0xf700c3a4>
    c4b4:	00804034 	movhi	r2,256
    c4b8:	10bfffc4 	addi	r2,r2,-1
    c4bc:	1180a636 	bltu	r2,r6,c758 <__umoddi3+0x57c>
    c4c0:	01000404 	movi	r4,16
    c4c4:	003f5c06 	br	c238 <__alt_mem_onchip_memory2_0+0xf700c238>
    c4c8:	3d0e983a 	sll	r7,r7,r20
    c4cc:	34ead83a 	srl	r21,r6,r19
    c4d0:	8cc6d83a 	srl	r3,r17,r19
    c4d4:	8d10983a 	sll	r8,r17,r20
    c4d8:	3d6ab03a 	or	r21,r7,r21
    c4dc:	a82cd43a 	srli	r22,r21,16
    c4e0:	84e2d83a 	srl	r17,r16,r19
    c4e4:	1809883a 	mov	r4,r3
    c4e8:	b00b883a 	mov	r5,r22
    c4ec:	8a22b03a 	or	r17,r17,r8
    c4f0:	3524983a 	sll	r18,r6,r20
    c4f4:	dc400015 	stw	r17,0(sp)
    c4f8:	d8c00115 	stw	r3,4(sp)
    c4fc:	000c8fc0 	call	c8fc <__umodsi3>
    c500:	d8c00117 	ldw	r3,4(sp)
    c504:	b00b883a 	mov	r5,r22
    c508:	1039883a 	mov	fp,r2
    c50c:	1809883a 	mov	r4,r3
    c510:	000c8980 	call	c898 <__udivsi3>
    c514:	adffffcc 	andi	r23,r21,65535
    c518:	100b883a 	mov	r5,r2
    c51c:	b809883a 	mov	r4,r23
    c520:	1023883a 	mov	r17,r2
    c524:	000c9540 	call	c954 <__mulsi3>
    c528:	d9400017 	ldw	r5,0(sp)
    c52c:	e008943a 	slli	r4,fp,16
    c530:	8520983a 	sll	r16,r16,r20
    c534:	2806d43a 	srli	r3,r5,16
    c538:	1906b03a 	or	r3,r3,r4
    c53c:	1880042e 	bgeu	r3,r2,c550 <__umoddi3+0x374>
    c540:	1d47883a 	add	r3,r3,r21
    c544:	893fffc4 	addi	r4,r17,-1
    c548:	1d40892e 	bgeu	r3,r21,c770 <__umoddi3+0x594>
    c54c:	2023883a 	mov	r17,r4
    c550:	18b9c83a 	sub	fp,r3,r2
    c554:	b00b883a 	mov	r5,r22
    c558:	e009883a 	mov	r4,fp
    c55c:	000c8fc0 	call	c8fc <__umodsi3>
    c560:	b00b883a 	mov	r5,r22
    c564:	e009883a 	mov	r4,fp
    c568:	d8800215 	stw	r2,8(sp)
    c56c:	000c8980 	call	c898 <__udivsi3>
    c570:	100b883a 	mov	r5,r2
    c574:	b809883a 	mov	r4,r23
    c578:	102d883a 	mov	r22,r2
    c57c:	000c9540 	call	c954 <__mulsi3>
    c580:	d9800217 	ldw	r6,8(sp)
    c584:	d8c00017 	ldw	r3,0(sp)
    c588:	300c943a 	slli	r6,r6,16
    c58c:	1a3fffcc 	andi	r8,r3,65535
    c590:	4190b03a 	or	r8,r8,r6
    c594:	4080042e 	bgeu	r8,r2,c5a8 <__umoddi3+0x3cc>
    c598:	4551883a 	add	r8,r8,r21
    c59c:	b0ffffc4 	addi	r3,r22,-1
    c5a0:	45406f2e 	bgeu	r8,r21,c760 <__umoddi3+0x584>
    c5a4:	182d883a 	mov	r22,r3
    c5a8:	880e943a 	slli	r7,r17,16
    c5ac:	9006d43a 	srli	r3,r18,16
    c5b0:	91bfffcc 	andi	r6,r18,65535
    c5b4:	3dacb03a 	or	r22,r7,r22
    c5b8:	b02ed43a 	srli	r23,r22,16
    c5bc:	b5bfffcc 	andi	r22,r22,65535
    c5c0:	300b883a 	mov	r5,r6
    c5c4:	b009883a 	mov	r4,r22
    c5c8:	40a3c83a 	sub	r17,r8,r2
    c5cc:	d8c00115 	stw	r3,4(sp)
    c5d0:	d9800215 	stw	r6,8(sp)
    c5d4:	000c9540 	call	c954 <__mulsi3>
    c5d8:	d9800217 	ldw	r6,8(sp)
    c5dc:	b809883a 	mov	r4,r23
    c5e0:	1039883a 	mov	fp,r2
    c5e4:	300b883a 	mov	r5,r6
    c5e8:	000c9540 	call	c954 <__mulsi3>
    c5ec:	d8c00117 	ldw	r3,4(sp)
    c5f0:	b809883a 	mov	r4,r23
    c5f4:	d8800215 	stw	r2,8(sp)
    c5f8:	180b883a 	mov	r5,r3
    c5fc:	000c9540 	call	c954 <__mulsi3>
    c600:	d8c00117 	ldw	r3,4(sp)
    c604:	b009883a 	mov	r4,r22
    c608:	102f883a 	mov	r23,r2
    c60c:	180b883a 	mov	r5,r3
    c610:	000c9540 	call	c954 <__mulsi3>
    c614:	d9800217 	ldw	r6,8(sp)
    c618:	e006d43a 	srli	r3,fp,16
    c61c:	1185883a 	add	r2,r2,r6
    c620:	1885883a 	add	r2,r3,r2
    c624:	1180022e 	bgeu	r2,r6,c630 <__umoddi3+0x454>
    c628:	00c00074 	movhi	r3,1
    c62c:	b8ef883a 	add	r23,r23,r3
    c630:	1006d43a 	srli	r3,r2,16
    c634:	1004943a 	slli	r2,r2,16
    c638:	e73fffcc 	andi	fp,fp,65535
    c63c:	1dc7883a 	add	r3,r3,r23
    c640:	1739883a 	add	fp,r2,fp
    c644:	88c03a36 	bltu	r17,r3,c730 <__umoddi3+0x554>
    c648:	88c05126 	beq	r17,r3,c790 <__umoddi3+0x5b4>
    c64c:	88c9c83a 	sub	r4,r17,r3
    c650:	e00f883a 	mov	r7,fp
    c654:	81cfc83a 	sub	r7,r16,r7
    c658:	81c7803a 	cmpltu	r3,r16,r7
    c65c:	20c7c83a 	sub	r3,r4,r3
    c660:	1cc4983a 	sll	r2,r3,r19
    c664:	3d0ed83a 	srl	r7,r7,r20
    c668:	1d06d83a 	srl	r3,r3,r20
    c66c:	11c4b03a 	or	r2,r2,r7
    c670:	003f7c06 	br	c464 <__alt_mem_onchip_memory2_0+0xf700c464>
    c674:	9ca6983a 	sll	r19,r19,r18
    c678:	88f8d83a 	srl	fp,r17,r3
    c67c:	80c4d83a 	srl	r2,r16,r3
    c680:	982cd43a 	srli	r22,r19,16
    c684:	8ca2983a 	sll	r17,r17,r18
    c688:	e009883a 	mov	r4,fp
    c68c:	b00b883a 	mov	r5,r22
    c690:	146ab03a 	or	r21,r2,r17
    c694:	000c8fc0 	call	c8fc <__umodsi3>
    c698:	b00b883a 	mov	r5,r22
    c69c:	e009883a 	mov	r4,fp
    c6a0:	1029883a 	mov	r20,r2
    c6a4:	9dffffcc 	andi	r23,r19,65535
    c6a8:	000c8980 	call	c898 <__udivsi3>
    c6ac:	b809883a 	mov	r4,r23
    c6b0:	100b883a 	mov	r5,r2
    c6b4:	000c9540 	call	c954 <__mulsi3>
    c6b8:	a008943a 	slli	r4,r20,16
    c6bc:	a806d43a 	srli	r3,r21,16
    c6c0:	84a8983a 	sll	r20,r16,r18
    c6c4:	1906b03a 	or	r3,r3,r4
    c6c8:	1880042e 	bgeu	r3,r2,c6dc <__umoddi3+0x500>
    c6cc:	1cc7883a 	add	r3,r3,r19
    c6d0:	1cc00236 	bltu	r3,r19,c6dc <__umoddi3+0x500>
    c6d4:	1880012e 	bgeu	r3,r2,c6dc <__umoddi3+0x500>
    c6d8:	1cc7883a 	add	r3,r3,r19
    c6dc:	18a3c83a 	sub	r17,r3,r2
    c6e0:	b00b883a 	mov	r5,r22
    c6e4:	8809883a 	mov	r4,r17
    c6e8:	000c8fc0 	call	c8fc <__umodsi3>
    c6ec:	b00b883a 	mov	r5,r22
    c6f0:	8809883a 	mov	r4,r17
    c6f4:	1021883a 	mov	r16,r2
    c6f8:	000c8980 	call	c898 <__udivsi3>
    c6fc:	100b883a 	mov	r5,r2
    c700:	b809883a 	mov	r4,r23
    c704:	8020943a 	slli	r16,r16,16
    c708:	000c9540 	call	c954 <__mulsi3>
    c70c:	a8ffffcc 	andi	r3,r21,65535
    c710:	1c06b03a 	or	r3,r3,r16
    c714:	1880042e 	bgeu	r3,r2,c728 <__umoddi3+0x54c>
    c718:	1cc7883a 	add	r3,r3,r19
    c71c:	1cc00236 	bltu	r3,r19,c728 <__umoddi3+0x54c>
    c720:	1880012e 	bgeu	r3,r2,c728 <__umoddi3+0x54c>
    c724:	1cc7883a 	add	r3,r3,r19
    c728:	18a3c83a 	sub	r17,r3,r2
    c72c:	003f2906 	br	c3d4 <__alt_mem_onchip_memory2_0+0xf700c3d4>
    c730:	e48fc83a 	sub	r7,fp,r18
    c734:	1d49c83a 	sub	r4,r3,r21
    c738:	e1f9803a 	cmpltu	fp,fp,r7
    c73c:	2739c83a 	sub	fp,r4,fp
    c740:	8f09c83a 	sub	r4,r17,fp
    c744:	003fc306 	br	c654 <__alt_mem_onchip_memory2_0+0xf700c654>
    c748:	01000604 	movi	r4,24
    c74c:	003ef906 	br	c334 <__alt_mem_onchip_memory2_0+0xf700c334>
    c750:	00800604 	movi	r2,24
    c754:	003f1306 	br	c3a4 <__alt_mem_onchip_memory2_0+0xf700c3a4>
    c758:	01000604 	movi	r4,24
    c75c:	003eb606 	br	c238 <__alt_mem_onchip_memory2_0+0xf700c238>
    c760:	40bf902e 	bgeu	r8,r2,c5a4 <__alt_mem_onchip_memory2_0+0xf700c5a4>
    c764:	b5bfff84 	addi	r22,r22,-2
    c768:	4551883a 	add	r8,r8,r21
    c76c:	003f8e06 	br	c5a8 <__alt_mem_onchip_memory2_0+0xf700c5a8>
    c770:	18bf762e 	bgeu	r3,r2,c54c <__alt_mem_onchip_memory2_0+0xf700c54c>
    c774:	8c7fff84 	addi	r17,r17,-2
    c778:	1d47883a 	add	r3,r3,r21
    c77c:	003f7406 	br	c550 <__alt_mem_onchip_memory2_0+0xf700c550>
    c780:	1cc7883a 	add	r3,r3,r19
    c784:	003ecd06 	br	c2bc <__alt_mem_onchip_memory2_0+0xf700c2bc>
    c788:	8005883a 	mov	r2,r16
    c78c:	003ef806 	br	c370 <__alt_mem_onchip_memory2_0+0xf700c370>
    c790:	873fe736 	bltu	r16,fp,c730 <__alt_mem_onchip_memory2_0+0xf700c730>
    c794:	e00f883a 	mov	r7,fp
    c798:	0009883a 	mov	r4,zero
    c79c:	003fad06 	br	c654 <__alt_mem_onchip_memory2_0+0xf700c654>

0000c7a0 <__divsi3>:
    c7a0:	20001b16 	blt	r4,zero,c810 <__divsi3+0x70>
    c7a4:	000f883a 	mov	r7,zero
    c7a8:	28001616 	blt	r5,zero,c804 <__divsi3+0x64>
    c7ac:	200d883a 	mov	r6,r4
    c7b0:	29001a2e 	bgeu	r5,r4,c81c <__divsi3+0x7c>
    c7b4:	00800804 	movi	r2,32
    c7b8:	00c00044 	movi	r3,1
    c7bc:	00000106 	br	c7c4 <__divsi3+0x24>
    c7c0:	10000d26 	beq	r2,zero,c7f8 <__divsi3+0x58>
    c7c4:	294b883a 	add	r5,r5,r5
    c7c8:	10bfffc4 	addi	r2,r2,-1
    c7cc:	18c7883a 	add	r3,r3,r3
    c7d0:	293ffb36 	bltu	r5,r4,c7c0 <__alt_mem_onchip_memory2_0+0xf700c7c0>
    c7d4:	0005883a 	mov	r2,zero
    c7d8:	18000726 	beq	r3,zero,c7f8 <__divsi3+0x58>
    c7dc:	0005883a 	mov	r2,zero
    c7e0:	31400236 	bltu	r6,r5,c7ec <__divsi3+0x4c>
    c7e4:	314dc83a 	sub	r6,r6,r5
    c7e8:	10c4b03a 	or	r2,r2,r3
    c7ec:	1806d07a 	srli	r3,r3,1
    c7f0:	280ad07a 	srli	r5,r5,1
    c7f4:	183ffa1e 	bne	r3,zero,c7e0 <__alt_mem_onchip_memory2_0+0xf700c7e0>
    c7f8:	38000126 	beq	r7,zero,c800 <__divsi3+0x60>
    c7fc:	0085c83a 	sub	r2,zero,r2
    c800:	f800283a 	ret
    c804:	014bc83a 	sub	r5,zero,r5
    c808:	39c0005c 	xori	r7,r7,1
    c80c:	003fe706 	br	c7ac <__alt_mem_onchip_memory2_0+0xf700c7ac>
    c810:	0109c83a 	sub	r4,zero,r4
    c814:	01c00044 	movi	r7,1
    c818:	003fe306 	br	c7a8 <__alt_mem_onchip_memory2_0+0xf700c7a8>
    c81c:	00c00044 	movi	r3,1
    c820:	003fee06 	br	c7dc <__alt_mem_onchip_memory2_0+0xf700c7dc>

0000c824 <__modsi3>:
    c824:	20001716 	blt	r4,zero,c884 <__modsi3+0x60>
    c828:	000f883a 	mov	r7,zero
    c82c:	2005883a 	mov	r2,r4
    c830:	28001216 	blt	r5,zero,c87c <__modsi3+0x58>
    c834:	2900162e 	bgeu	r5,r4,c890 <__modsi3+0x6c>
    c838:	01800804 	movi	r6,32
    c83c:	00c00044 	movi	r3,1
    c840:	00000106 	br	c848 <__modsi3+0x24>
    c844:	30000a26 	beq	r6,zero,c870 <__modsi3+0x4c>
    c848:	294b883a 	add	r5,r5,r5
    c84c:	31bfffc4 	addi	r6,r6,-1
    c850:	18c7883a 	add	r3,r3,r3
    c854:	293ffb36 	bltu	r5,r4,c844 <__alt_mem_onchip_memory2_0+0xf700c844>
    c858:	18000526 	beq	r3,zero,c870 <__modsi3+0x4c>
    c85c:	1806d07a 	srli	r3,r3,1
    c860:	11400136 	bltu	r2,r5,c868 <__modsi3+0x44>
    c864:	1145c83a 	sub	r2,r2,r5
    c868:	280ad07a 	srli	r5,r5,1
    c86c:	183ffb1e 	bne	r3,zero,c85c <__alt_mem_onchip_memory2_0+0xf700c85c>
    c870:	38000126 	beq	r7,zero,c878 <__modsi3+0x54>
    c874:	0085c83a 	sub	r2,zero,r2
    c878:	f800283a 	ret
    c87c:	014bc83a 	sub	r5,zero,r5
    c880:	003fec06 	br	c834 <__alt_mem_onchip_memory2_0+0xf700c834>
    c884:	0109c83a 	sub	r4,zero,r4
    c888:	01c00044 	movi	r7,1
    c88c:	003fe706 	br	c82c <__alt_mem_onchip_memory2_0+0xf700c82c>
    c890:	00c00044 	movi	r3,1
    c894:	003ff106 	br	c85c <__alt_mem_onchip_memory2_0+0xf700c85c>

0000c898 <__udivsi3>:
    c898:	200d883a 	mov	r6,r4
    c89c:	2900152e 	bgeu	r5,r4,c8f4 <__udivsi3+0x5c>
    c8a0:	28001416 	blt	r5,zero,c8f4 <__udivsi3+0x5c>
    c8a4:	00800804 	movi	r2,32
    c8a8:	00c00044 	movi	r3,1
    c8ac:	00000206 	br	c8b8 <__udivsi3+0x20>
    c8b0:	10000e26 	beq	r2,zero,c8ec <__udivsi3+0x54>
    c8b4:	28000516 	blt	r5,zero,c8cc <__udivsi3+0x34>
    c8b8:	294b883a 	add	r5,r5,r5
    c8bc:	10bfffc4 	addi	r2,r2,-1
    c8c0:	18c7883a 	add	r3,r3,r3
    c8c4:	293ffa36 	bltu	r5,r4,c8b0 <__alt_mem_onchip_memory2_0+0xf700c8b0>
    c8c8:	18000826 	beq	r3,zero,c8ec <__udivsi3+0x54>
    c8cc:	0005883a 	mov	r2,zero
    c8d0:	31400236 	bltu	r6,r5,c8dc <__udivsi3+0x44>
    c8d4:	314dc83a 	sub	r6,r6,r5
    c8d8:	10c4b03a 	or	r2,r2,r3
    c8dc:	1806d07a 	srli	r3,r3,1
    c8e0:	280ad07a 	srli	r5,r5,1
    c8e4:	183ffa1e 	bne	r3,zero,c8d0 <__alt_mem_onchip_memory2_0+0xf700c8d0>
    c8e8:	f800283a 	ret
    c8ec:	0005883a 	mov	r2,zero
    c8f0:	f800283a 	ret
    c8f4:	00c00044 	movi	r3,1
    c8f8:	003ff406 	br	c8cc <__alt_mem_onchip_memory2_0+0xf700c8cc>

0000c8fc <__umodsi3>:
    c8fc:	2005883a 	mov	r2,r4
    c900:	2900122e 	bgeu	r5,r4,c94c <__umodsi3+0x50>
    c904:	28001116 	blt	r5,zero,c94c <__umodsi3+0x50>
    c908:	01800804 	movi	r6,32
    c90c:	00c00044 	movi	r3,1
    c910:	00000206 	br	c91c <__umodsi3+0x20>
    c914:	30000c26 	beq	r6,zero,c948 <__umodsi3+0x4c>
    c918:	28000516 	blt	r5,zero,c930 <__umodsi3+0x34>
    c91c:	294b883a 	add	r5,r5,r5
    c920:	31bfffc4 	addi	r6,r6,-1
    c924:	18c7883a 	add	r3,r3,r3
    c928:	293ffa36 	bltu	r5,r4,c914 <__alt_mem_onchip_memory2_0+0xf700c914>
    c92c:	18000626 	beq	r3,zero,c948 <__umodsi3+0x4c>
    c930:	1806d07a 	srli	r3,r3,1
    c934:	11400136 	bltu	r2,r5,c93c <__umodsi3+0x40>
    c938:	1145c83a 	sub	r2,r2,r5
    c93c:	280ad07a 	srli	r5,r5,1
    c940:	183ffb1e 	bne	r3,zero,c930 <__alt_mem_onchip_memory2_0+0xf700c930>
    c944:	f800283a 	ret
    c948:	f800283a 	ret
    c94c:	00c00044 	movi	r3,1
    c950:	003ff706 	br	c930 <__alt_mem_onchip_memory2_0+0xf700c930>

0000c954 <__mulsi3>:
    c954:	0005883a 	mov	r2,zero
    c958:	20000726 	beq	r4,zero,c978 <__mulsi3+0x24>
    c95c:	20c0004c 	andi	r3,r4,1
    c960:	2008d07a 	srli	r4,r4,1
    c964:	18000126 	beq	r3,zero,c96c <__mulsi3+0x18>
    c968:	1145883a 	add	r2,r2,r5
    c96c:	294b883a 	add	r5,r5,r5
    c970:	203ffa1e 	bne	r4,zero,c95c <__alt_mem_onchip_memory2_0+0xf700c95c>
    c974:	f800283a 	ret
    c978:	f800283a 	ret

0000c97c <__adddf3>:
    c97c:	02c00434 	movhi	r11,16
    c980:	5affffc4 	addi	r11,r11,-1
    c984:	2806d7fa 	srli	r3,r5,31
    c988:	2ad4703a 	and	r10,r5,r11
    c98c:	3ad2703a 	and	r9,r7,r11
    c990:	3804d53a 	srli	r2,r7,20
    c994:	3018d77a 	srli	r12,r6,29
    c998:	280ad53a 	srli	r5,r5,20
    c99c:	501490fa 	slli	r10,r10,3
    c9a0:	2010d77a 	srli	r8,r4,29
    c9a4:	481290fa 	slli	r9,r9,3
    c9a8:	380ed7fa 	srli	r7,r7,31
    c9ac:	defffb04 	addi	sp,sp,-20
    c9b0:	dc800215 	stw	r18,8(sp)
    c9b4:	dc400115 	stw	r17,4(sp)
    c9b8:	dc000015 	stw	r16,0(sp)
    c9bc:	dfc00415 	stw	ra,16(sp)
    c9c0:	dcc00315 	stw	r19,12(sp)
    c9c4:	1c803fcc 	andi	r18,r3,255
    c9c8:	2c01ffcc 	andi	r16,r5,2047
    c9cc:	5210b03a 	or	r8,r10,r8
    c9d0:	202290fa 	slli	r17,r4,3
    c9d4:	1081ffcc 	andi	r2,r2,2047
    c9d8:	4b12b03a 	or	r9,r9,r12
    c9dc:	300c90fa 	slli	r6,r6,3
    c9e0:	91c07526 	beq	r18,r7,cbb8 <__adddf3+0x23c>
    c9e4:	8087c83a 	sub	r3,r16,r2
    c9e8:	00c0ab0e 	bge	zero,r3,cc98 <__adddf3+0x31c>
    c9ec:	10002a1e 	bne	r2,zero,ca98 <__adddf3+0x11c>
    c9f0:	4984b03a 	or	r2,r9,r6
    c9f4:	1000961e 	bne	r2,zero,cc50 <__adddf3+0x2d4>
    c9f8:	888001cc 	andi	r2,r17,7
    c9fc:	10000726 	beq	r2,zero,ca1c <__adddf3+0xa0>
    ca00:	888003cc 	andi	r2,r17,15
    ca04:	00c00104 	movi	r3,4
    ca08:	10c00426 	beq	r2,r3,ca1c <__adddf3+0xa0>
    ca0c:	88c7883a 	add	r3,r17,r3
    ca10:	1c63803a 	cmpltu	r17,r3,r17
    ca14:	4451883a 	add	r8,r8,r17
    ca18:	1823883a 	mov	r17,r3
    ca1c:	4080202c 	andhi	r2,r8,128
    ca20:	10005926 	beq	r2,zero,cb88 <__adddf3+0x20c>
    ca24:	84000044 	addi	r16,r16,1
    ca28:	0081ffc4 	movi	r2,2047
    ca2c:	8080ba26 	beq	r16,r2,cd18 <__adddf3+0x39c>
    ca30:	00bfe034 	movhi	r2,65408
    ca34:	10bfffc4 	addi	r2,r2,-1
    ca38:	4090703a 	and	r8,r8,r2
    ca3c:	4004977a 	slli	r2,r8,29
    ca40:	4010927a 	slli	r8,r8,9
    ca44:	8822d0fa 	srli	r17,r17,3
    ca48:	8401ffcc 	andi	r16,r16,2047
    ca4c:	4010d33a 	srli	r8,r8,12
    ca50:	9007883a 	mov	r3,r18
    ca54:	1444b03a 	or	r2,r2,r17
    ca58:	8401ffcc 	andi	r16,r16,2047
    ca5c:	8020953a 	slli	r16,r16,20
    ca60:	18c03fcc 	andi	r3,r3,255
    ca64:	01000434 	movhi	r4,16
    ca68:	213fffc4 	addi	r4,r4,-1
    ca6c:	180697fa 	slli	r3,r3,31
    ca70:	4110703a 	and	r8,r8,r4
    ca74:	4410b03a 	or	r8,r8,r16
    ca78:	40c6b03a 	or	r3,r8,r3
    ca7c:	dfc00417 	ldw	ra,16(sp)
    ca80:	dcc00317 	ldw	r19,12(sp)
    ca84:	dc800217 	ldw	r18,8(sp)
    ca88:	dc400117 	ldw	r17,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00504 	addi	sp,sp,20
    ca94:	f800283a 	ret
    ca98:	0081ffc4 	movi	r2,2047
    ca9c:	80bfd626 	beq	r16,r2,c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    caa0:	4a402034 	orhi	r9,r9,128
    caa4:	00800e04 	movi	r2,56
    caa8:	10c09f16 	blt	r2,r3,cd28 <__adddf3+0x3ac>
    caac:	008007c4 	movi	r2,31
    cab0:	10c0c216 	blt	r2,r3,cdbc <__adddf3+0x440>
    cab4:	00800804 	movi	r2,32
    cab8:	10c5c83a 	sub	r2,r2,r3
    cabc:	488a983a 	sll	r5,r9,r2
    cac0:	30c8d83a 	srl	r4,r6,r3
    cac4:	3084983a 	sll	r2,r6,r2
    cac8:	48c6d83a 	srl	r3,r9,r3
    cacc:	290cb03a 	or	r6,r5,r4
    cad0:	1004c03a 	cmpne	r2,r2,zero
    cad4:	308cb03a 	or	r6,r6,r2
    cad8:	898dc83a 	sub	r6,r17,r6
    cadc:	89a3803a 	cmpltu	r17,r17,r6
    cae0:	40d1c83a 	sub	r8,r8,r3
    cae4:	4451c83a 	sub	r8,r8,r17
    cae8:	3023883a 	mov	r17,r6
    caec:	4080202c 	andhi	r2,r8,128
    caf0:	10002326 	beq	r2,zero,cb80 <__adddf3+0x204>
    caf4:	04c02034 	movhi	r19,128
    caf8:	9cffffc4 	addi	r19,r19,-1
    cafc:	44e6703a 	and	r19,r8,r19
    cb00:	98007626 	beq	r19,zero,ccdc <__adddf3+0x360>
    cb04:	9809883a 	mov	r4,r19
    cb08:	000f1bc0 	call	f1bc <__clzsi2>
    cb0c:	10fffe04 	addi	r3,r2,-8
    cb10:	010007c4 	movi	r4,31
    cb14:	20c07716 	blt	r4,r3,ccf4 <__adddf3+0x378>
    cb18:	00800804 	movi	r2,32
    cb1c:	10c5c83a 	sub	r2,r2,r3
    cb20:	8884d83a 	srl	r2,r17,r2
    cb24:	98d0983a 	sll	r8,r19,r3
    cb28:	88e2983a 	sll	r17,r17,r3
    cb2c:	1204b03a 	or	r2,r2,r8
    cb30:	1c007416 	blt	r3,r16,cd04 <__adddf3+0x388>
    cb34:	1c21c83a 	sub	r16,r3,r16
    cb38:	82000044 	addi	r8,r16,1
    cb3c:	00c007c4 	movi	r3,31
    cb40:	1a009116 	blt	r3,r8,cd88 <__adddf3+0x40c>
    cb44:	00c00804 	movi	r3,32
    cb48:	1a07c83a 	sub	r3,r3,r8
    cb4c:	8a08d83a 	srl	r4,r17,r8
    cb50:	88e2983a 	sll	r17,r17,r3
    cb54:	10c6983a 	sll	r3,r2,r3
    cb58:	1210d83a 	srl	r8,r2,r8
    cb5c:	8804c03a 	cmpne	r2,r17,zero
    cb60:	1906b03a 	or	r3,r3,r4
    cb64:	18a2b03a 	or	r17,r3,r2
    cb68:	0021883a 	mov	r16,zero
    cb6c:	003fa206 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cb70:	1890b03a 	or	r8,r3,r2
    cb74:	40017d26 	beq	r8,zero,d16c <__adddf3+0x7f0>
    cb78:	1011883a 	mov	r8,r2
    cb7c:	1823883a 	mov	r17,r3
    cb80:	888001cc 	andi	r2,r17,7
    cb84:	103f9e1e 	bne	r2,zero,ca00 <__alt_mem_onchip_memory2_0+0xf700ca00>
    cb88:	4004977a 	slli	r2,r8,29
    cb8c:	8822d0fa 	srli	r17,r17,3
    cb90:	4010d0fa 	srli	r8,r8,3
    cb94:	9007883a 	mov	r3,r18
    cb98:	1444b03a 	or	r2,r2,r17
    cb9c:	0101ffc4 	movi	r4,2047
    cba0:	81002426 	beq	r16,r4,cc34 <__adddf3+0x2b8>
    cba4:	8120703a 	and	r16,r16,r4
    cba8:	01000434 	movhi	r4,16
    cbac:	213fffc4 	addi	r4,r4,-1
    cbb0:	4110703a 	and	r8,r8,r4
    cbb4:	003fa806 	br	ca58 <__alt_mem_onchip_memory2_0+0xf700ca58>
    cbb8:	8089c83a 	sub	r4,r16,r2
    cbbc:	01005e0e 	bge	zero,r4,cd38 <__adddf3+0x3bc>
    cbc0:	10002b26 	beq	r2,zero,cc70 <__adddf3+0x2f4>
    cbc4:	0081ffc4 	movi	r2,2047
    cbc8:	80bf8b26 	beq	r16,r2,c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cbcc:	4a402034 	orhi	r9,r9,128
    cbd0:	00800e04 	movi	r2,56
    cbd4:	1100a40e 	bge	r2,r4,ce68 <__adddf3+0x4ec>
    cbd8:	498cb03a 	or	r6,r9,r6
    cbdc:	300ac03a 	cmpne	r5,r6,zero
    cbe0:	0013883a 	mov	r9,zero
    cbe4:	2c4b883a 	add	r5,r5,r17
    cbe8:	2c63803a 	cmpltu	r17,r5,r17
    cbec:	4a11883a 	add	r8,r9,r8
    cbf0:	8a11883a 	add	r8,r17,r8
    cbf4:	2823883a 	mov	r17,r5
    cbf8:	4080202c 	andhi	r2,r8,128
    cbfc:	103fe026 	beq	r2,zero,cb80 <__alt_mem_onchip_memory2_0+0xf700cb80>
    cc00:	84000044 	addi	r16,r16,1
    cc04:	0081ffc4 	movi	r2,2047
    cc08:	8080d226 	beq	r16,r2,cf54 <__adddf3+0x5d8>
    cc0c:	00bfe034 	movhi	r2,65408
    cc10:	10bfffc4 	addi	r2,r2,-1
    cc14:	4090703a 	and	r8,r8,r2
    cc18:	880ad07a 	srli	r5,r17,1
    cc1c:	400897fa 	slli	r4,r8,31
    cc20:	88c0004c 	andi	r3,r17,1
    cc24:	28e2b03a 	or	r17,r5,r3
    cc28:	4010d07a 	srli	r8,r8,1
    cc2c:	2462b03a 	or	r17,r4,r17
    cc30:	003f7106 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cc34:	4088b03a 	or	r4,r8,r2
    cc38:	20014526 	beq	r4,zero,d150 <__adddf3+0x7d4>
    cc3c:	01000434 	movhi	r4,16
    cc40:	42000234 	orhi	r8,r8,8
    cc44:	213fffc4 	addi	r4,r4,-1
    cc48:	4110703a 	and	r8,r8,r4
    cc4c:	003f8206 	br	ca58 <__alt_mem_onchip_memory2_0+0xf700ca58>
    cc50:	18ffffc4 	addi	r3,r3,-1
    cc54:	1800491e 	bne	r3,zero,cd7c <__adddf3+0x400>
    cc58:	898bc83a 	sub	r5,r17,r6
    cc5c:	8963803a 	cmpltu	r17,r17,r5
    cc60:	4251c83a 	sub	r8,r8,r9
    cc64:	4451c83a 	sub	r8,r8,r17
    cc68:	2823883a 	mov	r17,r5
    cc6c:	003f9f06 	br	caec <__alt_mem_onchip_memory2_0+0xf700caec>
    cc70:	4984b03a 	or	r2,r9,r6
    cc74:	103f6026 	beq	r2,zero,c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cc78:	213fffc4 	addi	r4,r4,-1
    cc7c:	2000931e 	bne	r4,zero,cecc <__adddf3+0x550>
    cc80:	898d883a 	add	r6,r17,r6
    cc84:	3463803a 	cmpltu	r17,r6,r17
    cc88:	4251883a 	add	r8,r8,r9
    cc8c:	8a11883a 	add	r8,r17,r8
    cc90:	3023883a 	mov	r17,r6
    cc94:	003fd806 	br	cbf8 <__alt_mem_onchip_memory2_0+0xf700cbf8>
    cc98:	1800541e 	bne	r3,zero,cdec <__adddf3+0x470>
    cc9c:	80800044 	addi	r2,r16,1
    cca0:	1081ffcc 	andi	r2,r2,2047
    cca4:	00c00044 	movi	r3,1
    cca8:	1880a00e 	bge	r3,r2,cf2c <__adddf3+0x5b0>
    ccac:	8989c83a 	sub	r4,r17,r6
    ccb0:	8905803a 	cmpltu	r2,r17,r4
    ccb4:	4267c83a 	sub	r19,r8,r9
    ccb8:	98a7c83a 	sub	r19,r19,r2
    ccbc:	9880202c 	andhi	r2,r19,128
    ccc0:	10006326 	beq	r2,zero,ce50 <__adddf3+0x4d4>
    ccc4:	3463c83a 	sub	r17,r6,r17
    ccc8:	4a07c83a 	sub	r3,r9,r8
    cccc:	344d803a 	cmpltu	r6,r6,r17
    ccd0:	19a7c83a 	sub	r19,r3,r6
    ccd4:	3825883a 	mov	r18,r7
    ccd8:	983f8a1e 	bne	r19,zero,cb04 <__alt_mem_onchip_memory2_0+0xf700cb04>
    ccdc:	8809883a 	mov	r4,r17
    cce0:	000f1bc0 	call	f1bc <__clzsi2>
    cce4:	10800804 	addi	r2,r2,32
    cce8:	10fffe04 	addi	r3,r2,-8
    ccec:	010007c4 	movi	r4,31
    ccf0:	20ff890e 	bge	r4,r3,cb18 <__alt_mem_onchip_memory2_0+0xf700cb18>
    ccf4:	10bff604 	addi	r2,r2,-40
    ccf8:	8884983a 	sll	r2,r17,r2
    ccfc:	0023883a 	mov	r17,zero
    cd00:	1c3f8c0e 	bge	r3,r16,cb34 <__alt_mem_onchip_memory2_0+0xf700cb34>
    cd04:	023fe034 	movhi	r8,65408
    cd08:	423fffc4 	addi	r8,r8,-1
    cd0c:	80e1c83a 	sub	r16,r16,r3
    cd10:	1210703a 	and	r8,r2,r8
    cd14:	003f3806 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cd18:	9007883a 	mov	r3,r18
    cd1c:	0011883a 	mov	r8,zero
    cd20:	0005883a 	mov	r2,zero
    cd24:	003f4c06 	br	ca58 <__alt_mem_onchip_memory2_0+0xf700ca58>
    cd28:	498cb03a 	or	r6,r9,r6
    cd2c:	300cc03a 	cmpne	r6,r6,zero
    cd30:	0007883a 	mov	r3,zero
    cd34:	003f6806 	br	cad8 <__alt_mem_onchip_memory2_0+0xf700cad8>
    cd38:	20009c1e 	bne	r4,zero,cfac <__adddf3+0x630>
    cd3c:	80800044 	addi	r2,r16,1
    cd40:	1141ffcc 	andi	r5,r2,2047
    cd44:	01000044 	movi	r4,1
    cd48:	2140670e 	bge	r4,r5,cee8 <__adddf3+0x56c>
    cd4c:	0101ffc4 	movi	r4,2047
    cd50:	11007f26 	beq	r2,r4,cf50 <__adddf3+0x5d4>
    cd54:	898d883a 	add	r6,r17,r6
    cd58:	4247883a 	add	r3,r8,r9
    cd5c:	3451803a 	cmpltu	r8,r6,r17
    cd60:	40d1883a 	add	r8,r8,r3
    cd64:	402297fa 	slli	r17,r8,31
    cd68:	300cd07a 	srli	r6,r6,1
    cd6c:	4010d07a 	srli	r8,r8,1
    cd70:	1021883a 	mov	r16,r2
    cd74:	89a2b03a 	or	r17,r17,r6
    cd78:	003f1f06 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cd7c:	0081ffc4 	movi	r2,2047
    cd80:	80bf481e 	bne	r16,r2,caa4 <__alt_mem_onchip_memory2_0+0xf700caa4>
    cd84:	003f1c06 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cd88:	843ff844 	addi	r16,r16,-31
    cd8c:	01000804 	movi	r4,32
    cd90:	1406d83a 	srl	r3,r2,r16
    cd94:	41005026 	beq	r8,r4,ced8 <__adddf3+0x55c>
    cd98:	01001004 	movi	r4,64
    cd9c:	2211c83a 	sub	r8,r4,r8
    cda0:	1204983a 	sll	r2,r2,r8
    cda4:	88a2b03a 	or	r17,r17,r2
    cda8:	8822c03a 	cmpne	r17,r17,zero
    cdac:	1c62b03a 	or	r17,r3,r17
    cdb0:	0011883a 	mov	r8,zero
    cdb4:	0021883a 	mov	r16,zero
    cdb8:	003f7106 	br	cb80 <__alt_mem_onchip_memory2_0+0xf700cb80>
    cdbc:	193ff804 	addi	r4,r3,-32
    cdc0:	00800804 	movi	r2,32
    cdc4:	4908d83a 	srl	r4,r9,r4
    cdc8:	18804526 	beq	r3,r2,cee0 <__adddf3+0x564>
    cdcc:	00801004 	movi	r2,64
    cdd0:	10c5c83a 	sub	r2,r2,r3
    cdd4:	4886983a 	sll	r3,r9,r2
    cdd8:	198cb03a 	or	r6,r3,r6
    cddc:	300cc03a 	cmpne	r6,r6,zero
    cde0:	218cb03a 	or	r6,r4,r6
    cde4:	0007883a 	mov	r3,zero
    cde8:	003f3b06 	br	cad8 <__alt_mem_onchip_memory2_0+0xf700cad8>
    cdec:	80002a26 	beq	r16,zero,ce98 <__adddf3+0x51c>
    cdf0:	0101ffc4 	movi	r4,2047
    cdf4:	11006826 	beq	r2,r4,cf98 <__adddf3+0x61c>
    cdf8:	00c7c83a 	sub	r3,zero,r3
    cdfc:	42002034 	orhi	r8,r8,128
    ce00:	01000e04 	movi	r4,56
    ce04:	20c07c16 	blt	r4,r3,cff8 <__adddf3+0x67c>
    ce08:	010007c4 	movi	r4,31
    ce0c:	20c0da16 	blt	r4,r3,d178 <__adddf3+0x7fc>
    ce10:	01000804 	movi	r4,32
    ce14:	20c9c83a 	sub	r4,r4,r3
    ce18:	4114983a 	sll	r10,r8,r4
    ce1c:	88cad83a 	srl	r5,r17,r3
    ce20:	8908983a 	sll	r4,r17,r4
    ce24:	40c6d83a 	srl	r3,r8,r3
    ce28:	5162b03a 	or	r17,r10,r5
    ce2c:	2008c03a 	cmpne	r4,r4,zero
    ce30:	8922b03a 	or	r17,r17,r4
    ce34:	3463c83a 	sub	r17,r6,r17
    ce38:	48c7c83a 	sub	r3,r9,r3
    ce3c:	344d803a 	cmpltu	r6,r6,r17
    ce40:	1991c83a 	sub	r8,r3,r6
    ce44:	1021883a 	mov	r16,r2
    ce48:	3825883a 	mov	r18,r7
    ce4c:	003f2706 	br	caec <__alt_mem_onchip_memory2_0+0xf700caec>
    ce50:	24d0b03a 	or	r8,r4,r19
    ce54:	40001b1e 	bne	r8,zero,cec4 <__adddf3+0x548>
    ce58:	0005883a 	mov	r2,zero
    ce5c:	0007883a 	mov	r3,zero
    ce60:	0021883a 	mov	r16,zero
    ce64:	003f4d06 	br	cb9c <__alt_mem_onchip_memory2_0+0xf700cb9c>
    ce68:	008007c4 	movi	r2,31
    ce6c:	11003c16 	blt	r2,r4,cf60 <__adddf3+0x5e4>
    ce70:	00800804 	movi	r2,32
    ce74:	1105c83a 	sub	r2,r2,r4
    ce78:	488e983a 	sll	r7,r9,r2
    ce7c:	310ad83a 	srl	r5,r6,r4
    ce80:	3084983a 	sll	r2,r6,r2
    ce84:	4912d83a 	srl	r9,r9,r4
    ce88:	394ab03a 	or	r5,r7,r5
    ce8c:	1004c03a 	cmpne	r2,r2,zero
    ce90:	288ab03a 	or	r5,r5,r2
    ce94:	003f5306 	br	cbe4 <__alt_mem_onchip_memory2_0+0xf700cbe4>
    ce98:	4448b03a 	or	r4,r8,r17
    ce9c:	20003e26 	beq	r4,zero,cf98 <__adddf3+0x61c>
    cea0:	00c6303a 	nor	r3,zero,r3
    cea4:	18003a1e 	bne	r3,zero,cf90 <__adddf3+0x614>
    cea8:	3463c83a 	sub	r17,r6,r17
    ceac:	4a07c83a 	sub	r3,r9,r8
    ceb0:	344d803a 	cmpltu	r6,r6,r17
    ceb4:	1991c83a 	sub	r8,r3,r6
    ceb8:	1021883a 	mov	r16,r2
    cebc:	3825883a 	mov	r18,r7
    cec0:	003f0a06 	br	caec <__alt_mem_onchip_memory2_0+0xf700caec>
    cec4:	2023883a 	mov	r17,r4
    cec8:	003f0d06 	br	cb00 <__alt_mem_onchip_memory2_0+0xf700cb00>
    cecc:	0081ffc4 	movi	r2,2047
    ced0:	80bf3f1e 	bne	r16,r2,cbd0 <__alt_mem_onchip_memory2_0+0xf700cbd0>
    ced4:	003ec806 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    ced8:	0005883a 	mov	r2,zero
    cedc:	003fb106 	br	cda4 <__alt_mem_onchip_memory2_0+0xf700cda4>
    cee0:	0007883a 	mov	r3,zero
    cee4:	003fbc06 	br	cdd8 <__alt_mem_onchip_memory2_0+0xf700cdd8>
    cee8:	4444b03a 	or	r2,r8,r17
    ceec:	8000871e 	bne	r16,zero,d10c <__adddf3+0x790>
    cef0:	1000ba26 	beq	r2,zero,d1dc <__adddf3+0x860>
    cef4:	4984b03a 	or	r2,r9,r6
    cef8:	103ebf26 	beq	r2,zero,c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cefc:	8985883a 	add	r2,r17,r6
    cf00:	4247883a 	add	r3,r8,r9
    cf04:	1451803a 	cmpltu	r8,r2,r17
    cf08:	40d1883a 	add	r8,r8,r3
    cf0c:	40c0202c 	andhi	r3,r8,128
    cf10:	1023883a 	mov	r17,r2
    cf14:	183f1a26 	beq	r3,zero,cb80 <__alt_mem_onchip_memory2_0+0xf700cb80>
    cf18:	00bfe034 	movhi	r2,65408
    cf1c:	10bfffc4 	addi	r2,r2,-1
    cf20:	2021883a 	mov	r16,r4
    cf24:	4090703a 	and	r8,r8,r2
    cf28:	003eb306 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cf2c:	4444b03a 	or	r2,r8,r17
    cf30:	8000291e 	bne	r16,zero,cfd8 <__adddf3+0x65c>
    cf34:	10004b1e 	bne	r2,zero,d064 <__adddf3+0x6e8>
    cf38:	4990b03a 	or	r8,r9,r6
    cf3c:	40008b26 	beq	r8,zero,d16c <__adddf3+0x7f0>
    cf40:	4811883a 	mov	r8,r9
    cf44:	3023883a 	mov	r17,r6
    cf48:	3825883a 	mov	r18,r7
    cf4c:	003eaa06 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cf50:	1021883a 	mov	r16,r2
    cf54:	0011883a 	mov	r8,zero
    cf58:	0005883a 	mov	r2,zero
    cf5c:	003f0f06 	br	cb9c <__alt_mem_onchip_memory2_0+0xf700cb9c>
    cf60:	217ff804 	addi	r5,r4,-32
    cf64:	00800804 	movi	r2,32
    cf68:	494ad83a 	srl	r5,r9,r5
    cf6c:	20807d26 	beq	r4,r2,d164 <__adddf3+0x7e8>
    cf70:	00801004 	movi	r2,64
    cf74:	1109c83a 	sub	r4,r2,r4
    cf78:	4912983a 	sll	r9,r9,r4
    cf7c:	498cb03a 	or	r6,r9,r6
    cf80:	300cc03a 	cmpne	r6,r6,zero
    cf84:	298ab03a 	or	r5,r5,r6
    cf88:	0013883a 	mov	r9,zero
    cf8c:	003f1506 	br	cbe4 <__alt_mem_onchip_memory2_0+0xf700cbe4>
    cf90:	0101ffc4 	movi	r4,2047
    cf94:	113f9a1e 	bne	r2,r4,ce00 <__alt_mem_onchip_memory2_0+0xf700ce00>
    cf98:	4811883a 	mov	r8,r9
    cf9c:	3023883a 	mov	r17,r6
    cfa0:	1021883a 	mov	r16,r2
    cfa4:	3825883a 	mov	r18,r7
    cfa8:	003e9306 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cfac:	8000161e 	bne	r16,zero,d008 <__adddf3+0x68c>
    cfb0:	444ab03a 	or	r5,r8,r17
    cfb4:	28005126 	beq	r5,zero,d0fc <__adddf3+0x780>
    cfb8:	0108303a 	nor	r4,zero,r4
    cfbc:	20004d1e 	bne	r4,zero,d0f4 <__adddf3+0x778>
    cfc0:	89a3883a 	add	r17,r17,r6
    cfc4:	4253883a 	add	r9,r8,r9
    cfc8:	898d803a 	cmpltu	r6,r17,r6
    cfcc:	3251883a 	add	r8,r6,r9
    cfd0:	1021883a 	mov	r16,r2
    cfd4:	003f0806 	br	cbf8 <__alt_mem_onchip_memory2_0+0xf700cbf8>
    cfd8:	1000301e 	bne	r2,zero,d09c <__adddf3+0x720>
    cfdc:	4984b03a 	or	r2,r9,r6
    cfe0:	10007126 	beq	r2,zero,d1a8 <__adddf3+0x82c>
    cfe4:	4811883a 	mov	r8,r9
    cfe8:	3023883a 	mov	r17,r6
    cfec:	3825883a 	mov	r18,r7
    cff0:	0401ffc4 	movi	r16,2047
    cff4:	003e8006 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    cff8:	4462b03a 	or	r17,r8,r17
    cffc:	8822c03a 	cmpne	r17,r17,zero
    d000:	0007883a 	mov	r3,zero
    d004:	003f8b06 	br	ce34 <__alt_mem_onchip_memory2_0+0xf700ce34>
    d008:	0141ffc4 	movi	r5,2047
    d00c:	11403b26 	beq	r2,r5,d0fc <__adddf3+0x780>
    d010:	0109c83a 	sub	r4,zero,r4
    d014:	42002034 	orhi	r8,r8,128
    d018:	01400e04 	movi	r5,56
    d01c:	29006716 	blt	r5,r4,d1bc <__adddf3+0x840>
    d020:	014007c4 	movi	r5,31
    d024:	29007016 	blt	r5,r4,d1e8 <__adddf3+0x86c>
    d028:	01400804 	movi	r5,32
    d02c:	290bc83a 	sub	r5,r5,r4
    d030:	4154983a 	sll	r10,r8,r5
    d034:	890ed83a 	srl	r7,r17,r4
    d038:	894a983a 	sll	r5,r17,r5
    d03c:	4108d83a 	srl	r4,r8,r4
    d040:	51e2b03a 	or	r17,r10,r7
    d044:	280ac03a 	cmpne	r5,r5,zero
    d048:	8962b03a 	or	r17,r17,r5
    d04c:	89a3883a 	add	r17,r17,r6
    d050:	2253883a 	add	r9,r4,r9
    d054:	898d803a 	cmpltu	r6,r17,r6
    d058:	3251883a 	add	r8,r6,r9
    d05c:	1021883a 	mov	r16,r2
    d060:	003ee506 	br	cbf8 <__alt_mem_onchip_memory2_0+0xf700cbf8>
    d064:	4984b03a 	or	r2,r9,r6
    d068:	103e6326 	beq	r2,zero,c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d06c:	8987c83a 	sub	r3,r17,r6
    d070:	88c9803a 	cmpltu	r4,r17,r3
    d074:	4245c83a 	sub	r2,r8,r9
    d078:	1105c83a 	sub	r2,r2,r4
    d07c:	1100202c 	andhi	r4,r2,128
    d080:	203ebb26 	beq	r4,zero,cb70 <__alt_mem_onchip_memory2_0+0xf700cb70>
    d084:	3463c83a 	sub	r17,r6,r17
    d088:	4a07c83a 	sub	r3,r9,r8
    d08c:	344d803a 	cmpltu	r6,r6,r17
    d090:	1991c83a 	sub	r8,r3,r6
    d094:	3825883a 	mov	r18,r7
    d098:	003e5706 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d09c:	4984b03a 	or	r2,r9,r6
    d0a0:	10002e26 	beq	r2,zero,d15c <__adddf3+0x7e0>
    d0a4:	4004d0fa 	srli	r2,r8,3
    d0a8:	8822d0fa 	srli	r17,r17,3
    d0ac:	4010977a 	slli	r8,r8,29
    d0b0:	10c0022c 	andhi	r3,r2,8
    d0b4:	4462b03a 	or	r17,r8,r17
    d0b8:	18000826 	beq	r3,zero,d0dc <__adddf3+0x760>
    d0bc:	4808d0fa 	srli	r4,r9,3
    d0c0:	20c0022c 	andhi	r3,r4,8
    d0c4:	1800051e 	bne	r3,zero,d0dc <__adddf3+0x760>
    d0c8:	300cd0fa 	srli	r6,r6,3
    d0cc:	4806977a 	slli	r3,r9,29
    d0d0:	2005883a 	mov	r2,r4
    d0d4:	3825883a 	mov	r18,r7
    d0d8:	19a2b03a 	or	r17,r3,r6
    d0dc:	8810d77a 	srli	r8,r17,29
    d0e0:	100490fa 	slli	r2,r2,3
    d0e4:	882290fa 	slli	r17,r17,3
    d0e8:	0401ffc4 	movi	r16,2047
    d0ec:	4090b03a 	or	r8,r8,r2
    d0f0:	003e4106 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d0f4:	0141ffc4 	movi	r5,2047
    d0f8:	117fc71e 	bne	r2,r5,d018 <__alt_mem_onchip_memory2_0+0xf700d018>
    d0fc:	4811883a 	mov	r8,r9
    d100:	3023883a 	mov	r17,r6
    d104:	1021883a 	mov	r16,r2
    d108:	003e3b06 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d10c:	10002f26 	beq	r2,zero,d1cc <__adddf3+0x850>
    d110:	4984b03a 	or	r2,r9,r6
    d114:	10001126 	beq	r2,zero,d15c <__adddf3+0x7e0>
    d118:	4004d0fa 	srli	r2,r8,3
    d11c:	8822d0fa 	srli	r17,r17,3
    d120:	4010977a 	slli	r8,r8,29
    d124:	10c0022c 	andhi	r3,r2,8
    d128:	4462b03a 	or	r17,r8,r17
    d12c:	183feb26 	beq	r3,zero,d0dc <__alt_mem_onchip_memory2_0+0xf700d0dc>
    d130:	4808d0fa 	srli	r4,r9,3
    d134:	20c0022c 	andhi	r3,r4,8
    d138:	183fe81e 	bne	r3,zero,d0dc <__alt_mem_onchip_memory2_0+0xf700d0dc>
    d13c:	300cd0fa 	srli	r6,r6,3
    d140:	4806977a 	slli	r3,r9,29
    d144:	2005883a 	mov	r2,r4
    d148:	19a2b03a 	or	r17,r3,r6
    d14c:	003fe306 	br	d0dc <__alt_mem_onchip_memory2_0+0xf700d0dc>
    d150:	0011883a 	mov	r8,zero
    d154:	0005883a 	mov	r2,zero
    d158:	003e3f06 	br	ca58 <__alt_mem_onchip_memory2_0+0xf700ca58>
    d15c:	0401ffc4 	movi	r16,2047
    d160:	003e2506 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d164:	0013883a 	mov	r9,zero
    d168:	003f8406 	br	cf7c <__alt_mem_onchip_memory2_0+0xf700cf7c>
    d16c:	0005883a 	mov	r2,zero
    d170:	0007883a 	mov	r3,zero
    d174:	003e8906 	br	cb9c <__alt_mem_onchip_memory2_0+0xf700cb9c>
    d178:	197ff804 	addi	r5,r3,-32
    d17c:	01000804 	movi	r4,32
    d180:	414ad83a 	srl	r5,r8,r5
    d184:	19002426 	beq	r3,r4,d218 <__adddf3+0x89c>
    d188:	01001004 	movi	r4,64
    d18c:	20c7c83a 	sub	r3,r4,r3
    d190:	40c6983a 	sll	r3,r8,r3
    d194:	1c46b03a 	or	r3,r3,r17
    d198:	1806c03a 	cmpne	r3,r3,zero
    d19c:	28e2b03a 	or	r17,r5,r3
    d1a0:	0007883a 	mov	r3,zero
    d1a4:	003f2306 	br	ce34 <__alt_mem_onchip_memory2_0+0xf700ce34>
    d1a8:	0007883a 	mov	r3,zero
    d1ac:	5811883a 	mov	r8,r11
    d1b0:	00bfffc4 	movi	r2,-1
    d1b4:	0401ffc4 	movi	r16,2047
    d1b8:	003e7806 	br	cb9c <__alt_mem_onchip_memory2_0+0xf700cb9c>
    d1bc:	4462b03a 	or	r17,r8,r17
    d1c0:	8822c03a 	cmpne	r17,r17,zero
    d1c4:	0009883a 	mov	r4,zero
    d1c8:	003fa006 	br	d04c <__alt_mem_onchip_memory2_0+0xf700d04c>
    d1cc:	4811883a 	mov	r8,r9
    d1d0:	3023883a 	mov	r17,r6
    d1d4:	0401ffc4 	movi	r16,2047
    d1d8:	003e0706 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d1dc:	4811883a 	mov	r8,r9
    d1e0:	3023883a 	mov	r17,r6
    d1e4:	003e0406 	br	c9f8 <__alt_mem_onchip_memory2_0+0xf700c9f8>
    d1e8:	21fff804 	addi	r7,r4,-32
    d1ec:	01400804 	movi	r5,32
    d1f0:	41ced83a 	srl	r7,r8,r7
    d1f4:	21400a26 	beq	r4,r5,d220 <__adddf3+0x8a4>
    d1f8:	01401004 	movi	r5,64
    d1fc:	2909c83a 	sub	r4,r5,r4
    d200:	4108983a 	sll	r4,r8,r4
    d204:	2448b03a 	or	r4,r4,r17
    d208:	2008c03a 	cmpne	r4,r4,zero
    d20c:	3922b03a 	or	r17,r7,r4
    d210:	0009883a 	mov	r4,zero
    d214:	003f8d06 	br	d04c <__alt_mem_onchip_memory2_0+0xf700d04c>
    d218:	0007883a 	mov	r3,zero
    d21c:	003fdd06 	br	d194 <__alt_mem_onchip_memory2_0+0xf700d194>
    d220:	0009883a 	mov	r4,zero
    d224:	003ff706 	br	d204 <__alt_mem_onchip_memory2_0+0xf700d204>

0000d228 <__divdf3>:
    d228:	defff004 	addi	sp,sp,-64
    d22c:	dc800815 	stw	r18,32(sp)
    d230:	2824d53a 	srli	r18,r5,20
    d234:	dd800c15 	stw	r22,48(sp)
    d238:	282cd7fa 	srli	r22,r5,31
    d23c:	dc000615 	stw	r16,24(sp)
    d240:	04000434 	movhi	r16,16
    d244:	843fffc4 	addi	r16,r16,-1
    d248:	dfc00f15 	stw	ra,60(sp)
    d24c:	df000e15 	stw	fp,56(sp)
    d250:	ddc00d15 	stw	r23,52(sp)
    d254:	dd400b15 	stw	r21,44(sp)
    d258:	dd000a15 	stw	r20,40(sp)
    d25c:	dcc00915 	stw	r19,36(sp)
    d260:	dc400715 	stw	r17,28(sp)
    d264:	9481ffcc 	andi	r18,r18,2047
    d268:	2c20703a 	and	r16,r5,r16
    d26c:	b2003fcc 	andi	r8,r22,255
    d270:	90006126 	beq	r18,zero,d3f8 <__divdf3+0x1d0>
    d274:	0081ffc4 	movi	r2,2047
    d278:	202b883a 	mov	r21,r4
    d27c:	90803726 	beq	r18,r2,d35c <__divdf3+0x134>
    d280:	80800434 	orhi	r2,r16,16
    d284:	100490fa 	slli	r2,r2,3
    d288:	2020d77a 	srli	r16,r4,29
    d28c:	202a90fa 	slli	r21,r4,3
    d290:	94bf0044 	addi	r18,r18,-1023
    d294:	80a0b03a 	or	r16,r16,r2
    d298:	0013883a 	mov	r9,zero
    d29c:	000b883a 	mov	r5,zero
    d2a0:	3806d53a 	srli	r3,r7,20
    d2a4:	382ed7fa 	srli	r23,r7,31
    d2a8:	04400434 	movhi	r17,16
    d2ac:	8c7fffc4 	addi	r17,r17,-1
    d2b0:	18c1ffcc 	andi	r3,r3,2047
    d2b4:	3029883a 	mov	r20,r6
    d2b8:	3c62703a 	and	r17,r7,r17
    d2bc:	bf003fcc 	andi	fp,r23,255
    d2c0:	18006e26 	beq	r3,zero,d47c <__divdf3+0x254>
    d2c4:	0081ffc4 	movi	r2,2047
    d2c8:	18806626 	beq	r3,r2,d464 <__divdf3+0x23c>
    d2cc:	88800434 	orhi	r2,r17,16
    d2d0:	100490fa 	slli	r2,r2,3
    d2d4:	3022d77a 	srli	r17,r6,29
    d2d8:	302890fa 	slli	r20,r6,3
    d2dc:	18ff0044 	addi	r3,r3,-1023
    d2e0:	88a2b03a 	or	r17,r17,r2
    d2e4:	000f883a 	mov	r7,zero
    d2e8:	b5e6f03a 	xor	r19,r22,r23
    d2ec:	3a4cb03a 	or	r6,r7,r9
    d2f0:	008003c4 	movi	r2,15
    d2f4:	9809883a 	mov	r4,r19
    d2f8:	90c7c83a 	sub	r3,r18,r3
    d2fc:	9cc03fcc 	andi	r19,r19,255
    d300:	11809636 	bltu	r2,r6,d55c <__divdf3+0x334>
    d304:	300c90ba 	slli	r6,r6,2
    d308:	00800074 	movhi	r2,1
    d30c:	10b4c704 	addi	r2,r2,-11492
    d310:	308d883a 	add	r6,r6,r2
    d314:	30800017 	ldw	r2,0(r6)
    d318:	1000683a 	jmp	r2
    d31c:	0000d55c 	xori	zero,zero,853
    d320:	0000d394 	movui	zero,846
    d324:	0000d54c 	andi	zero,zero,853
    d328:	0000d388 	cmpgei	zero,zero,846
    d32c:	0000d54c 	andi	zero,zero,853
    d330:	0000d520 	cmpeqi	zero,zero,852
    d334:	0000d54c 	andi	zero,zero,853
    d338:	0000d388 	cmpgei	zero,zero,846
    d33c:	0000d394 	movui	zero,846
    d340:	0000d394 	movui	zero,846
    d344:	0000d520 	cmpeqi	zero,zero,852
    d348:	0000d388 	cmpgei	zero,zero,846
    d34c:	0000d378 	rdprs	zero,zero,845
    d350:	0000d378 	rdprs	zero,zero,845
    d354:	0000d378 	rdprs	zero,zero,845
    d358:	0000d8e4 	muli	zero,zero,867
    d35c:	2404b03a 	or	r2,r4,r16
    d360:	10006c1e 	bne	r2,zero,d514 <__divdf3+0x2ec>
    d364:	02400204 	movi	r9,8
    d368:	0021883a 	mov	r16,zero
    d36c:	002b883a 	mov	r21,zero
    d370:	01400084 	movi	r5,2
    d374:	003fca06 	br	d2a0 <__alt_mem_onchip_memory2_0+0xf700d2a0>
    d378:	8023883a 	mov	r17,r16
    d37c:	a829883a 	mov	r20,r21
    d380:	4039883a 	mov	fp,r8
    d384:	280f883a 	mov	r7,r5
    d388:	00800084 	movi	r2,2
    d38c:	3881601e 	bne	r7,r2,d910 <__divdf3+0x6e8>
    d390:	e027883a 	mov	r19,fp
    d394:	9900004c 	andi	r4,r19,1
    d398:	0081ffc4 	movi	r2,2047
    d39c:	0021883a 	mov	r16,zero
    d3a0:	002b883a 	mov	r21,zero
    d3a4:	1004953a 	slli	r2,r2,20
    d3a8:	20c03fcc 	andi	r3,r4,255
    d3ac:	01400434 	movhi	r5,16
    d3b0:	297fffc4 	addi	r5,r5,-1
    d3b4:	180697fa 	slli	r3,r3,31
    d3b8:	8160703a 	and	r16,r16,r5
    d3bc:	80a0b03a 	or	r16,r16,r2
    d3c0:	80c6b03a 	or	r3,r16,r3
    d3c4:	a805883a 	mov	r2,r21
    d3c8:	dfc00f17 	ldw	ra,60(sp)
    d3cc:	df000e17 	ldw	fp,56(sp)
    d3d0:	ddc00d17 	ldw	r23,52(sp)
    d3d4:	dd800c17 	ldw	r22,48(sp)
    d3d8:	dd400b17 	ldw	r21,44(sp)
    d3dc:	dd000a17 	ldw	r20,40(sp)
    d3e0:	dcc00917 	ldw	r19,36(sp)
    d3e4:	dc800817 	ldw	r18,32(sp)
    d3e8:	dc400717 	ldw	r17,28(sp)
    d3ec:	dc000617 	ldw	r16,24(sp)
    d3f0:	dec01004 	addi	sp,sp,64
    d3f4:	f800283a 	ret
    d3f8:	2404b03a 	or	r2,r4,r16
    d3fc:	2023883a 	mov	r17,r4
    d400:	10003f26 	beq	r2,zero,d500 <__divdf3+0x2d8>
    d404:	80015e26 	beq	r16,zero,d980 <__divdf3+0x758>
    d408:	8009883a 	mov	r4,r16
    d40c:	d9800215 	stw	r6,8(sp)
    d410:	d9c00515 	stw	r7,20(sp)
    d414:	da000415 	stw	r8,16(sp)
    d418:	000f1bc0 	call	f1bc <__clzsi2>
    d41c:	d9800217 	ldw	r6,8(sp)
    d420:	d9c00517 	ldw	r7,20(sp)
    d424:	da000417 	ldw	r8,16(sp)
    d428:	113ffd44 	addi	r4,r2,-11
    d42c:	00c00704 	movi	r3,28
    d430:	19014f16 	blt	r3,r4,d970 <__divdf3+0x748>
    d434:	00c00744 	movi	r3,29
    d438:	157ffe04 	addi	r21,r2,-8
    d43c:	1907c83a 	sub	r3,r3,r4
    d440:	8560983a 	sll	r16,r16,r21
    d444:	88c6d83a 	srl	r3,r17,r3
    d448:	8d6a983a 	sll	r21,r17,r21
    d44c:	1c20b03a 	or	r16,r3,r16
    d450:	1080fcc4 	addi	r2,r2,1011
    d454:	00a5c83a 	sub	r18,zero,r2
    d458:	0013883a 	mov	r9,zero
    d45c:	000b883a 	mov	r5,zero
    d460:	003f8f06 	br	d2a0 <__alt_mem_onchip_memory2_0+0xf700d2a0>
    d464:	3444b03a 	or	r2,r6,r17
    d468:	1000231e 	bne	r2,zero,d4f8 <__divdf3+0x2d0>
    d46c:	0023883a 	mov	r17,zero
    d470:	0029883a 	mov	r20,zero
    d474:	01c00084 	movi	r7,2
    d478:	003f9b06 	br	d2e8 <__alt_mem_onchip_memory2_0+0xf700d2e8>
    d47c:	3444b03a 	or	r2,r6,r17
    d480:	10001926 	beq	r2,zero,d4e8 <__divdf3+0x2c0>
    d484:	88014b26 	beq	r17,zero,d9b4 <__divdf3+0x78c>
    d488:	8809883a 	mov	r4,r17
    d48c:	d9400115 	stw	r5,4(sp)
    d490:	d9800215 	stw	r6,8(sp)
    d494:	da000415 	stw	r8,16(sp)
    d498:	da400315 	stw	r9,12(sp)
    d49c:	000f1bc0 	call	f1bc <__clzsi2>
    d4a0:	d9400117 	ldw	r5,4(sp)
    d4a4:	d9800217 	ldw	r6,8(sp)
    d4a8:	da000417 	ldw	r8,16(sp)
    d4ac:	da400317 	ldw	r9,12(sp)
    d4b0:	113ffd44 	addi	r4,r2,-11
    d4b4:	00c00704 	movi	r3,28
    d4b8:	19013a16 	blt	r3,r4,d9a4 <__divdf3+0x77c>
    d4bc:	00c00744 	movi	r3,29
    d4c0:	153ffe04 	addi	r20,r2,-8
    d4c4:	1907c83a 	sub	r3,r3,r4
    d4c8:	8d22983a 	sll	r17,r17,r20
    d4cc:	30c6d83a 	srl	r3,r6,r3
    d4d0:	3528983a 	sll	r20,r6,r20
    d4d4:	1c62b03a 	or	r17,r3,r17
    d4d8:	1080fcc4 	addi	r2,r2,1011
    d4dc:	0087c83a 	sub	r3,zero,r2
    d4e0:	000f883a 	mov	r7,zero
    d4e4:	003f8006 	br	d2e8 <__alt_mem_onchip_memory2_0+0xf700d2e8>
    d4e8:	0023883a 	mov	r17,zero
    d4ec:	0029883a 	mov	r20,zero
    d4f0:	01c00044 	movi	r7,1
    d4f4:	003f7c06 	br	d2e8 <__alt_mem_onchip_memory2_0+0xf700d2e8>
    d4f8:	01c000c4 	movi	r7,3
    d4fc:	003f7a06 	br	d2e8 <__alt_mem_onchip_memory2_0+0xf700d2e8>
    d500:	02400104 	movi	r9,4
    d504:	0021883a 	mov	r16,zero
    d508:	002b883a 	mov	r21,zero
    d50c:	01400044 	movi	r5,1
    d510:	003f6306 	br	d2a0 <__alt_mem_onchip_memory2_0+0xf700d2a0>
    d514:	02400304 	movi	r9,12
    d518:	014000c4 	movi	r5,3
    d51c:	003f6006 	br	d2a0 <__alt_mem_onchip_memory2_0+0xf700d2a0>
    d520:	04000434 	movhi	r16,16
    d524:	0009883a 	mov	r4,zero
    d528:	843fffc4 	addi	r16,r16,-1
    d52c:	057fffc4 	movi	r21,-1
    d530:	0081ffc4 	movi	r2,2047
    d534:	003f9b06 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    d538:	00c00044 	movi	r3,1
    d53c:	1887c83a 	sub	r3,r3,r2
    d540:	01000e04 	movi	r4,56
    d544:	20c1530e 	bge	r4,r3,da94 <__divdf3+0x86c>
    d548:	9900004c 	andi	r4,r19,1
    d54c:	0005883a 	mov	r2,zero
    d550:	0021883a 	mov	r16,zero
    d554:	002b883a 	mov	r21,zero
    d558:	003f9206 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    d55c:	8c012e36 	bltu	r17,r16,da18 <__divdf3+0x7f0>
    d560:	84412c26 	beq	r16,r17,da14 <__divdf3+0x7ec>
    d564:	a82f883a 	mov	r23,r21
    d568:	18ffffc4 	addi	r3,r3,-1
    d56c:	002b883a 	mov	r21,zero
    d570:	a004d63a 	srli	r2,r20,24
    d574:	8822923a 	slli	r17,r17,8
    d578:	a028923a 	slli	r20,r20,8
    d57c:	8009883a 	mov	r4,r16
    d580:	88acb03a 	or	r22,r17,r2
    d584:	dd000015 	stw	r20,0(sp)
    d588:	b028d43a 	srli	r20,r22,16
    d58c:	d8c00215 	stw	r3,8(sp)
    d590:	b4bfffcc 	andi	r18,r22,65535
    d594:	a00b883a 	mov	r5,r20
    d598:	000c8980 	call	c898 <__udivsi3>
    d59c:	100b883a 	mov	r5,r2
    d5a0:	9009883a 	mov	r4,r18
    d5a4:	1023883a 	mov	r17,r2
    d5a8:	000c9540 	call	c954 <__mulsi3>
    d5ac:	8009883a 	mov	r4,r16
    d5b0:	a00b883a 	mov	r5,r20
    d5b4:	1039883a 	mov	fp,r2
    d5b8:	000c8fc0 	call	c8fc <__umodsi3>
    d5bc:	1004943a 	slli	r2,r2,16
    d5c0:	b808d43a 	srli	r4,r23,16
    d5c4:	d8c00217 	ldw	r3,8(sp)
    d5c8:	2084b03a 	or	r2,r4,r2
    d5cc:	1700062e 	bgeu	r2,fp,d5e8 <__divdf3+0x3c0>
    d5d0:	1585883a 	add	r2,r2,r22
    d5d4:	893fffc4 	addi	r4,r17,-1
    d5d8:	15811d36 	bltu	r2,r22,da50 <__divdf3+0x828>
    d5dc:	17011c2e 	bgeu	r2,fp,da50 <__divdf3+0x828>
    d5e0:	8c7fff84 	addi	r17,r17,-2
    d5e4:	1585883a 	add	r2,r2,r22
    d5e8:	1739c83a 	sub	fp,r2,fp
    d5ec:	a00b883a 	mov	r5,r20
    d5f0:	e009883a 	mov	r4,fp
    d5f4:	d8c00215 	stw	r3,8(sp)
    d5f8:	000c8980 	call	c898 <__udivsi3>
    d5fc:	100b883a 	mov	r5,r2
    d600:	9009883a 	mov	r4,r18
    d604:	1021883a 	mov	r16,r2
    d608:	000c9540 	call	c954 <__mulsi3>
    d60c:	a00b883a 	mov	r5,r20
    d610:	e009883a 	mov	r4,fp
    d614:	d8800415 	stw	r2,16(sp)
    d618:	000c8fc0 	call	c8fc <__umodsi3>
    d61c:	1004943a 	slli	r2,r2,16
    d620:	da000417 	ldw	r8,16(sp)
    d624:	bdffffcc 	andi	r23,r23,65535
    d628:	b884b03a 	or	r2,r23,r2
    d62c:	d8c00217 	ldw	r3,8(sp)
    d630:	1200062e 	bgeu	r2,r8,d64c <__divdf3+0x424>
    d634:	1585883a 	add	r2,r2,r22
    d638:	813fffc4 	addi	r4,r16,-1
    d63c:	15810236 	bltu	r2,r22,da48 <__divdf3+0x820>
    d640:	1201012e 	bgeu	r2,r8,da48 <__divdf3+0x820>
    d644:	843fff84 	addi	r16,r16,-2
    d648:	1585883a 	add	r2,r2,r22
    d64c:	8822943a 	slli	r17,r17,16
    d650:	d9800017 	ldw	r6,0(sp)
    d654:	1211c83a 	sub	r8,r2,r8
    d658:	8c22b03a 	or	r17,r17,r16
    d65c:	373fffcc 	andi	fp,r6,65535
    d660:	8abfffcc 	andi	r10,r17,65535
    d664:	8820d43a 	srli	r16,r17,16
    d668:	5009883a 	mov	r4,r10
    d66c:	e00b883a 	mov	r5,fp
    d670:	302ed43a 	srli	r23,r6,16
    d674:	d8c00215 	stw	r3,8(sp)
    d678:	da000415 	stw	r8,16(sp)
    d67c:	da800115 	stw	r10,4(sp)
    d680:	000c9540 	call	c954 <__mulsi3>
    d684:	800b883a 	mov	r5,r16
    d688:	e009883a 	mov	r4,fp
    d68c:	d8800515 	stw	r2,20(sp)
    d690:	000c9540 	call	c954 <__mulsi3>
    d694:	8009883a 	mov	r4,r16
    d698:	b80b883a 	mov	r5,r23
    d69c:	d8800315 	stw	r2,12(sp)
    d6a0:	000c9540 	call	c954 <__mulsi3>
    d6a4:	da800117 	ldw	r10,4(sp)
    d6a8:	b80b883a 	mov	r5,r23
    d6ac:	1021883a 	mov	r16,r2
    d6b0:	5009883a 	mov	r4,r10
    d6b4:	000c9540 	call	c954 <__mulsi3>
    d6b8:	d9c00517 	ldw	r7,20(sp)
    d6bc:	da400317 	ldw	r9,12(sp)
    d6c0:	d8c00217 	ldw	r3,8(sp)
    d6c4:	3808d43a 	srli	r4,r7,16
    d6c8:	1245883a 	add	r2,r2,r9
    d6cc:	da000417 	ldw	r8,16(sp)
    d6d0:	2085883a 	add	r2,r4,r2
    d6d4:	1240022e 	bgeu	r2,r9,d6e0 <__divdf3+0x4b8>
    d6d8:	01000074 	movhi	r4,1
    d6dc:	8121883a 	add	r16,r16,r4
    d6e0:	1008d43a 	srli	r4,r2,16
    d6e4:	1004943a 	slli	r2,r2,16
    d6e8:	39ffffcc 	andi	r7,r7,65535
    d6ec:	2409883a 	add	r4,r4,r16
    d6f0:	11c5883a 	add	r2,r2,r7
    d6f4:	4100bb36 	bltu	r8,r4,d9e4 <__divdf3+0x7bc>
    d6f8:	4100d726 	beq	r8,r4,da58 <__divdf3+0x830>
    d6fc:	4109c83a 	sub	r4,r8,r4
    d700:	a8a1c83a 	sub	r16,r21,r2
    d704:	ac2b803a 	cmpltu	r21,r21,r16
    d708:	256bc83a 	sub	r21,r4,r21
    d70c:	b540d926 	beq	r22,r21,da74 <__divdf3+0x84c>
    d710:	a00b883a 	mov	r5,r20
    d714:	a809883a 	mov	r4,r21
    d718:	d8c00215 	stw	r3,8(sp)
    d71c:	000c8980 	call	c898 <__udivsi3>
    d720:	100b883a 	mov	r5,r2
    d724:	9009883a 	mov	r4,r18
    d728:	d8800515 	stw	r2,20(sp)
    d72c:	000c9540 	call	c954 <__mulsi3>
    d730:	a809883a 	mov	r4,r21
    d734:	a00b883a 	mov	r5,r20
    d738:	d8800415 	stw	r2,16(sp)
    d73c:	000c8fc0 	call	c8fc <__umodsi3>
    d740:	1004943a 	slli	r2,r2,16
    d744:	8008d43a 	srli	r4,r16,16
    d748:	da000417 	ldw	r8,16(sp)
    d74c:	d8c00217 	ldw	r3,8(sp)
    d750:	2084b03a 	or	r2,r4,r2
    d754:	d9c00517 	ldw	r7,20(sp)
    d758:	1200062e 	bgeu	r2,r8,d774 <__divdf3+0x54c>
    d75c:	1585883a 	add	r2,r2,r22
    d760:	393fffc4 	addi	r4,r7,-1
    d764:	1580c536 	bltu	r2,r22,da7c <__divdf3+0x854>
    d768:	1200c42e 	bgeu	r2,r8,da7c <__divdf3+0x854>
    d76c:	39ffff84 	addi	r7,r7,-2
    d770:	1585883a 	add	r2,r2,r22
    d774:	122bc83a 	sub	r21,r2,r8
    d778:	a00b883a 	mov	r5,r20
    d77c:	a809883a 	mov	r4,r21
    d780:	d8c00215 	stw	r3,8(sp)
    d784:	d9c00515 	stw	r7,20(sp)
    d788:	000c8980 	call	c898 <__udivsi3>
    d78c:	9009883a 	mov	r4,r18
    d790:	100b883a 	mov	r5,r2
    d794:	d8800415 	stw	r2,16(sp)
    d798:	000c9540 	call	c954 <__mulsi3>
    d79c:	a809883a 	mov	r4,r21
    d7a0:	a00b883a 	mov	r5,r20
    d7a4:	1025883a 	mov	r18,r2
    d7a8:	000c8fc0 	call	c8fc <__umodsi3>
    d7ac:	1004943a 	slli	r2,r2,16
    d7b0:	813fffcc 	andi	r4,r16,65535
    d7b4:	d8c00217 	ldw	r3,8(sp)
    d7b8:	20a0b03a 	or	r16,r4,r2
    d7bc:	d9c00517 	ldw	r7,20(sp)
    d7c0:	da000417 	ldw	r8,16(sp)
    d7c4:	8480062e 	bgeu	r16,r18,d7e0 <__divdf3+0x5b8>
    d7c8:	85a1883a 	add	r16,r16,r22
    d7cc:	40bfffc4 	addi	r2,r8,-1
    d7d0:	8580ac36 	bltu	r16,r22,da84 <__divdf3+0x85c>
    d7d4:	8480ab2e 	bgeu	r16,r18,da84 <__divdf3+0x85c>
    d7d8:	423fff84 	addi	r8,r8,-2
    d7dc:	85a1883a 	add	r16,r16,r22
    d7e0:	3804943a 	slli	r2,r7,16
    d7e4:	84a1c83a 	sub	r16,r16,r18
    d7e8:	e009883a 	mov	r4,fp
    d7ec:	1228b03a 	or	r20,r2,r8
    d7f0:	a1ffffcc 	andi	r7,r20,65535
    d7f4:	a024d43a 	srli	r18,r20,16
    d7f8:	380b883a 	mov	r5,r7
    d7fc:	d8c00215 	stw	r3,8(sp)
    d800:	d9c00515 	stw	r7,20(sp)
    d804:	000c9540 	call	c954 <__mulsi3>
    d808:	900b883a 	mov	r5,r18
    d80c:	e009883a 	mov	r4,fp
    d810:	102b883a 	mov	r21,r2
    d814:	000c9540 	call	c954 <__mulsi3>
    d818:	900b883a 	mov	r5,r18
    d81c:	b809883a 	mov	r4,r23
    d820:	1039883a 	mov	fp,r2
    d824:	000c9540 	call	c954 <__mulsi3>
    d828:	d9c00517 	ldw	r7,20(sp)
    d82c:	b80b883a 	mov	r5,r23
    d830:	1025883a 	mov	r18,r2
    d834:	3809883a 	mov	r4,r7
    d838:	000c9540 	call	c954 <__mulsi3>
    d83c:	a808d43a 	srli	r4,r21,16
    d840:	1705883a 	add	r2,r2,fp
    d844:	d8c00217 	ldw	r3,8(sp)
    d848:	2085883a 	add	r2,r4,r2
    d84c:	1700022e 	bgeu	r2,fp,d858 <__divdf3+0x630>
    d850:	01000074 	movhi	r4,1
    d854:	9125883a 	add	r18,r18,r4
    d858:	1008d43a 	srli	r4,r2,16
    d85c:	1004943a 	slli	r2,r2,16
    d860:	ad7fffcc 	andi	r21,r21,65535
    d864:	2489883a 	add	r4,r4,r18
    d868:	1545883a 	add	r2,r2,r21
    d86c:	81003836 	bltu	r16,r4,d950 <__divdf3+0x728>
    d870:	81003626 	beq	r16,r4,d94c <__divdf3+0x724>
    d874:	a5000054 	ori	r20,r20,1
    d878:	1880ffc4 	addi	r2,r3,1023
    d87c:	00bf2e0e 	bge	zero,r2,d538 <__alt_mem_onchip_memory2_0+0xf700d538>
    d880:	a10001cc 	andi	r4,r20,7
    d884:	20000726 	beq	r4,zero,d8a4 <__divdf3+0x67c>
    d888:	a10003cc 	andi	r4,r20,15
    d88c:	01400104 	movi	r5,4
    d890:	21400426 	beq	r4,r5,d8a4 <__divdf3+0x67c>
    d894:	a149883a 	add	r4,r20,r5
    d898:	2529803a 	cmpltu	r20,r4,r20
    d89c:	8d23883a 	add	r17,r17,r20
    d8a0:	2029883a 	mov	r20,r4
    d8a4:	8900402c 	andhi	r4,r17,256
    d8a8:	20000426 	beq	r4,zero,d8bc <__divdf3+0x694>
    d8ac:	18810004 	addi	r2,r3,1024
    d8b0:	00ffc034 	movhi	r3,65280
    d8b4:	18ffffc4 	addi	r3,r3,-1
    d8b8:	88e2703a 	and	r17,r17,r3
    d8bc:	00c1ff84 	movi	r3,2046
    d8c0:	18beb416 	blt	r3,r2,d394 <__alt_mem_onchip_memory2_0+0xf700d394>
    d8c4:	a028d0fa 	srli	r20,r20,3
    d8c8:	882a977a 	slli	r21,r17,29
    d8cc:	8820927a 	slli	r16,r17,9
    d8d0:	1081ffcc 	andi	r2,r2,2047
    d8d4:	ad2ab03a 	or	r21,r21,r20
    d8d8:	8020d33a 	srli	r16,r16,12
    d8dc:	9900004c 	andi	r4,r19,1
    d8e0:	003eb006 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    d8e4:	8080022c 	andhi	r2,r16,8
    d8e8:	10001226 	beq	r2,zero,d934 <__divdf3+0x70c>
    d8ec:	8880022c 	andhi	r2,r17,8
    d8f0:	1000101e 	bne	r2,zero,d934 <__divdf3+0x70c>
    d8f4:	00800434 	movhi	r2,16
    d8f8:	8c000234 	orhi	r16,r17,8
    d8fc:	10bfffc4 	addi	r2,r2,-1
    d900:	b809883a 	mov	r4,r23
    d904:	80a0703a 	and	r16,r16,r2
    d908:	a02b883a 	mov	r21,r20
    d90c:	003f0806 	br	d530 <__alt_mem_onchip_memory2_0+0xf700d530>
    d910:	008000c4 	movi	r2,3
    d914:	3880b126 	beq	r7,r2,dbdc <__divdf3+0x9b4>
    d918:	00800044 	movi	r2,1
    d91c:	38805b1e 	bne	r7,r2,da8c <__divdf3+0x864>
    d920:	e009883a 	mov	r4,fp
    d924:	0005883a 	mov	r2,zero
    d928:	0021883a 	mov	r16,zero
    d92c:	002b883a 	mov	r21,zero
    d930:	003e9c06 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    d934:	00800434 	movhi	r2,16
    d938:	84000234 	orhi	r16,r16,8
    d93c:	10bfffc4 	addi	r2,r2,-1
    d940:	b009883a 	mov	r4,r22
    d944:	80a0703a 	and	r16,r16,r2
    d948:	003ef906 	br	d530 <__alt_mem_onchip_memory2_0+0xf700d530>
    d94c:	103fca26 	beq	r2,zero,d878 <__alt_mem_onchip_memory2_0+0xf700d878>
    d950:	b421883a 	add	r16,r22,r16
    d954:	a17fffc4 	addi	r5,r20,-1
    d958:	8580422e 	bgeu	r16,r22,da64 <__divdf3+0x83c>
    d95c:	2829883a 	mov	r20,r5
    d960:	813fc41e 	bne	r16,r4,d874 <__alt_mem_onchip_memory2_0+0xf700d874>
    d964:	d9800017 	ldw	r6,0(sp)
    d968:	30bfc21e 	bne	r6,r2,d874 <__alt_mem_onchip_memory2_0+0xf700d874>
    d96c:	003fc206 	br	d878 <__alt_mem_onchip_memory2_0+0xf700d878>
    d970:	143ff604 	addi	r16,r2,-40
    d974:	8c20983a 	sll	r16,r17,r16
    d978:	002b883a 	mov	r21,zero
    d97c:	003eb406 	br	d450 <__alt_mem_onchip_memory2_0+0xf700d450>
    d980:	d9800215 	stw	r6,8(sp)
    d984:	d9c00515 	stw	r7,20(sp)
    d988:	da000415 	stw	r8,16(sp)
    d98c:	000f1bc0 	call	f1bc <__clzsi2>
    d990:	10800804 	addi	r2,r2,32
    d994:	da000417 	ldw	r8,16(sp)
    d998:	d9c00517 	ldw	r7,20(sp)
    d99c:	d9800217 	ldw	r6,8(sp)
    d9a0:	003ea106 	br	d428 <__alt_mem_onchip_memory2_0+0xf700d428>
    d9a4:	147ff604 	addi	r17,r2,-40
    d9a8:	3462983a 	sll	r17,r6,r17
    d9ac:	0029883a 	mov	r20,zero
    d9b0:	003ec906 	br	d4d8 <__alt_mem_onchip_memory2_0+0xf700d4d8>
    d9b4:	3009883a 	mov	r4,r6
    d9b8:	d9400115 	stw	r5,4(sp)
    d9bc:	d9800215 	stw	r6,8(sp)
    d9c0:	da000415 	stw	r8,16(sp)
    d9c4:	da400315 	stw	r9,12(sp)
    d9c8:	000f1bc0 	call	f1bc <__clzsi2>
    d9cc:	10800804 	addi	r2,r2,32
    d9d0:	da400317 	ldw	r9,12(sp)
    d9d4:	da000417 	ldw	r8,16(sp)
    d9d8:	d9800217 	ldw	r6,8(sp)
    d9dc:	d9400117 	ldw	r5,4(sp)
    d9e0:	003eb306 	br	d4b0 <__alt_mem_onchip_memory2_0+0xf700d4b0>
    d9e4:	d9800017 	ldw	r6,0(sp)
    d9e8:	a9ab883a 	add	r21,r21,r6
    d9ec:	a98b803a 	cmpltu	r5,r21,r6
    d9f0:	2d8b883a 	add	r5,r5,r22
    d9f4:	2a11883a 	add	r8,r5,r8
    d9f8:	897fffc4 	addi	r5,r17,-1
    d9fc:	b2000c2e 	bgeu	r22,r8,da30 <__divdf3+0x808>
    da00:	41003f36 	bltu	r8,r4,db00 <__divdf3+0x8d8>
    da04:	22006c26 	beq	r4,r8,dbb8 <__divdf3+0x990>
    da08:	4109c83a 	sub	r4,r8,r4
    da0c:	2823883a 	mov	r17,r5
    da10:	003f3b06 	br	d700 <__alt_mem_onchip_memory2_0+0xf700d700>
    da14:	ad3ed336 	bltu	r21,r20,d564 <__alt_mem_onchip_memory2_0+0xf700d564>
    da18:	a804d07a 	srli	r2,r21,1
    da1c:	802e97fa 	slli	r23,r16,31
    da20:	a82a97fa 	slli	r21,r21,31
    da24:	8020d07a 	srli	r16,r16,1
    da28:	b8aeb03a 	or	r23,r23,r2
    da2c:	003ed006 	br	d570 <__alt_mem_onchip_memory2_0+0xf700d570>
    da30:	b23ff51e 	bne	r22,r8,da08 <__alt_mem_onchip_memory2_0+0xf700da08>
    da34:	d9800017 	ldw	r6,0(sp)
    da38:	a9bff12e 	bgeu	r21,r6,da00 <__alt_mem_onchip_memory2_0+0xf700da00>
    da3c:	b109c83a 	sub	r4,r22,r4
    da40:	2823883a 	mov	r17,r5
    da44:	003f2e06 	br	d700 <__alt_mem_onchip_memory2_0+0xf700d700>
    da48:	2021883a 	mov	r16,r4
    da4c:	003eff06 	br	d64c <__alt_mem_onchip_memory2_0+0xf700d64c>
    da50:	2023883a 	mov	r17,r4
    da54:	003ee406 	br	d5e8 <__alt_mem_onchip_memory2_0+0xf700d5e8>
    da58:	a8bfe236 	bltu	r21,r2,d9e4 <__alt_mem_onchip_memory2_0+0xf700d9e4>
    da5c:	0009883a 	mov	r4,zero
    da60:	003f2706 	br	d700 <__alt_mem_onchip_memory2_0+0xf700d700>
    da64:	81002d36 	bltu	r16,r4,db1c <__divdf3+0x8f4>
    da68:	24005626 	beq	r4,r16,dbc4 <__divdf3+0x99c>
    da6c:	2829883a 	mov	r20,r5
    da70:	003f8006 	br	d874 <__alt_mem_onchip_memory2_0+0xf700d874>
    da74:	053fffc4 	movi	r20,-1
    da78:	003f7f06 	br	d878 <__alt_mem_onchip_memory2_0+0xf700d878>
    da7c:	200f883a 	mov	r7,r4
    da80:	003f3c06 	br	d774 <__alt_mem_onchip_memory2_0+0xf700d774>
    da84:	1011883a 	mov	r8,r2
    da88:	003f5506 	br	d7e0 <__alt_mem_onchip_memory2_0+0xf700d7e0>
    da8c:	e027883a 	mov	r19,fp
    da90:	003f7906 	br	d878 <__alt_mem_onchip_memory2_0+0xf700d878>
    da94:	010007c4 	movi	r4,31
    da98:	20c02816 	blt	r4,r3,db3c <__divdf3+0x914>
    da9c:	00800804 	movi	r2,32
    daa0:	10c5c83a 	sub	r2,r2,r3
    daa4:	888a983a 	sll	r5,r17,r2
    daa8:	a0c8d83a 	srl	r4,r20,r3
    daac:	a084983a 	sll	r2,r20,r2
    dab0:	88e2d83a 	srl	r17,r17,r3
    dab4:	2906b03a 	or	r3,r5,r4
    dab8:	1004c03a 	cmpne	r2,r2,zero
    dabc:	1886b03a 	or	r3,r3,r2
    dac0:	188001cc 	andi	r2,r3,7
    dac4:	10000726 	beq	r2,zero,dae4 <__divdf3+0x8bc>
    dac8:	188003cc 	andi	r2,r3,15
    dacc:	01000104 	movi	r4,4
    dad0:	11000426 	beq	r2,r4,dae4 <__divdf3+0x8bc>
    dad4:	1805883a 	mov	r2,r3
    dad8:	10c00104 	addi	r3,r2,4
    dadc:	1885803a 	cmpltu	r2,r3,r2
    dae0:	88a3883a 	add	r17,r17,r2
    dae4:	8880202c 	andhi	r2,r17,128
    dae8:	10002926 	beq	r2,zero,db90 <__divdf3+0x968>
    daec:	9900004c 	andi	r4,r19,1
    daf0:	00800044 	movi	r2,1
    daf4:	0021883a 	mov	r16,zero
    daf8:	002b883a 	mov	r21,zero
    dafc:	003e2906 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    db00:	d9800017 	ldw	r6,0(sp)
    db04:	8c7fff84 	addi	r17,r17,-2
    db08:	a9ab883a 	add	r21,r21,r6
    db0c:	a98b803a 	cmpltu	r5,r21,r6
    db10:	2d8b883a 	add	r5,r5,r22
    db14:	2a11883a 	add	r8,r5,r8
    db18:	003ef806 	br	d6fc <__alt_mem_onchip_memory2_0+0xf700d6fc>
    db1c:	d9800017 	ldw	r6,0(sp)
    db20:	318f883a 	add	r7,r6,r6
    db24:	398b803a 	cmpltu	r5,r7,r6
    db28:	2d8d883a 	add	r6,r5,r22
    db2c:	81a1883a 	add	r16,r16,r6
    db30:	a17fff84 	addi	r5,r20,-2
    db34:	d9c00015 	stw	r7,0(sp)
    db38:	003f8806 	br	d95c <__alt_mem_onchip_memory2_0+0xf700d95c>
    db3c:	013ff844 	movi	r4,-31
    db40:	2085c83a 	sub	r2,r4,r2
    db44:	8888d83a 	srl	r4,r17,r2
    db48:	00800804 	movi	r2,32
    db4c:	18802126 	beq	r3,r2,dbd4 <__divdf3+0x9ac>
    db50:	04001004 	movi	r16,64
    db54:	80c7c83a 	sub	r3,r16,r3
    db58:	88e0983a 	sll	r16,r17,r3
    db5c:	8504b03a 	or	r2,r16,r20
    db60:	1004c03a 	cmpne	r2,r2,zero
    db64:	2084b03a 	or	r2,r4,r2
    db68:	144001cc 	andi	r17,r2,7
    db6c:	88000d1e 	bne	r17,zero,dba4 <__divdf3+0x97c>
    db70:	0021883a 	mov	r16,zero
    db74:	102ad0fa 	srli	r21,r2,3
    db78:	9900004c 	andi	r4,r19,1
    db7c:	0005883a 	mov	r2,zero
    db80:	ac6ab03a 	or	r21,r21,r17
    db84:	003e0706 	br	d3a4 <__alt_mem_onchip_memory2_0+0xf700d3a4>
    db88:	1007883a 	mov	r3,r2
    db8c:	0023883a 	mov	r17,zero
    db90:	8820927a 	slli	r16,r17,9
    db94:	1805883a 	mov	r2,r3
    db98:	8822977a 	slli	r17,r17,29
    db9c:	8020d33a 	srli	r16,r16,12
    dba0:	003ff406 	br	db74 <__alt_mem_onchip_memory2_0+0xf700db74>
    dba4:	10c003cc 	andi	r3,r2,15
    dba8:	01000104 	movi	r4,4
    dbac:	193ff626 	beq	r3,r4,db88 <__alt_mem_onchip_memory2_0+0xf700db88>
    dbb0:	0023883a 	mov	r17,zero
    dbb4:	003fc806 	br	dad8 <__alt_mem_onchip_memory2_0+0xf700dad8>
    dbb8:	a8bfd136 	bltu	r21,r2,db00 <__alt_mem_onchip_memory2_0+0xf700db00>
    dbbc:	2823883a 	mov	r17,r5
    dbc0:	003fa606 	br	da5c <__alt_mem_onchip_memory2_0+0xf700da5c>
    dbc4:	d9800017 	ldw	r6,0(sp)
    dbc8:	30bfd436 	bltu	r6,r2,db1c <__alt_mem_onchip_memory2_0+0xf700db1c>
    dbcc:	2829883a 	mov	r20,r5
    dbd0:	003f6406 	br	d964 <__alt_mem_onchip_memory2_0+0xf700d964>
    dbd4:	0021883a 	mov	r16,zero
    dbd8:	003fe006 	br	db5c <__alt_mem_onchip_memory2_0+0xf700db5c>
    dbdc:	00800434 	movhi	r2,16
    dbe0:	8c000234 	orhi	r16,r17,8
    dbe4:	10bfffc4 	addi	r2,r2,-1
    dbe8:	e009883a 	mov	r4,fp
    dbec:	80a0703a 	and	r16,r16,r2
    dbf0:	a02b883a 	mov	r21,r20
    dbf4:	003e4e06 	br	d530 <__alt_mem_onchip_memory2_0+0xf700d530>

0000dbf8 <__eqdf2>:
    dbf8:	2804d53a 	srli	r2,r5,20
    dbfc:	3806d53a 	srli	r3,r7,20
    dc00:	02000434 	movhi	r8,16
    dc04:	423fffc4 	addi	r8,r8,-1
    dc08:	1081ffcc 	andi	r2,r2,2047
    dc0c:	0281ffc4 	movi	r10,2047
    dc10:	2a12703a 	and	r9,r5,r8
    dc14:	18c1ffcc 	andi	r3,r3,2047
    dc18:	3a10703a 	and	r8,r7,r8
    dc1c:	280ad7fa 	srli	r5,r5,31
    dc20:	380ed7fa 	srli	r7,r7,31
    dc24:	12801026 	beq	r2,r10,dc68 <__eqdf2+0x70>
    dc28:	0281ffc4 	movi	r10,2047
    dc2c:	1a800a26 	beq	r3,r10,dc58 <__eqdf2+0x60>
    dc30:	10c00226 	beq	r2,r3,dc3c <__eqdf2+0x44>
    dc34:	00800044 	movi	r2,1
    dc38:	f800283a 	ret
    dc3c:	4a3ffd1e 	bne	r9,r8,dc34 <__alt_mem_onchip_memory2_0+0xf700dc34>
    dc40:	21bffc1e 	bne	r4,r6,dc34 <__alt_mem_onchip_memory2_0+0xf700dc34>
    dc44:	29c00c26 	beq	r5,r7,dc78 <__eqdf2+0x80>
    dc48:	103ffa1e 	bne	r2,zero,dc34 <__alt_mem_onchip_memory2_0+0xf700dc34>
    dc4c:	2244b03a 	or	r2,r4,r9
    dc50:	1004c03a 	cmpne	r2,r2,zero
    dc54:	f800283a 	ret
    dc58:	3214b03a 	or	r10,r6,r8
    dc5c:	503ff426 	beq	r10,zero,dc30 <__alt_mem_onchip_memory2_0+0xf700dc30>
    dc60:	00800044 	movi	r2,1
    dc64:	f800283a 	ret
    dc68:	2254b03a 	or	r10,r4,r9
    dc6c:	503fee26 	beq	r10,zero,dc28 <__alt_mem_onchip_memory2_0+0xf700dc28>
    dc70:	00800044 	movi	r2,1
    dc74:	f800283a 	ret
    dc78:	0005883a 	mov	r2,zero
    dc7c:	f800283a 	ret

0000dc80 <__gedf2>:
    dc80:	2804d53a 	srli	r2,r5,20
    dc84:	3806d53a 	srli	r3,r7,20
    dc88:	02000434 	movhi	r8,16
    dc8c:	423fffc4 	addi	r8,r8,-1
    dc90:	1081ffcc 	andi	r2,r2,2047
    dc94:	0241ffc4 	movi	r9,2047
    dc98:	2a14703a 	and	r10,r5,r8
    dc9c:	18c1ffcc 	andi	r3,r3,2047
    dca0:	3a10703a 	and	r8,r7,r8
    dca4:	280ad7fa 	srli	r5,r5,31
    dca8:	380ed7fa 	srli	r7,r7,31
    dcac:	12401d26 	beq	r2,r9,dd24 <__gedf2+0xa4>
    dcb0:	0241ffc4 	movi	r9,2047
    dcb4:	1a401226 	beq	r3,r9,dd00 <__gedf2+0x80>
    dcb8:	1000081e 	bne	r2,zero,dcdc <__gedf2+0x5c>
    dcbc:	2296b03a 	or	r11,r4,r10
    dcc0:	5813003a 	cmpeq	r9,r11,zero
    dcc4:	1800091e 	bne	r3,zero,dcec <__gedf2+0x6c>
    dcc8:	3218b03a 	or	r12,r6,r8
    dccc:	6000071e 	bne	r12,zero,dcec <__gedf2+0x6c>
    dcd0:	0005883a 	mov	r2,zero
    dcd4:	5800101e 	bne	r11,zero,dd18 <__gedf2+0x98>
    dcd8:	f800283a 	ret
    dcdc:	18000c1e 	bne	r3,zero,dd10 <__gedf2+0x90>
    dce0:	3212b03a 	or	r9,r6,r8
    dce4:	48000c26 	beq	r9,zero,dd18 <__gedf2+0x98>
    dce8:	0013883a 	mov	r9,zero
    dcec:	39c03fcc 	andi	r7,r7,255
    dcf0:	48000826 	beq	r9,zero,dd14 <__gedf2+0x94>
    dcf4:	38000926 	beq	r7,zero,dd1c <__gedf2+0x9c>
    dcf8:	00800044 	movi	r2,1
    dcfc:	f800283a 	ret
    dd00:	3212b03a 	or	r9,r6,r8
    dd04:	483fec26 	beq	r9,zero,dcb8 <__alt_mem_onchip_memory2_0+0xf700dcb8>
    dd08:	00bfff84 	movi	r2,-2
    dd0c:	f800283a 	ret
    dd10:	39c03fcc 	andi	r7,r7,255
    dd14:	29c00626 	beq	r5,r7,dd30 <__gedf2+0xb0>
    dd18:	283ff726 	beq	r5,zero,dcf8 <__alt_mem_onchip_memory2_0+0xf700dcf8>
    dd1c:	00bfffc4 	movi	r2,-1
    dd20:	f800283a 	ret
    dd24:	2292b03a 	or	r9,r4,r10
    dd28:	483fe126 	beq	r9,zero,dcb0 <__alt_mem_onchip_memory2_0+0xf700dcb0>
    dd2c:	003ff606 	br	dd08 <__alt_mem_onchip_memory2_0+0xf700dd08>
    dd30:	18bff916 	blt	r3,r2,dd18 <__alt_mem_onchip_memory2_0+0xf700dd18>
    dd34:	10c00316 	blt	r2,r3,dd44 <__gedf2+0xc4>
    dd38:	42bff736 	bltu	r8,r10,dd18 <__alt_mem_onchip_memory2_0+0xf700dd18>
    dd3c:	52000326 	beq	r10,r8,dd4c <__gedf2+0xcc>
    dd40:	5200042e 	bgeu	r10,r8,dd54 <__gedf2+0xd4>
    dd44:	283fec1e 	bne	r5,zero,dcf8 <__alt_mem_onchip_memory2_0+0xf700dcf8>
    dd48:	003ff406 	br	dd1c <__alt_mem_onchip_memory2_0+0xf700dd1c>
    dd4c:	313ff236 	bltu	r6,r4,dd18 <__alt_mem_onchip_memory2_0+0xf700dd18>
    dd50:	21bffc36 	bltu	r4,r6,dd44 <__alt_mem_onchip_memory2_0+0xf700dd44>
    dd54:	0005883a 	mov	r2,zero
    dd58:	f800283a 	ret

0000dd5c <__ledf2>:
    dd5c:	2804d53a 	srli	r2,r5,20
    dd60:	3810d53a 	srli	r8,r7,20
    dd64:	00c00434 	movhi	r3,16
    dd68:	18ffffc4 	addi	r3,r3,-1
    dd6c:	1081ffcc 	andi	r2,r2,2047
    dd70:	0241ffc4 	movi	r9,2047
    dd74:	28d4703a 	and	r10,r5,r3
    dd78:	4201ffcc 	andi	r8,r8,2047
    dd7c:	38c6703a 	and	r3,r7,r3
    dd80:	280ad7fa 	srli	r5,r5,31
    dd84:	380ed7fa 	srli	r7,r7,31
    dd88:	12401f26 	beq	r2,r9,de08 <__ledf2+0xac>
    dd8c:	0241ffc4 	movi	r9,2047
    dd90:	42401426 	beq	r8,r9,dde4 <__ledf2+0x88>
    dd94:	1000091e 	bne	r2,zero,ddbc <__ledf2+0x60>
    dd98:	2296b03a 	or	r11,r4,r10
    dd9c:	5813003a 	cmpeq	r9,r11,zero
    dda0:	29403fcc 	andi	r5,r5,255
    dda4:	40000a1e 	bne	r8,zero,ddd0 <__ledf2+0x74>
    dda8:	30d8b03a 	or	r12,r6,r3
    ddac:	6000081e 	bne	r12,zero,ddd0 <__ledf2+0x74>
    ddb0:	0005883a 	mov	r2,zero
    ddb4:	5800111e 	bne	r11,zero,ddfc <__ledf2+0xa0>
    ddb8:	f800283a 	ret
    ddbc:	29403fcc 	andi	r5,r5,255
    ddc0:	40000c1e 	bne	r8,zero,ddf4 <__ledf2+0x98>
    ddc4:	30d2b03a 	or	r9,r6,r3
    ddc8:	48000c26 	beq	r9,zero,ddfc <__ledf2+0xa0>
    ddcc:	0013883a 	mov	r9,zero
    ddd0:	39c03fcc 	andi	r7,r7,255
    ddd4:	48000826 	beq	r9,zero,ddf8 <__ledf2+0x9c>
    ddd8:	38001126 	beq	r7,zero,de20 <__ledf2+0xc4>
    dddc:	00800044 	movi	r2,1
    dde0:	f800283a 	ret
    dde4:	30d2b03a 	or	r9,r6,r3
    dde8:	483fea26 	beq	r9,zero,dd94 <__alt_mem_onchip_memory2_0+0xf700dd94>
    ddec:	00800084 	movi	r2,2
    ddf0:	f800283a 	ret
    ddf4:	39c03fcc 	andi	r7,r7,255
    ddf8:	39400726 	beq	r7,r5,de18 <__ledf2+0xbc>
    ddfc:	2800081e 	bne	r5,zero,de20 <__ledf2+0xc4>
    de00:	00800044 	movi	r2,1
    de04:	f800283a 	ret
    de08:	2292b03a 	or	r9,r4,r10
    de0c:	483fdf26 	beq	r9,zero,dd8c <__alt_mem_onchip_memory2_0+0xf700dd8c>
    de10:	00800084 	movi	r2,2
    de14:	f800283a 	ret
    de18:	4080030e 	bge	r8,r2,de28 <__ledf2+0xcc>
    de1c:	383fef26 	beq	r7,zero,dddc <__alt_mem_onchip_memory2_0+0xf700dddc>
    de20:	00bfffc4 	movi	r2,-1
    de24:	f800283a 	ret
    de28:	123feb16 	blt	r2,r8,ddd8 <__alt_mem_onchip_memory2_0+0xf700ddd8>
    de2c:	1abff336 	bltu	r3,r10,ddfc <__alt_mem_onchip_memory2_0+0xf700ddfc>
    de30:	50c00326 	beq	r10,r3,de40 <__ledf2+0xe4>
    de34:	50c0042e 	bgeu	r10,r3,de48 <__ledf2+0xec>
    de38:	283fe81e 	bne	r5,zero,dddc <__alt_mem_onchip_memory2_0+0xf700dddc>
    de3c:	003ff806 	br	de20 <__alt_mem_onchip_memory2_0+0xf700de20>
    de40:	313fee36 	bltu	r6,r4,ddfc <__alt_mem_onchip_memory2_0+0xf700ddfc>
    de44:	21bffc36 	bltu	r4,r6,de38 <__alt_mem_onchip_memory2_0+0xf700de38>
    de48:	0005883a 	mov	r2,zero
    de4c:	f800283a 	ret

0000de50 <__muldf3>:
    de50:	deffee04 	addi	sp,sp,-72
    de54:	dd000c15 	stw	r20,48(sp)
    de58:	2828d53a 	srli	r20,r5,20
    de5c:	ddc00f15 	stw	r23,60(sp)
    de60:	282ed7fa 	srli	r23,r5,31
    de64:	dc000815 	stw	r16,32(sp)
    de68:	04000434 	movhi	r16,16
    de6c:	dcc00b15 	stw	r19,44(sp)
    de70:	843fffc4 	addi	r16,r16,-1
    de74:	dfc01115 	stw	ra,68(sp)
    de78:	df001015 	stw	fp,64(sp)
    de7c:	dd800e15 	stw	r22,56(sp)
    de80:	dd400d15 	stw	r21,52(sp)
    de84:	dc800a15 	stw	r18,40(sp)
    de88:	dc400915 	stw	r17,36(sp)
    de8c:	a501ffcc 	andi	r20,r20,2047
    de90:	2c20703a 	and	r16,r5,r16
    de94:	b827883a 	mov	r19,r23
    de98:	ba403fcc 	andi	r9,r23,255
    de9c:	a0006026 	beq	r20,zero,e020 <__muldf3+0x1d0>
    dea0:	0081ffc4 	movi	r2,2047
    dea4:	202d883a 	mov	r22,r4
    dea8:	a0803626 	beq	r20,r2,df84 <__muldf3+0x134>
    deac:	84000434 	orhi	r16,r16,16
    deb0:	200ad77a 	srli	r5,r4,29
    deb4:	800490fa 	slli	r2,r16,3
    deb8:	202c90fa 	slli	r22,r4,3
    debc:	a53f0044 	addi	r20,r20,-1023
    dec0:	28a0b03a 	or	r16,r5,r2
    dec4:	002b883a 	mov	r21,zero
    dec8:	000b883a 	mov	r5,zero
    decc:	3804d53a 	srli	r2,r7,20
    ded0:	3838d7fa 	srli	fp,r7,31
    ded4:	04400434 	movhi	r17,16
    ded8:	8c7fffc4 	addi	r17,r17,-1
    dedc:	1081ffcc 	andi	r2,r2,2047
    dee0:	3025883a 	mov	r18,r6
    dee4:	3c62703a 	and	r17,r7,r17
    dee8:	e2803fcc 	andi	r10,fp,255
    deec:	10006d26 	beq	r2,zero,e0a4 <__muldf3+0x254>
    def0:	00c1ffc4 	movi	r3,2047
    def4:	10c06526 	beq	r2,r3,e08c <__muldf3+0x23c>
    def8:	8c400434 	orhi	r17,r17,16
    defc:	300ed77a 	srli	r7,r6,29
    df00:	880690fa 	slli	r3,r17,3
    df04:	302490fa 	slli	r18,r6,3
    df08:	10bf0044 	addi	r2,r2,-1023
    df0c:	38e2b03a 	or	r17,r7,r3
    df10:	000f883a 	mov	r7,zero
    df14:	a087883a 	add	r3,r20,r2
    df18:	010003c4 	movi	r4,15
    df1c:	3d44b03a 	or	r2,r7,r21
    df20:	e5ccf03a 	xor	r6,fp,r23
    df24:	1a000044 	addi	r8,r3,1
    df28:	20809b36 	bltu	r4,r2,e198 <__muldf3+0x348>
    df2c:	100490ba 	slli	r2,r2,2
    df30:	01000074 	movhi	r4,1
    df34:	2137d104 	addi	r4,r4,-8380
    df38:	1105883a 	add	r2,r2,r4
    df3c:	10800017 	ldw	r2,0(r2)
    df40:	1000683a 	jmp	r2
    df44:	0000e198 	cmpnei	zero,zero,902
    df48:	0000dfa4 	muli	zero,zero,894
    df4c:	0000dfa4 	muli	zero,zero,894
    df50:	0000dfa0 	cmpeqi	zero,zero,894
    df54:	0000e174 	movhi	zero,901
    df58:	0000e174 	movhi	zero,901
    df5c:	0000e15c 	xori	zero,zero,901
    df60:	0000dfa0 	cmpeqi	zero,zero,894
    df64:	0000e174 	movhi	zero,901
    df68:	0000e15c 	xori	zero,zero,901
    df6c:	0000e174 	movhi	zero,901
    df70:	0000dfa0 	cmpeqi	zero,zero,894
    df74:	0000e184 	movi	zero,902
    df78:	0000e184 	movi	zero,902
    df7c:	0000e184 	movi	zero,902
    df80:	0000e4e4 	muli	zero,zero,915
    df84:	2404b03a 	or	r2,r4,r16
    df88:	1000711e 	bne	r2,zero,e150 <__muldf3+0x300>
    df8c:	05400204 	movi	r21,8
    df90:	0021883a 	mov	r16,zero
    df94:	002d883a 	mov	r22,zero
    df98:	01400084 	movi	r5,2
    df9c:	003fcb06 	br	decc <__alt_mem_onchip_memory2_0+0xf700decc>
    dfa0:	500d883a 	mov	r6,r10
    dfa4:	00800084 	movi	r2,2
    dfa8:	38805926 	beq	r7,r2,e110 <__muldf3+0x2c0>
    dfac:	008000c4 	movi	r2,3
    dfb0:	3881bb26 	beq	r7,r2,e6a0 <__muldf3+0x850>
    dfb4:	00800044 	movi	r2,1
    dfb8:	3881961e 	bne	r7,r2,e614 <__muldf3+0x7c4>
    dfbc:	3027883a 	mov	r19,r6
    dfc0:	0005883a 	mov	r2,zero
    dfc4:	0021883a 	mov	r16,zero
    dfc8:	002d883a 	mov	r22,zero
    dfcc:	1004953a 	slli	r2,r2,20
    dfd0:	98c03fcc 	andi	r3,r19,255
    dfd4:	04400434 	movhi	r17,16
    dfd8:	8c7fffc4 	addi	r17,r17,-1
    dfdc:	180697fa 	slli	r3,r3,31
    dfe0:	8460703a 	and	r16,r16,r17
    dfe4:	80a0b03a 	or	r16,r16,r2
    dfe8:	80c6b03a 	or	r3,r16,r3
    dfec:	b005883a 	mov	r2,r22
    dff0:	dfc01117 	ldw	ra,68(sp)
    dff4:	df001017 	ldw	fp,64(sp)
    dff8:	ddc00f17 	ldw	r23,60(sp)
    dffc:	dd800e17 	ldw	r22,56(sp)
    e000:	dd400d17 	ldw	r21,52(sp)
    e004:	dd000c17 	ldw	r20,48(sp)
    e008:	dcc00b17 	ldw	r19,44(sp)
    e00c:	dc800a17 	ldw	r18,40(sp)
    e010:	dc400917 	ldw	r17,36(sp)
    e014:	dc000817 	ldw	r16,32(sp)
    e018:	dec01204 	addi	sp,sp,72
    e01c:	f800283a 	ret
    e020:	2404b03a 	or	r2,r4,r16
    e024:	202b883a 	mov	r21,r4
    e028:	10004426 	beq	r2,zero,e13c <__muldf3+0x2ec>
    e02c:	80015126 	beq	r16,zero,e574 <__muldf3+0x724>
    e030:	8009883a 	mov	r4,r16
    e034:	d9800715 	stw	r6,28(sp)
    e038:	d9c00215 	stw	r7,8(sp)
    e03c:	da400415 	stw	r9,16(sp)
    e040:	000f1bc0 	call	f1bc <__clzsi2>
    e044:	d9800717 	ldw	r6,28(sp)
    e048:	d9c00217 	ldw	r7,8(sp)
    e04c:	da400417 	ldw	r9,16(sp)
    e050:	113ffd44 	addi	r4,r2,-11
    e054:	00c00704 	movi	r3,28
    e058:	19014216 	blt	r3,r4,e564 <__muldf3+0x714>
    e05c:	00c00744 	movi	r3,29
    e060:	15bffe04 	addi	r22,r2,-8
    e064:	1907c83a 	sub	r3,r3,r4
    e068:	85a0983a 	sll	r16,r16,r22
    e06c:	a8c6d83a 	srl	r3,r21,r3
    e070:	adac983a 	sll	r22,r21,r22
    e074:	1c20b03a 	or	r16,r3,r16
    e078:	1080fcc4 	addi	r2,r2,1011
    e07c:	00a9c83a 	sub	r20,zero,r2
    e080:	002b883a 	mov	r21,zero
    e084:	000b883a 	mov	r5,zero
    e088:	003f9006 	br	decc <__alt_mem_onchip_memory2_0+0xf700decc>
    e08c:	3446b03a 	or	r3,r6,r17
    e090:	1800281e 	bne	r3,zero,e134 <__muldf3+0x2e4>
    e094:	0023883a 	mov	r17,zero
    e098:	0025883a 	mov	r18,zero
    e09c:	01c00084 	movi	r7,2
    e0a0:	003f9c06 	br	df14 <__alt_mem_onchip_memory2_0+0xf700df14>
    e0a4:	3446b03a 	or	r3,r6,r17
    e0a8:	18001e26 	beq	r3,zero,e124 <__muldf3+0x2d4>
    e0ac:	88012126 	beq	r17,zero,e534 <__muldf3+0x6e4>
    e0b0:	8809883a 	mov	r4,r17
    e0b4:	d9400215 	stw	r5,8(sp)
    e0b8:	d9800715 	stw	r6,28(sp)
    e0bc:	da400415 	stw	r9,16(sp)
    e0c0:	da800315 	stw	r10,12(sp)
    e0c4:	000f1bc0 	call	f1bc <__clzsi2>
    e0c8:	d9400217 	ldw	r5,8(sp)
    e0cc:	d9800717 	ldw	r6,28(sp)
    e0d0:	da400417 	ldw	r9,16(sp)
    e0d4:	da800317 	ldw	r10,12(sp)
    e0d8:	113ffd44 	addi	r4,r2,-11
    e0dc:	00c00704 	movi	r3,28
    e0e0:	19011016 	blt	r3,r4,e524 <__muldf3+0x6d4>
    e0e4:	00c00744 	movi	r3,29
    e0e8:	14bffe04 	addi	r18,r2,-8
    e0ec:	1907c83a 	sub	r3,r3,r4
    e0f0:	8ca2983a 	sll	r17,r17,r18
    e0f4:	30c6d83a 	srl	r3,r6,r3
    e0f8:	34a4983a 	sll	r18,r6,r18
    e0fc:	1c62b03a 	or	r17,r3,r17
    e100:	1080fcc4 	addi	r2,r2,1011
    e104:	0085c83a 	sub	r2,zero,r2
    e108:	000f883a 	mov	r7,zero
    e10c:	003f8106 	br	df14 <__alt_mem_onchip_memory2_0+0xf700df14>
    e110:	3027883a 	mov	r19,r6
    e114:	0081ffc4 	movi	r2,2047
    e118:	0021883a 	mov	r16,zero
    e11c:	002d883a 	mov	r22,zero
    e120:	003faa06 	br	dfcc <__alt_mem_onchip_memory2_0+0xf700dfcc>
    e124:	0023883a 	mov	r17,zero
    e128:	0025883a 	mov	r18,zero
    e12c:	01c00044 	movi	r7,1
    e130:	003f7806 	br	df14 <__alt_mem_onchip_memory2_0+0xf700df14>
    e134:	01c000c4 	movi	r7,3
    e138:	003f7606 	br	df14 <__alt_mem_onchip_memory2_0+0xf700df14>
    e13c:	05400104 	movi	r21,4
    e140:	0021883a 	mov	r16,zero
    e144:	002d883a 	mov	r22,zero
    e148:	01400044 	movi	r5,1
    e14c:	003f5f06 	br	decc <__alt_mem_onchip_memory2_0+0xf700decc>
    e150:	05400304 	movi	r21,12
    e154:	014000c4 	movi	r5,3
    e158:	003f5c06 	br	decc <__alt_mem_onchip_memory2_0+0xf700decc>
    e15c:	04000434 	movhi	r16,16
    e160:	0027883a 	mov	r19,zero
    e164:	843fffc4 	addi	r16,r16,-1
    e168:	05bfffc4 	movi	r22,-1
    e16c:	0081ffc4 	movi	r2,2047
    e170:	003f9606 	br	dfcc <__alt_mem_onchip_memory2_0+0xf700dfcc>
    e174:	8023883a 	mov	r17,r16
    e178:	b025883a 	mov	r18,r22
    e17c:	280f883a 	mov	r7,r5
    e180:	003f8806 	br	dfa4 <__alt_mem_onchip_memory2_0+0xf700dfa4>
    e184:	8023883a 	mov	r17,r16
    e188:	b025883a 	mov	r18,r22
    e18c:	480d883a 	mov	r6,r9
    e190:	280f883a 	mov	r7,r5
    e194:	003f8306 	br	dfa4 <__alt_mem_onchip_memory2_0+0xf700dfa4>
    e198:	b026d43a 	srli	r19,r22,16
    e19c:	902ed43a 	srli	r23,r18,16
    e1a0:	b5bfffcc 	andi	r22,r22,65535
    e1a4:	94bfffcc 	andi	r18,r18,65535
    e1a8:	b00b883a 	mov	r5,r22
    e1ac:	9009883a 	mov	r4,r18
    e1b0:	d8c00515 	stw	r3,20(sp)
    e1b4:	d9800715 	stw	r6,28(sp)
    e1b8:	da000615 	stw	r8,24(sp)
    e1bc:	000c9540 	call	c954 <__mulsi3>
    e1c0:	980b883a 	mov	r5,r19
    e1c4:	9009883a 	mov	r4,r18
    e1c8:	1029883a 	mov	r20,r2
    e1cc:	000c9540 	call	c954 <__mulsi3>
    e1d0:	b80b883a 	mov	r5,r23
    e1d4:	9809883a 	mov	r4,r19
    e1d8:	102b883a 	mov	r21,r2
    e1dc:	000c9540 	call	c954 <__mulsi3>
    e1e0:	b809883a 	mov	r4,r23
    e1e4:	b00b883a 	mov	r5,r22
    e1e8:	1039883a 	mov	fp,r2
    e1ec:	000c9540 	call	c954 <__mulsi3>
    e1f0:	a008d43a 	srli	r4,r20,16
    e1f4:	1545883a 	add	r2,r2,r21
    e1f8:	d8c00517 	ldw	r3,20(sp)
    e1fc:	2085883a 	add	r2,r4,r2
    e200:	d9800717 	ldw	r6,28(sp)
    e204:	da000617 	ldw	r8,24(sp)
    e208:	1540022e 	bgeu	r2,r21,e214 <__muldf3+0x3c4>
    e20c:	01000074 	movhi	r4,1
    e210:	e139883a 	add	fp,fp,r4
    e214:	100e943a 	slli	r7,r2,16
    e218:	1004d43a 	srli	r2,r2,16
    e21c:	882ad43a 	srli	r21,r17,16
    e220:	a53fffcc 	andi	r20,r20,65535
    e224:	8c7fffcc 	andi	r17,r17,65535
    e228:	3d29883a 	add	r20,r7,r20
    e22c:	b00b883a 	mov	r5,r22
    e230:	8809883a 	mov	r4,r17
    e234:	d8c00515 	stw	r3,20(sp)
    e238:	d9800715 	stw	r6,28(sp)
    e23c:	da000615 	stw	r8,24(sp)
    e240:	dd000115 	stw	r20,4(sp)
    e244:	d8800015 	stw	r2,0(sp)
    e248:	000c9540 	call	c954 <__mulsi3>
    e24c:	980b883a 	mov	r5,r19
    e250:	8809883a 	mov	r4,r17
    e254:	d8800215 	stw	r2,8(sp)
    e258:	000c9540 	call	c954 <__mulsi3>
    e25c:	9809883a 	mov	r4,r19
    e260:	a80b883a 	mov	r5,r21
    e264:	1029883a 	mov	r20,r2
    e268:	000c9540 	call	c954 <__mulsi3>
    e26c:	b00b883a 	mov	r5,r22
    e270:	a809883a 	mov	r4,r21
    e274:	d8800415 	stw	r2,16(sp)
    e278:	000c9540 	call	c954 <__mulsi3>
    e27c:	d9c00217 	ldw	r7,8(sp)
    e280:	1505883a 	add	r2,r2,r20
    e284:	d8c00517 	ldw	r3,20(sp)
    e288:	3826d43a 	srli	r19,r7,16
    e28c:	d9800717 	ldw	r6,28(sp)
    e290:	da000617 	ldw	r8,24(sp)
    e294:	9885883a 	add	r2,r19,r2
    e298:	da400417 	ldw	r9,16(sp)
    e29c:	1500022e 	bgeu	r2,r20,e2a8 <__muldf3+0x458>
    e2a0:	01000074 	movhi	r4,1
    e2a4:	4913883a 	add	r9,r9,r4
    e2a8:	1028d43a 	srli	r20,r2,16
    e2ac:	1004943a 	slli	r2,r2,16
    e2b0:	802cd43a 	srli	r22,r16,16
    e2b4:	843fffcc 	andi	r16,r16,65535
    e2b8:	3cffffcc 	andi	r19,r7,65535
    e2bc:	9009883a 	mov	r4,r18
    e2c0:	800b883a 	mov	r5,r16
    e2c4:	a269883a 	add	r20,r20,r9
    e2c8:	d8c00515 	stw	r3,20(sp)
    e2cc:	d9800715 	stw	r6,28(sp)
    e2d0:	da000615 	stw	r8,24(sp)
    e2d4:	14e7883a 	add	r19,r2,r19
    e2d8:	000c9540 	call	c954 <__mulsi3>
    e2dc:	9009883a 	mov	r4,r18
    e2e0:	b00b883a 	mov	r5,r22
    e2e4:	d8800315 	stw	r2,12(sp)
    e2e8:	000c9540 	call	c954 <__mulsi3>
    e2ec:	b809883a 	mov	r4,r23
    e2f0:	b00b883a 	mov	r5,r22
    e2f4:	d8800215 	stw	r2,8(sp)
    e2f8:	000c9540 	call	c954 <__mulsi3>
    e2fc:	b80b883a 	mov	r5,r23
    e300:	8009883a 	mov	r4,r16
    e304:	d8800415 	stw	r2,16(sp)
    e308:	000c9540 	call	c954 <__mulsi3>
    e30c:	da800317 	ldw	r10,12(sp)
    e310:	d9c00217 	ldw	r7,8(sp)
    e314:	d9000017 	ldw	r4,0(sp)
    e318:	502ed43a 	srli	r23,r10,16
    e31c:	11c5883a 	add	r2,r2,r7
    e320:	24e5883a 	add	r18,r4,r19
    e324:	b885883a 	add	r2,r23,r2
    e328:	d8c00517 	ldw	r3,20(sp)
    e32c:	d9800717 	ldw	r6,28(sp)
    e330:	da000617 	ldw	r8,24(sp)
    e334:	da400417 	ldw	r9,16(sp)
    e338:	11c0022e 	bgeu	r2,r7,e344 <__muldf3+0x4f4>
    e33c:	01000074 	movhi	r4,1
    e340:	4913883a 	add	r9,r9,r4
    e344:	100ed43a 	srli	r7,r2,16
    e348:	1004943a 	slli	r2,r2,16
    e34c:	55ffffcc 	andi	r23,r10,65535
    e350:	3a53883a 	add	r9,r7,r9
    e354:	8809883a 	mov	r4,r17
    e358:	800b883a 	mov	r5,r16
    e35c:	d8c00515 	stw	r3,20(sp)
    e360:	d9800715 	stw	r6,28(sp)
    e364:	da000615 	stw	r8,24(sp)
    e368:	da400415 	stw	r9,16(sp)
    e36c:	15ef883a 	add	r23,r2,r23
    e370:	000c9540 	call	c954 <__mulsi3>
    e374:	8809883a 	mov	r4,r17
    e378:	b00b883a 	mov	r5,r22
    e37c:	d8800215 	stw	r2,8(sp)
    e380:	000c9540 	call	c954 <__mulsi3>
    e384:	b00b883a 	mov	r5,r22
    e388:	a809883a 	mov	r4,r21
    e38c:	d8800315 	stw	r2,12(sp)
    e390:	000c9540 	call	c954 <__mulsi3>
    e394:	8009883a 	mov	r4,r16
    e398:	a80b883a 	mov	r5,r21
    e39c:	1023883a 	mov	r17,r2
    e3a0:	000c9540 	call	c954 <__mulsi3>
    e3a4:	d9c00217 	ldw	r7,8(sp)
    e3a8:	da800317 	ldw	r10,12(sp)
    e3ac:	d8c00517 	ldw	r3,20(sp)
    e3b0:	3808d43a 	srli	r4,r7,16
    e3b4:	1285883a 	add	r2,r2,r10
    e3b8:	d9800717 	ldw	r6,28(sp)
    e3bc:	2085883a 	add	r2,r4,r2
    e3c0:	da000617 	ldw	r8,24(sp)
    e3c4:	da400417 	ldw	r9,16(sp)
    e3c8:	1280022e 	bgeu	r2,r10,e3d4 <__muldf3+0x584>
    e3cc:	01000074 	movhi	r4,1
    e3d0:	8923883a 	add	r17,r17,r4
    e3d4:	1008943a 	slli	r4,r2,16
    e3d8:	39ffffcc 	andi	r7,r7,65535
    e3dc:	e4b9883a 	add	fp,fp,r18
    e3e0:	21cf883a 	add	r7,r4,r7
    e3e4:	e4e7803a 	cmpltu	r19,fp,r19
    e3e8:	3d0f883a 	add	r7,r7,r20
    e3ec:	bf39883a 	add	fp,r23,fp
    e3f0:	99c9883a 	add	r4,r19,r7
    e3f4:	e5ef803a 	cmpltu	r23,fp,r23
    e3f8:	490b883a 	add	r5,r9,r4
    e3fc:	1004d43a 	srli	r2,r2,16
    e400:	b965883a 	add	r18,r23,r5
    e404:	24c9803a 	cmpltu	r4,r4,r19
    e408:	3d29803a 	cmpltu	r20,r7,r20
    e40c:	a128b03a 	or	r20,r20,r4
    e410:	95ef803a 	cmpltu	r23,r18,r23
    e414:	2a53803a 	cmpltu	r9,r5,r9
    e418:	a0a9883a 	add	r20,r20,r2
    e41c:	4deeb03a 	or	r23,r9,r23
    e420:	a5ef883a 	add	r23,r20,r23
    e424:	bc63883a 	add	r17,r23,r17
    e428:	e004927a 	slli	r2,fp,9
    e42c:	d9000117 	ldw	r4,4(sp)
    e430:	882e927a 	slli	r23,r17,9
    e434:	9022d5fa 	srli	r17,r18,23
    e438:	e038d5fa 	srli	fp,fp,23
    e43c:	1104b03a 	or	r2,r2,r4
    e440:	9024927a 	slli	r18,r18,9
    e444:	1004c03a 	cmpne	r2,r2,zero
    e448:	bc62b03a 	or	r17,r23,r17
    e44c:	1738b03a 	or	fp,r2,fp
    e450:	8880402c 	andhi	r2,r17,256
    e454:	e4a4b03a 	or	r18,fp,r18
    e458:	10000726 	beq	r2,zero,e478 <__muldf3+0x628>
    e45c:	9006d07a 	srli	r3,r18,1
    e460:	880497fa 	slli	r2,r17,31
    e464:	9480004c 	andi	r18,r18,1
    e468:	8822d07a 	srli	r17,r17,1
    e46c:	1ca4b03a 	or	r18,r3,r18
    e470:	14a4b03a 	or	r18,r2,r18
    e474:	4007883a 	mov	r3,r8
    e478:	1880ffc4 	addi	r2,r3,1023
    e47c:	0080460e 	bge	zero,r2,e598 <__muldf3+0x748>
    e480:	910001cc 	andi	r4,r18,7
    e484:	20000726 	beq	r4,zero,e4a4 <__muldf3+0x654>
    e488:	910003cc 	andi	r4,r18,15
    e48c:	01400104 	movi	r5,4
    e490:	21400426 	beq	r4,r5,e4a4 <__muldf3+0x654>
    e494:	9149883a 	add	r4,r18,r5
    e498:	24a5803a 	cmpltu	r18,r4,r18
    e49c:	8ca3883a 	add	r17,r17,r18
    e4a0:	2025883a 	mov	r18,r4
    e4a4:	8900402c 	andhi	r4,r17,256
    e4a8:	20000426 	beq	r4,zero,e4bc <__muldf3+0x66c>
    e4ac:	18810004 	addi	r2,r3,1024
    e4b0:	00ffc034 	movhi	r3,65280
    e4b4:	18ffffc4 	addi	r3,r3,-1
    e4b8:	88e2703a 	and	r17,r17,r3
    e4bc:	00c1ff84 	movi	r3,2046
    e4c0:	18bf1316 	blt	r3,r2,e110 <__alt_mem_onchip_memory2_0+0xf700e110>
    e4c4:	882c977a 	slli	r22,r17,29
    e4c8:	9024d0fa 	srli	r18,r18,3
    e4cc:	8822927a 	slli	r17,r17,9
    e4d0:	1081ffcc 	andi	r2,r2,2047
    e4d4:	b4acb03a 	or	r22,r22,r18
    e4d8:	8820d33a 	srli	r16,r17,12
    e4dc:	3027883a 	mov	r19,r6
    e4e0:	003eba06 	br	dfcc <__alt_mem_onchip_memory2_0+0xf700dfcc>
    e4e4:	8080022c 	andhi	r2,r16,8
    e4e8:	10000926 	beq	r2,zero,e510 <__muldf3+0x6c0>
    e4ec:	8880022c 	andhi	r2,r17,8
    e4f0:	1000071e 	bne	r2,zero,e510 <__muldf3+0x6c0>
    e4f4:	00800434 	movhi	r2,16
    e4f8:	8c000234 	orhi	r16,r17,8
    e4fc:	10bfffc4 	addi	r2,r2,-1
    e500:	e027883a 	mov	r19,fp
    e504:	80a0703a 	and	r16,r16,r2
    e508:	902d883a 	mov	r22,r18
    e50c:	003f1706 	br	e16c <__alt_mem_onchip_memory2_0+0xf700e16c>
    e510:	00800434 	movhi	r2,16
    e514:	84000234 	orhi	r16,r16,8
    e518:	10bfffc4 	addi	r2,r2,-1
    e51c:	80a0703a 	and	r16,r16,r2
    e520:	003f1206 	br	e16c <__alt_mem_onchip_memory2_0+0xf700e16c>
    e524:	147ff604 	addi	r17,r2,-40
    e528:	3462983a 	sll	r17,r6,r17
    e52c:	0025883a 	mov	r18,zero
    e530:	003ef306 	br	e100 <__alt_mem_onchip_memory2_0+0xf700e100>
    e534:	3009883a 	mov	r4,r6
    e538:	d9400215 	stw	r5,8(sp)
    e53c:	d9800715 	stw	r6,28(sp)
    e540:	da400415 	stw	r9,16(sp)
    e544:	da800315 	stw	r10,12(sp)
    e548:	000f1bc0 	call	f1bc <__clzsi2>
    e54c:	10800804 	addi	r2,r2,32
    e550:	da800317 	ldw	r10,12(sp)
    e554:	da400417 	ldw	r9,16(sp)
    e558:	d9800717 	ldw	r6,28(sp)
    e55c:	d9400217 	ldw	r5,8(sp)
    e560:	003edd06 	br	e0d8 <__alt_mem_onchip_memory2_0+0xf700e0d8>
    e564:	143ff604 	addi	r16,r2,-40
    e568:	ac20983a 	sll	r16,r21,r16
    e56c:	002d883a 	mov	r22,zero
    e570:	003ec106 	br	e078 <__alt_mem_onchip_memory2_0+0xf700e078>
    e574:	d9800715 	stw	r6,28(sp)
    e578:	d9c00215 	stw	r7,8(sp)
    e57c:	da400415 	stw	r9,16(sp)
    e580:	000f1bc0 	call	f1bc <__clzsi2>
    e584:	10800804 	addi	r2,r2,32
    e588:	da400417 	ldw	r9,16(sp)
    e58c:	d9c00217 	ldw	r7,8(sp)
    e590:	d9800717 	ldw	r6,28(sp)
    e594:	003eae06 	br	e050 <__alt_mem_onchip_memory2_0+0xf700e050>
    e598:	00c00044 	movi	r3,1
    e59c:	1887c83a 	sub	r3,r3,r2
    e5a0:	01000e04 	movi	r4,56
    e5a4:	20fe8516 	blt	r4,r3,dfbc <__alt_mem_onchip_memory2_0+0xf700dfbc>
    e5a8:	010007c4 	movi	r4,31
    e5ac:	20c01b16 	blt	r4,r3,e61c <__muldf3+0x7cc>
    e5b0:	00800804 	movi	r2,32
    e5b4:	10c5c83a 	sub	r2,r2,r3
    e5b8:	888a983a 	sll	r5,r17,r2
    e5bc:	90c8d83a 	srl	r4,r18,r3
    e5c0:	9084983a 	sll	r2,r18,r2
    e5c4:	88e2d83a 	srl	r17,r17,r3
    e5c8:	2906b03a 	or	r3,r5,r4
    e5cc:	1004c03a 	cmpne	r2,r2,zero
    e5d0:	1886b03a 	or	r3,r3,r2
    e5d4:	188001cc 	andi	r2,r3,7
    e5d8:	10000726 	beq	r2,zero,e5f8 <__muldf3+0x7a8>
    e5dc:	188003cc 	andi	r2,r3,15
    e5e0:	01000104 	movi	r4,4
    e5e4:	11000426 	beq	r2,r4,e5f8 <__muldf3+0x7a8>
    e5e8:	1805883a 	mov	r2,r3
    e5ec:	10c00104 	addi	r3,r2,4
    e5f0:	1885803a 	cmpltu	r2,r3,r2
    e5f4:	88a3883a 	add	r17,r17,r2
    e5f8:	8880202c 	andhi	r2,r17,128
    e5fc:	10001c26 	beq	r2,zero,e670 <__muldf3+0x820>
    e600:	3027883a 	mov	r19,r6
    e604:	00800044 	movi	r2,1
    e608:	0021883a 	mov	r16,zero
    e60c:	002d883a 	mov	r22,zero
    e610:	003e6e06 	br	dfcc <__alt_mem_onchip_memory2_0+0xf700dfcc>
    e614:	4007883a 	mov	r3,r8
    e618:	003f9706 	br	e478 <__alt_mem_onchip_memory2_0+0xf700e478>
    e61c:	017ff844 	movi	r5,-31
    e620:	2885c83a 	sub	r2,r5,r2
    e624:	888ad83a 	srl	r5,r17,r2
    e628:	00800804 	movi	r2,32
    e62c:	18801a26 	beq	r3,r2,e698 <__muldf3+0x848>
    e630:	01001004 	movi	r4,64
    e634:	20c7c83a 	sub	r3,r4,r3
    e638:	88e2983a 	sll	r17,r17,r3
    e63c:	8ca4b03a 	or	r18,r17,r18
    e640:	9004c03a 	cmpne	r2,r18,zero
    e644:	2884b03a 	or	r2,r5,r2
    e648:	144001cc 	andi	r17,r2,7
    e64c:	88000d1e 	bne	r17,zero,e684 <__muldf3+0x834>
    e650:	0021883a 	mov	r16,zero
    e654:	102cd0fa 	srli	r22,r2,3
    e658:	3027883a 	mov	r19,r6
    e65c:	0005883a 	mov	r2,zero
    e660:	b46cb03a 	or	r22,r22,r17
    e664:	003e5906 	br	dfcc <__alt_mem_onchip_memory2_0+0xf700dfcc>
    e668:	1007883a 	mov	r3,r2
    e66c:	0023883a 	mov	r17,zero
    e670:	8820927a 	slli	r16,r17,9
    e674:	1805883a 	mov	r2,r3
    e678:	8822977a 	slli	r17,r17,29
    e67c:	8020d33a 	srli	r16,r16,12
    e680:	003ff406 	br	e654 <__alt_mem_onchip_memory2_0+0xf700e654>
    e684:	10c003cc 	andi	r3,r2,15
    e688:	01000104 	movi	r4,4
    e68c:	193ff626 	beq	r3,r4,e668 <__alt_mem_onchip_memory2_0+0xf700e668>
    e690:	0023883a 	mov	r17,zero
    e694:	003fd506 	br	e5ec <__alt_mem_onchip_memory2_0+0xf700e5ec>
    e698:	0023883a 	mov	r17,zero
    e69c:	003fe706 	br	e63c <__alt_mem_onchip_memory2_0+0xf700e63c>
    e6a0:	00800434 	movhi	r2,16
    e6a4:	8c000234 	orhi	r16,r17,8
    e6a8:	10bfffc4 	addi	r2,r2,-1
    e6ac:	3027883a 	mov	r19,r6
    e6b0:	80a0703a 	and	r16,r16,r2
    e6b4:	902d883a 	mov	r22,r18
    e6b8:	003eac06 	br	e16c <__alt_mem_onchip_memory2_0+0xf700e16c>

0000e6bc <__subdf3>:
    e6bc:	02000434 	movhi	r8,16
    e6c0:	423fffc4 	addi	r8,r8,-1
    e6c4:	defffb04 	addi	sp,sp,-20
    e6c8:	2a14703a 	and	r10,r5,r8
    e6cc:	3812d53a 	srli	r9,r7,20
    e6d0:	3a10703a 	and	r8,r7,r8
    e6d4:	2006d77a 	srli	r3,r4,29
    e6d8:	3004d77a 	srli	r2,r6,29
    e6dc:	dc000015 	stw	r16,0(sp)
    e6e0:	501490fa 	slli	r10,r10,3
    e6e4:	2820d53a 	srli	r16,r5,20
    e6e8:	401090fa 	slli	r8,r8,3
    e6ec:	dc800215 	stw	r18,8(sp)
    e6f0:	dc400115 	stw	r17,4(sp)
    e6f4:	dfc00415 	stw	ra,16(sp)
    e6f8:	202290fa 	slli	r17,r4,3
    e6fc:	dcc00315 	stw	r19,12(sp)
    e700:	4a41ffcc 	andi	r9,r9,2047
    e704:	0101ffc4 	movi	r4,2047
    e708:	2824d7fa 	srli	r18,r5,31
    e70c:	8401ffcc 	andi	r16,r16,2047
    e710:	50c6b03a 	or	r3,r10,r3
    e714:	380ed7fa 	srli	r7,r7,31
    e718:	408ab03a 	or	r5,r8,r2
    e71c:	300c90fa 	slli	r6,r6,3
    e720:	49009626 	beq	r9,r4,e97c <__subdf3+0x2c0>
    e724:	39c0005c 	xori	r7,r7,1
    e728:	8245c83a 	sub	r2,r16,r9
    e72c:	3c807426 	beq	r7,r18,e900 <__subdf3+0x244>
    e730:	0080af0e 	bge	zero,r2,e9f0 <__subdf3+0x334>
    e734:	48002a1e 	bne	r9,zero,e7e0 <__subdf3+0x124>
    e738:	2988b03a 	or	r4,r5,r6
    e73c:	20009a1e 	bne	r4,zero,e9a8 <__subdf3+0x2ec>
    e740:	888001cc 	andi	r2,r17,7
    e744:	10000726 	beq	r2,zero,e764 <__subdf3+0xa8>
    e748:	888003cc 	andi	r2,r17,15
    e74c:	01000104 	movi	r4,4
    e750:	11000426 	beq	r2,r4,e764 <__subdf3+0xa8>
    e754:	890b883a 	add	r5,r17,r4
    e758:	2c63803a 	cmpltu	r17,r5,r17
    e75c:	1c47883a 	add	r3,r3,r17
    e760:	2823883a 	mov	r17,r5
    e764:	1880202c 	andhi	r2,r3,128
    e768:	10005926 	beq	r2,zero,e8d0 <__subdf3+0x214>
    e76c:	84000044 	addi	r16,r16,1
    e770:	0081ffc4 	movi	r2,2047
    e774:	8080be26 	beq	r16,r2,ea70 <__subdf3+0x3b4>
    e778:	017fe034 	movhi	r5,65408
    e77c:	297fffc4 	addi	r5,r5,-1
    e780:	1946703a 	and	r3,r3,r5
    e784:	1804977a 	slli	r2,r3,29
    e788:	1806927a 	slli	r3,r3,9
    e78c:	8822d0fa 	srli	r17,r17,3
    e790:	8401ffcc 	andi	r16,r16,2047
    e794:	180ad33a 	srli	r5,r3,12
    e798:	9100004c 	andi	r4,r18,1
    e79c:	1444b03a 	or	r2,r2,r17
    e7a0:	80c1ffcc 	andi	r3,r16,2047
    e7a4:	1820953a 	slli	r16,r3,20
    e7a8:	20c03fcc 	andi	r3,r4,255
    e7ac:	180897fa 	slli	r4,r3,31
    e7b0:	00c00434 	movhi	r3,16
    e7b4:	18ffffc4 	addi	r3,r3,-1
    e7b8:	28c6703a 	and	r3,r5,r3
    e7bc:	1c06b03a 	or	r3,r3,r16
    e7c0:	1906b03a 	or	r3,r3,r4
    e7c4:	dfc00417 	ldw	ra,16(sp)
    e7c8:	dcc00317 	ldw	r19,12(sp)
    e7cc:	dc800217 	ldw	r18,8(sp)
    e7d0:	dc400117 	ldw	r17,4(sp)
    e7d4:	dc000017 	ldw	r16,0(sp)
    e7d8:	dec00504 	addi	sp,sp,20
    e7dc:	f800283a 	ret
    e7e0:	0101ffc4 	movi	r4,2047
    e7e4:	813fd626 	beq	r16,r4,e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    e7e8:	29402034 	orhi	r5,r5,128
    e7ec:	01000e04 	movi	r4,56
    e7f0:	2080a316 	blt	r4,r2,ea80 <__subdf3+0x3c4>
    e7f4:	010007c4 	movi	r4,31
    e7f8:	2080c616 	blt	r4,r2,eb14 <__subdf3+0x458>
    e7fc:	01000804 	movi	r4,32
    e800:	2089c83a 	sub	r4,r4,r2
    e804:	2910983a 	sll	r8,r5,r4
    e808:	308ed83a 	srl	r7,r6,r2
    e80c:	3108983a 	sll	r4,r6,r4
    e810:	2884d83a 	srl	r2,r5,r2
    e814:	41ccb03a 	or	r6,r8,r7
    e818:	2008c03a 	cmpne	r4,r4,zero
    e81c:	310cb03a 	or	r6,r6,r4
    e820:	898dc83a 	sub	r6,r17,r6
    e824:	89a3803a 	cmpltu	r17,r17,r6
    e828:	1887c83a 	sub	r3,r3,r2
    e82c:	1c47c83a 	sub	r3,r3,r17
    e830:	3023883a 	mov	r17,r6
    e834:	1880202c 	andhi	r2,r3,128
    e838:	10002326 	beq	r2,zero,e8c8 <__subdf3+0x20c>
    e83c:	04c02034 	movhi	r19,128
    e840:	9cffffc4 	addi	r19,r19,-1
    e844:	1ce6703a 	and	r19,r3,r19
    e848:	98007a26 	beq	r19,zero,ea34 <__subdf3+0x378>
    e84c:	9809883a 	mov	r4,r19
    e850:	000f1bc0 	call	f1bc <__clzsi2>
    e854:	113ffe04 	addi	r4,r2,-8
    e858:	00c007c4 	movi	r3,31
    e85c:	19007b16 	blt	r3,r4,ea4c <__subdf3+0x390>
    e860:	00800804 	movi	r2,32
    e864:	1105c83a 	sub	r2,r2,r4
    e868:	8884d83a 	srl	r2,r17,r2
    e86c:	9906983a 	sll	r3,r19,r4
    e870:	8922983a 	sll	r17,r17,r4
    e874:	10c4b03a 	or	r2,r2,r3
    e878:	24007816 	blt	r4,r16,ea5c <__subdf3+0x3a0>
    e87c:	2421c83a 	sub	r16,r4,r16
    e880:	80c00044 	addi	r3,r16,1
    e884:	010007c4 	movi	r4,31
    e888:	20c09516 	blt	r4,r3,eae0 <__subdf3+0x424>
    e88c:	01400804 	movi	r5,32
    e890:	28cbc83a 	sub	r5,r5,r3
    e894:	88c8d83a 	srl	r4,r17,r3
    e898:	8962983a 	sll	r17,r17,r5
    e89c:	114a983a 	sll	r5,r2,r5
    e8a0:	10c6d83a 	srl	r3,r2,r3
    e8a4:	8804c03a 	cmpne	r2,r17,zero
    e8a8:	290ab03a 	or	r5,r5,r4
    e8ac:	28a2b03a 	or	r17,r5,r2
    e8b0:	0021883a 	mov	r16,zero
    e8b4:	003fa206 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    e8b8:	2090b03a 	or	r8,r4,r2
    e8bc:	40018e26 	beq	r8,zero,eef8 <__subdf3+0x83c>
    e8c0:	1007883a 	mov	r3,r2
    e8c4:	2023883a 	mov	r17,r4
    e8c8:	888001cc 	andi	r2,r17,7
    e8cc:	103f9e1e 	bne	r2,zero,e748 <__alt_mem_onchip_memory2_0+0xf700e748>
    e8d0:	1804977a 	slli	r2,r3,29
    e8d4:	8822d0fa 	srli	r17,r17,3
    e8d8:	1810d0fa 	srli	r8,r3,3
    e8dc:	9100004c 	andi	r4,r18,1
    e8e0:	1444b03a 	or	r2,r2,r17
    e8e4:	00c1ffc4 	movi	r3,2047
    e8e8:	80c02826 	beq	r16,r3,e98c <__subdf3+0x2d0>
    e8ec:	01400434 	movhi	r5,16
    e8f0:	297fffc4 	addi	r5,r5,-1
    e8f4:	80e0703a 	and	r16,r16,r3
    e8f8:	414a703a 	and	r5,r8,r5
    e8fc:	003fa806 	br	e7a0 <__alt_mem_onchip_memory2_0+0xf700e7a0>
    e900:	0080630e 	bge	zero,r2,ea90 <__subdf3+0x3d4>
    e904:	48003026 	beq	r9,zero,e9c8 <__subdf3+0x30c>
    e908:	0101ffc4 	movi	r4,2047
    e90c:	813f8c26 	beq	r16,r4,e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    e910:	29402034 	orhi	r5,r5,128
    e914:	01000e04 	movi	r4,56
    e918:	2080a90e 	bge	r4,r2,ebc0 <__subdf3+0x504>
    e91c:	298cb03a 	or	r6,r5,r6
    e920:	3012c03a 	cmpne	r9,r6,zero
    e924:	0005883a 	mov	r2,zero
    e928:	4c53883a 	add	r9,r9,r17
    e92c:	4c63803a 	cmpltu	r17,r9,r17
    e930:	10c7883a 	add	r3,r2,r3
    e934:	88c7883a 	add	r3,r17,r3
    e938:	4823883a 	mov	r17,r9
    e93c:	1880202c 	andhi	r2,r3,128
    e940:	1000d026 	beq	r2,zero,ec84 <__subdf3+0x5c8>
    e944:	84000044 	addi	r16,r16,1
    e948:	0081ffc4 	movi	r2,2047
    e94c:	8080fe26 	beq	r16,r2,ed48 <__subdf3+0x68c>
    e950:	00bfe034 	movhi	r2,65408
    e954:	10bfffc4 	addi	r2,r2,-1
    e958:	1886703a 	and	r3,r3,r2
    e95c:	880ad07a 	srli	r5,r17,1
    e960:	180497fa 	slli	r2,r3,31
    e964:	8900004c 	andi	r4,r17,1
    e968:	2922b03a 	or	r17,r5,r4
    e96c:	1806d07a 	srli	r3,r3,1
    e970:	1462b03a 	or	r17,r2,r17
    e974:	3825883a 	mov	r18,r7
    e978:	003f7106 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    e97c:	2984b03a 	or	r2,r5,r6
    e980:	103f6826 	beq	r2,zero,e724 <__alt_mem_onchip_memory2_0+0xf700e724>
    e984:	39c03fcc 	andi	r7,r7,255
    e988:	003f6706 	br	e728 <__alt_mem_onchip_memory2_0+0xf700e728>
    e98c:	4086b03a 	or	r3,r8,r2
    e990:	18015226 	beq	r3,zero,eedc <__subdf3+0x820>
    e994:	00c00434 	movhi	r3,16
    e998:	41400234 	orhi	r5,r8,8
    e99c:	18ffffc4 	addi	r3,r3,-1
    e9a0:	28ca703a 	and	r5,r5,r3
    e9a4:	003f7e06 	br	e7a0 <__alt_mem_onchip_memory2_0+0xf700e7a0>
    e9a8:	10bfffc4 	addi	r2,r2,-1
    e9ac:	1000491e 	bne	r2,zero,ead4 <__subdf3+0x418>
    e9b0:	898fc83a 	sub	r7,r17,r6
    e9b4:	89e3803a 	cmpltu	r17,r17,r7
    e9b8:	1947c83a 	sub	r3,r3,r5
    e9bc:	1c47c83a 	sub	r3,r3,r17
    e9c0:	3823883a 	mov	r17,r7
    e9c4:	003f9b06 	br	e834 <__alt_mem_onchip_memory2_0+0xf700e834>
    e9c8:	2988b03a 	or	r4,r5,r6
    e9cc:	203f5c26 	beq	r4,zero,e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    e9d0:	10bfffc4 	addi	r2,r2,-1
    e9d4:	1000931e 	bne	r2,zero,ec24 <__subdf3+0x568>
    e9d8:	898d883a 	add	r6,r17,r6
    e9dc:	3463803a 	cmpltu	r17,r6,r17
    e9e0:	1947883a 	add	r3,r3,r5
    e9e4:	88c7883a 	add	r3,r17,r3
    e9e8:	3023883a 	mov	r17,r6
    e9ec:	003fd306 	br	e93c <__alt_mem_onchip_memory2_0+0xf700e93c>
    e9f0:	1000541e 	bne	r2,zero,eb44 <__subdf3+0x488>
    e9f4:	80800044 	addi	r2,r16,1
    e9f8:	1081ffcc 	andi	r2,r2,2047
    e9fc:	01000044 	movi	r4,1
    ea00:	2080a20e 	bge	r4,r2,ec8c <__subdf3+0x5d0>
    ea04:	8989c83a 	sub	r4,r17,r6
    ea08:	8905803a 	cmpltu	r2,r17,r4
    ea0c:	1967c83a 	sub	r19,r3,r5
    ea10:	98a7c83a 	sub	r19,r19,r2
    ea14:	9880202c 	andhi	r2,r19,128
    ea18:	10006326 	beq	r2,zero,eba8 <__subdf3+0x4ec>
    ea1c:	3463c83a 	sub	r17,r6,r17
    ea20:	28c7c83a 	sub	r3,r5,r3
    ea24:	344d803a 	cmpltu	r6,r6,r17
    ea28:	19a7c83a 	sub	r19,r3,r6
    ea2c:	3825883a 	mov	r18,r7
    ea30:	983f861e 	bne	r19,zero,e84c <__alt_mem_onchip_memory2_0+0xf700e84c>
    ea34:	8809883a 	mov	r4,r17
    ea38:	000f1bc0 	call	f1bc <__clzsi2>
    ea3c:	10800804 	addi	r2,r2,32
    ea40:	113ffe04 	addi	r4,r2,-8
    ea44:	00c007c4 	movi	r3,31
    ea48:	193f850e 	bge	r3,r4,e860 <__alt_mem_onchip_memory2_0+0xf700e860>
    ea4c:	10bff604 	addi	r2,r2,-40
    ea50:	8884983a 	sll	r2,r17,r2
    ea54:	0023883a 	mov	r17,zero
    ea58:	243f880e 	bge	r4,r16,e87c <__alt_mem_onchip_memory2_0+0xf700e87c>
    ea5c:	00ffe034 	movhi	r3,65408
    ea60:	18ffffc4 	addi	r3,r3,-1
    ea64:	8121c83a 	sub	r16,r16,r4
    ea68:	10c6703a 	and	r3,r2,r3
    ea6c:	003f3406 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ea70:	9100004c 	andi	r4,r18,1
    ea74:	000b883a 	mov	r5,zero
    ea78:	0005883a 	mov	r2,zero
    ea7c:	003f4806 	br	e7a0 <__alt_mem_onchip_memory2_0+0xf700e7a0>
    ea80:	298cb03a 	or	r6,r5,r6
    ea84:	300cc03a 	cmpne	r6,r6,zero
    ea88:	0005883a 	mov	r2,zero
    ea8c:	003f6406 	br	e820 <__alt_mem_onchip_memory2_0+0xf700e820>
    ea90:	10009a1e 	bne	r2,zero,ecfc <__subdf3+0x640>
    ea94:	82400044 	addi	r9,r16,1
    ea98:	4881ffcc 	andi	r2,r9,2047
    ea9c:	02800044 	movi	r10,1
    eaa0:	5080670e 	bge	r10,r2,ec40 <__subdf3+0x584>
    eaa4:	0081ffc4 	movi	r2,2047
    eaa8:	4880af26 	beq	r9,r2,ed68 <__subdf3+0x6ac>
    eaac:	898d883a 	add	r6,r17,r6
    eab0:	1945883a 	add	r2,r3,r5
    eab4:	3447803a 	cmpltu	r3,r6,r17
    eab8:	1887883a 	add	r3,r3,r2
    eabc:	182297fa 	slli	r17,r3,31
    eac0:	300cd07a 	srli	r6,r6,1
    eac4:	1806d07a 	srli	r3,r3,1
    eac8:	4821883a 	mov	r16,r9
    eacc:	89a2b03a 	or	r17,r17,r6
    ead0:	003f1b06 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ead4:	0101ffc4 	movi	r4,2047
    ead8:	813f441e 	bne	r16,r4,e7ec <__alt_mem_onchip_memory2_0+0xf700e7ec>
    eadc:	003f1806 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    eae0:	843ff844 	addi	r16,r16,-31
    eae4:	01400804 	movi	r5,32
    eae8:	1408d83a 	srl	r4,r2,r16
    eaec:	19405026 	beq	r3,r5,ec30 <__subdf3+0x574>
    eaf0:	01401004 	movi	r5,64
    eaf4:	28c7c83a 	sub	r3,r5,r3
    eaf8:	10c4983a 	sll	r2,r2,r3
    eafc:	88a2b03a 	or	r17,r17,r2
    eb00:	8822c03a 	cmpne	r17,r17,zero
    eb04:	2462b03a 	or	r17,r4,r17
    eb08:	0007883a 	mov	r3,zero
    eb0c:	0021883a 	mov	r16,zero
    eb10:	003f6d06 	br	e8c8 <__alt_mem_onchip_memory2_0+0xf700e8c8>
    eb14:	11fff804 	addi	r7,r2,-32
    eb18:	01000804 	movi	r4,32
    eb1c:	29ced83a 	srl	r7,r5,r7
    eb20:	11004526 	beq	r2,r4,ec38 <__subdf3+0x57c>
    eb24:	01001004 	movi	r4,64
    eb28:	2089c83a 	sub	r4,r4,r2
    eb2c:	2904983a 	sll	r2,r5,r4
    eb30:	118cb03a 	or	r6,r2,r6
    eb34:	300cc03a 	cmpne	r6,r6,zero
    eb38:	398cb03a 	or	r6,r7,r6
    eb3c:	0005883a 	mov	r2,zero
    eb40:	003f3706 	br	e820 <__alt_mem_onchip_memory2_0+0xf700e820>
    eb44:	80002a26 	beq	r16,zero,ebf0 <__subdf3+0x534>
    eb48:	0101ffc4 	movi	r4,2047
    eb4c:	49006626 	beq	r9,r4,ece8 <__subdf3+0x62c>
    eb50:	0085c83a 	sub	r2,zero,r2
    eb54:	18c02034 	orhi	r3,r3,128
    eb58:	01000e04 	movi	r4,56
    eb5c:	20807e16 	blt	r4,r2,ed58 <__subdf3+0x69c>
    eb60:	010007c4 	movi	r4,31
    eb64:	2080e716 	blt	r4,r2,ef04 <__subdf3+0x848>
    eb68:	01000804 	movi	r4,32
    eb6c:	2089c83a 	sub	r4,r4,r2
    eb70:	1914983a 	sll	r10,r3,r4
    eb74:	8890d83a 	srl	r8,r17,r2
    eb78:	8908983a 	sll	r4,r17,r4
    eb7c:	1884d83a 	srl	r2,r3,r2
    eb80:	5222b03a 	or	r17,r10,r8
    eb84:	2006c03a 	cmpne	r3,r4,zero
    eb88:	88e2b03a 	or	r17,r17,r3
    eb8c:	3463c83a 	sub	r17,r6,r17
    eb90:	2885c83a 	sub	r2,r5,r2
    eb94:	344d803a 	cmpltu	r6,r6,r17
    eb98:	1187c83a 	sub	r3,r2,r6
    eb9c:	4821883a 	mov	r16,r9
    eba0:	3825883a 	mov	r18,r7
    eba4:	003f2306 	br	e834 <__alt_mem_onchip_memory2_0+0xf700e834>
    eba8:	24d0b03a 	or	r8,r4,r19
    ebac:	40001b1e 	bne	r8,zero,ec1c <__subdf3+0x560>
    ebb0:	0005883a 	mov	r2,zero
    ebb4:	0009883a 	mov	r4,zero
    ebb8:	0021883a 	mov	r16,zero
    ebbc:	003f4906 	br	e8e4 <__alt_mem_onchip_memory2_0+0xf700e8e4>
    ebc0:	010007c4 	movi	r4,31
    ebc4:	20803a16 	blt	r4,r2,ecb0 <__subdf3+0x5f4>
    ebc8:	01000804 	movi	r4,32
    ebcc:	2089c83a 	sub	r4,r4,r2
    ebd0:	2912983a 	sll	r9,r5,r4
    ebd4:	3090d83a 	srl	r8,r6,r2
    ebd8:	3108983a 	sll	r4,r6,r4
    ebdc:	2884d83a 	srl	r2,r5,r2
    ebe0:	4a12b03a 	or	r9,r9,r8
    ebe4:	2008c03a 	cmpne	r4,r4,zero
    ebe8:	4912b03a 	or	r9,r9,r4
    ebec:	003f4e06 	br	e928 <__alt_mem_onchip_memory2_0+0xf700e928>
    ebf0:	1c48b03a 	or	r4,r3,r17
    ebf4:	20003c26 	beq	r4,zero,ece8 <__subdf3+0x62c>
    ebf8:	0084303a 	nor	r2,zero,r2
    ebfc:	1000381e 	bne	r2,zero,ece0 <__subdf3+0x624>
    ec00:	3463c83a 	sub	r17,r6,r17
    ec04:	28c5c83a 	sub	r2,r5,r3
    ec08:	344d803a 	cmpltu	r6,r6,r17
    ec0c:	1187c83a 	sub	r3,r2,r6
    ec10:	4821883a 	mov	r16,r9
    ec14:	3825883a 	mov	r18,r7
    ec18:	003f0606 	br	e834 <__alt_mem_onchip_memory2_0+0xf700e834>
    ec1c:	2023883a 	mov	r17,r4
    ec20:	003f0906 	br	e848 <__alt_mem_onchip_memory2_0+0xf700e848>
    ec24:	0101ffc4 	movi	r4,2047
    ec28:	813f3a1e 	bne	r16,r4,e914 <__alt_mem_onchip_memory2_0+0xf700e914>
    ec2c:	003ec406 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ec30:	0005883a 	mov	r2,zero
    ec34:	003fb106 	br	eafc <__alt_mem_onchip_memory2_0+0xf700eafc>
    ec38:	0005883a 	mov	r2,zero
    ec3c:	003fbc06 	br	eb30 <__alt_mem_onchip_memory2_0+0xf700eb30>
    ec40:	1c44b03a 	or	r2,r3,r17
    ec44:	80008e1e 	bne	r16,zero,ee80 <__subdf3+0x7c4>
    ec48:	1000c826 	beq	r2,zero,ef6c <__subdf3+0x8b0>
    ec4c:	2984b03a 	or	r2,r5,r6
    ec50:	103ebb26 	beq	r2,zero,e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ec54:	8989883a 	add	r4,r17,r6
    ec58:	1945883a 	add	r2,r3,r5
    ec5c:	2447803a 	cmpltu	r3,r4,r17
    ec60:	1887883a 	add	r3,r3,r2
    ec64:	1880202c 	andhi	r2,r3,128
    ec68:	2023883a 	mov	r17,r4
    ec6c:	103f1626 	beq	r2,zero,e8c8 <__alt_mem_onchip_memory2_0+0xf700e8c8>
    ec70:	00bfe034 	movhi	r2,65408
    ec74:	10bfffc4 	addi	r2,r2,-1
    ec78:	5021883a 	mov	r16,r10
    ec7c:	1886703a 	and	r3,r3,r2
    ec80:	003eaf06 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ec84:	3825883a 	mov	r18,r7
    ec88:	003f0f06 	br	e8c8 <__alt_mem_onchip_memory2_0+0xf700e8c8>
    ec8c:	1c44b03a 	or	r2,r3,r17
    ec90:	8000251e 	bne	r16,zero,ed28 <__subdf3+0x66c>
    ec94:	1000661e 	bne	r2,zero,ee30 <__subdf3+0x774>
    ec98:	2990b03a 	or	r8,r5,r6
    ec9c:	40009626 	beq	r8,zero,eef8 <__subdf3+0x83c>
    eca0:	2807883a 	mov	r3,r5
    eca4:	3023883a 	mov	r17,r6
    eca8:	3825883a 	mov	r18,r7
    ecac:	003ea406 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ecb0:	127ff804 	addi	r9,r2,-32
    ecb4:	01000804 	movi	r4,32
    ecb8:	2a52d83a 	srl	r9,r5,r9
    ecbc:	11008c26 	beq	r2,r4,eef0 <__subdf3+0x834>
    ecc0:	01001004 	movi	r4,64
    ecc4:	2085c83a 	sub	r2,r4,r2
    ecc8:	2884983a 	sll	r2,r5,r2
    eccc:	118cb03a 	or	r6,r2,r6
    ecd0:	300cc03a 	cmpne	r6,r6,zero
    ecd4:	4992b03a 	or	r9,r9,r6
    ecd8:	0005883a 	mov	r2,zero
    ecdc:	003f1206 	br	e928 <__alt_mem_onchip_memory2_0+0xf700e928>
    ece0:	0101ffc4 	movi	r4,2047
    ece4:	493f9c1e 	bne	r9,r4,eb58 <__alt_mem_onchip_memory2_0+0xf700eb58>
    ece8:	2807883a 	mov	r3,r5
    ecec:	3023883a 	mov	r17,r6
    ecf0:	4821883a 	mov	r16,r9
    ecf4:	3825883a 	mov	r18,r7
    ecf8:	003e9106 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ecfc:	80001f1e 	bne	r16,zero,ed7c <__subdf3+0x6c0>
    ed00:	1c48b03a 	or	r4,r3,r17
    ed04:	20005a26 	beq	r4,zero,ee70 <__subdf3+0x7b4>
    ed08:	0084303a 	nor	r2,zero,r2
    ed0c:	1000561e 	bne	r2,zero,ee68 <__subdf3+0x7ac>
    ed10:	89a3883a 	add	r17,r17,r6
    ed14:	1945883a 	add	r2,r3,r5
    ed18:	898d803a 	cmpltu	r6,r17,r6
    ed1c:	3087883a 	add	r3,r6,r2
    ed20:	4821883a 	mov	r16,r9
    ed24:	003f0506 	br	e93c <__alt_mem_onchip_memory2_0+0xf700e93c>
    ed28:	10002b1e 	bne	r2,zero,edd8 <__subdf3+0x71c>
    ed2c:	2984b03a 	or	r2,r5,r6
    ed30:	10008026 	beq	r2,zero,ef34 <__subdf3+0x878>
    ed34:	2807883a 	mov	r3,r5
    ed38:	3023883a 	mov	r17,r6
    ed3c:	3825883a 	mov	r18,r7
    ed40:	0401ffc4 	movi	r16,2047
    ed44:	003e7e06 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ed48:	3809883a 	mov	r4,r7
    ed4c:	0011883a 	mov	r8,zero
    ed50:	0005883a 	mov	r2,zero
    ed54:	003ee306 	br	e8e4 <__alt_mem_onchip_memory2_0+0xf700e8e4>
    ed58:	1c62b03a 	or	r17,r3,r17
    ed5c:	8822c03a 	cmpne	r17,r17,zero
    ed60:	0005883a 	mov	r2,zero
    ed64:	003f8906 	br	eb8c <__alt_mem_onchip_memory2_0+0xf700eb8c>
    ed68:	3809883a 	mov	r4,r7
    ed6c:	4821883a 	mov	r16,r9
    ed70:	0011883a 	mov	r8,zero
    ed74:	0005883a 	mov	r2,zero
    ed78:	003eda06 	br	e8e4 <__alt_mem_onchip_memory2_0+0xf700e8e4>
    ed7c:	0101ffc4 	movi	r4,2047
    ed80:	49003b26 	beq	r9,r4,ee70 <__subdf3+0x7b4>
    ed84:	0085c83a 	sub	r2,zero,r2
    ed88:	18c02034 	orhi	r3,r3,128
    ed8c:	01000e04 	movi	r4,56
    ed90:	20806e16 	blt	r4,r2,ef4c <__subdf3+0x890>
    ed94:	010007c4 	movi	r4,31
    ed98:	20807716 	blt	r4,r2,ef78 <__subdf3+0x8bc>
    ed9c:	01000804 	movi	r4,32
    eda0:	2089c83a 	sub	r4,r4,r2
    eda4:	1914983a 	sll	r10,r3,r4
    eda8:	8890d83a 	srl	r8,r17,r2
    edac:	8908983a 	sll	r4,r17,r4
    edb0:	1884d83a 	srl	r2,r3,r2
    edb4:	5222b03a 	or	r17,r10,r8
    edb8:	2006c03a 	cmpne	r3,r4,zero
    edbc:	88e2b03a 	or	r17,r17,r3
    edc0:	89a3883a 	add	r17,r17,r6
    edc4:	1145883a 	add	r2,r2,r5
    edc8:	898d803a 	cmpltu	r6,r17,r6
    edcc:	3087883a 	add	r3,r6,r2
    edd0:	4821883a 	mov	r16,r9
    edd4:	003ed906 	br	e93c <__alt_mem_onchip_memory2_0+0xf700e93c>
    edd8:	2984b03a 	or	r2,r5,r6
    eddc:	10004226 	beq	r2,zero,eee8 <__subdf3+0x82c>
    ede0:	1808d0fa 	srli	r4,r3,3
    ede4:	8822d0fa 	srli	r17,r17,3
    ede8:	1806977a 	slli	r3,r3,29
    edec:	2080022c 	andhi	r2,r4,8
    edf0:	1c62b03a 	or	r17,r3,r17
    edf4:	10000826 	beq	r2,zero,ee18 <__subdf3+0x75c>
    edf8:	2812d0fa 	srli	r9,r5,3
    edfc:	4880022c 	andhi	r2,r9,8
    ee00:	1000051e 	bne	r2,zero,ee18 <__subdf3+0x75c>
    ee04:	300cd0fa 	srli	r6,r6,3
    ee08:	2804977a 	slli	r2,r5,29
    ee0c:	4809883a 	mov	r4,r9
    ee10:	3825883a 	mov	r18,r7
    ee14:	11a2b03a 	or	r17,r2,r6
    ee18:	8806d77a 	srli	r3,r17,29
    ee1c:	200890fa 	slli	r4,r4,3
    ee20:	882290fa 	slli	r17,r17,3
    ee24:	0401ffc4 	movi	r16,2047
    ee28:	1906b03a 	or	r3,r3,r4
    ee2c:	003e4406 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ee30:	2984b03a 	or	r2,r5,r6
    ee34:	103e4226 	beq	r2,zero,e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ee38:	8989c83a 	sub	r4,r17,r6
    ee3c:	8911803a 	cmpltu	r8,r17,r4
    ee40:	1945c83a 	sub	r2,r3,r5
    ee44:	1205c83a 	sub	r2,r2,r8
    ee48:	1200202c 	andhi	r8,r2,128
    ee4c:	403e9a26 	beq	r8,zero,e8b8 <__alt_mem_onchip_memory2_0+0xf700e8b8>
    ee50:	3463c83a 	sub	r17,r6,r17
    ee54:	28c5c83a 	sub	r2,r5,r3
    ee58:	344d803a 	cmpltu	r6,r6,r17
    ee5c:	1187c83a 	sub	r3,r2,r6
    ee60:	3825883a 	mov	r18,r7
    ee64:	003e3606 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ee68:	0101ffc4 	movi	r4,2047
    ee6c:	493fc71e 	bne	r9,r4,ed8c <__alt_mem_onchip_memory2_0+0xf700ed8c>
    ee70:	2807883a 	mov	r3,r5
    ee74:	3023883a 	mov	r17,r6
    ee78:	4821883a 	mov	r16,r9
    ee7c:	003e3006 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ee80:	10003626 	beq	r2,zero,ef5c <__subdf3+0x8a0>
    ee84:	2984b03a 	or	r2,r5,r6
    ee88:	10001726 	beq	r2,zero,eee8 <__subdf3+0x82c>
    ee8c:	1808d0fa 	srli	r4,r3,3
    ee90:	8822d0fa 	srli	r17,r17,3
    ee94:	1806977a 	slli	r3,r3,29
    ee98:	2080022c 	andhi	r2,r4,8
    ee9c:	1c62b03a 	or	r17,r3,r17
    eea0:	10000726 	beq	r2,zero,eec0 <__subdf3+0x804>
    eea4:	2812d0fa 	srli	r9,r5,3
    eea8:	4880022c 	andhi	r2,r9,8
    eeac:	1000041e 	bne	r2,zero,eec0 <__subdf3+0x804>
    eeb0:	300cd0fa 	srli	r6,r6,3
    eeb4:	2804977a 	slli	r2,r5,29
    eeb8:	4809883a 	mov	r4,r9
    eebc:	11a2b03a 	or	r17,r2,r6
    eec0:	8806d77a 	srli	r3,r17,29
    eec4:	200890fa 	slli	r4,r4,3
    eec8:	882290fa 	slli	r17,r17,3
    eecc:	3825883a 	mov	r18,r7
    eed0:	1906b03a 	or	r3,r3,r4
    eed4:	0401ffc4 	movi	r16,2047
    eed8:	003e1906 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    eedc:	000b883a 	mov	r5,zero
    eee0:	0005883a 	mov	r2,zero
    eee4:	003e2e06 	br	e7a0 <__alt_mem_onchip_memory2_0+0xf700e7a0>
    eee8:	0401ffc4 	movi	r16,2047
    eeec:	003e1406 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    eef0:	0005883a 	mov	r2,zero
    eef4:	003f7506 	br	eccc <__alt_mem_onchip_memory2_0+0xf700eccc>
    eef8:	0005883a 	mov	r2,zero
    eefc:	0009883a 	mov	r4,zero
    ef00:	003e7806 	br	e8e4 <__alt_mem_onchip_memory2_0+0xf700e8e4>
    ef04:	123ff804 	addi	r8,r2,-32
    ef08:	01000804 	movi	r4,32
    ef0c:	1a10d83a 	srl	r8,r3,r8
    ef10:	11002526 	beq	r2,r4,efa8 <__subdf3+0x8ec>
    ef14:	01001004 	movi	r4,64
    ef18:	2085c83a 	sub	r2,r4,r2
    ef1c:	1884983a 	sll	r2,r3,r2
    ef20:	1444b03a 	or	r2,r2,r17
    ef24:	1004c03a 	cmpne	r2,r2,zero
    ef28:	40a2b03a 	or	r17,r8,r2
    ef2c:	0005883a 	mov	r2,zero
    ef30:	003f1606 	br	eb8c <__alt_mem_onchip_memory2_0+0xf700eb8c>
    ef34:	02000434 	movhi	r8,16
    ef38:	0009883a 	mov	r4,zero
    ef3c:	423fffc4 	addi	r8,r8,-1
    ef40:	00bfffc4 	movi	r2,-1
    ef44:	0401ffc4 	movi	r16,2047
    ef48:	003e6606 	br	e8e4 <__alt_mem_onchip_memory2_0+0xf700e8e4>
    ef4c:	1c62b03a 	or	r17,r3,r17
    ef50:	8822c03a 	cmpne	r17,r17,zero
    ef54:	0005883a 	mov	r2,zero
    ef58:	003f9906 	br	edc0 <__alt_mem_onchip_memory2_0+0xf700edc0>
    ef5c:	2807883a 	mov	r3,r5
    ef60:	3023883a 	mov	r17,r6
    ef64:	0401ffc4 	movi	r16,2047
    ef68:	003df506 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ef6c:	2807883a 	mov	r3,r5
    ef70:	3023883a 	mov	r17,r6
    ef74:	003df206 	br	e740 <__alt_mem_onchip_memory2_0+0xf700e740>
    ef78:	123ff804 	addi	r8,r2,-32
    ef7c:	01000804 	movi	r4,32
    ef80:	1a10d83a 	srl	r8,r3,r8
    ef84:	11000a26 	beq	r2,r4,efb0 <__subdf3+0x8f4>
    ef88:	01001004 	movi	r4,64
    ef8c:	2085c83a 	sub	r2,r4,r2
    ef90:	1884983a 	sll	r2,r3,r2
    ef94:	1444b03a 	or	r2,r2,r17
    ef98:	1004c03a 	cmpne	r2,r2,zero
    ef9c:	40a2b03a 	or	r17,r8,r2
    efa0:	0005883a 	mov	r2,zero
    efa4:	003f8606 	br	edc0 <__alt_mem_onchip_memory2_0+0xf700edc0>
    efa8:	0005883a 	mov	r2,zero
    efac:	003fdc06 	br	ef20 <__alt_mem_onchip_memory2_0+0xf700ef20>
    efb0:	0005883a 	mov	r2,zero
    efb4:	003ff706 	br	ef94 <__alt_mem_onchip_memory2_0+0xf700ef94>

0000efb8 <__fixdfsi>:
    efb8:	280cd53a 	srli	r6,r5,20
    efbc:	00c00434 	movhi	r3,16
    efc0:	18ffffc4 	addi	r3,r3,-1
    efc4:	3181ffcc 	andi	r6,r6,2047
    efc8:	01c0ff84 	movi	r7,1022
    efcc:	28c6703a 	and	r3,r5,r3
    efd0:	280ad7fa 	srli	r5,r5,31
    efd4:	3980120e 	bge	r7,r6,f020 <__fixdfsi+0x68>
    efd8:	00810744 	movi	r2,1053
    efdc:	11800c16 	blt	r2,r6,f010 <__fixdfsi+0x58>
    efe0:	00810cc4 	movi	r2,1075
    efe4:	1185c83a 	sub	r2,r2,r6
    efe8:	01c007c4 	movi	r7,31
    efec:	18c00434 	orhi	r3,r3,16
    eff0:	38800d16 	blt	r7,r2,f028 <__fixdfsi+0x70>
    eff4:	31befb44 	addi	r6,r6,-1043
    eff8:	2084d83a 	srl	r2,r4,r2
    effc:	1986983a 	sll	r3,r3,r6
    f000:	1884b03a 	or	r2,r3,r2
    f004:	28000726 	beq	r5,zero,f024 <__fixdfsi+0x6c>
    f008:	0085c83a 	sub	r2,zero,r2
    f00c:	f800283a 	ret
    f010:	00a00034 	movhi	r2,32768
    f014:	10bfffc4 	addi	r2,r2,-1
    f018:	2885883a 	add	r2,r5,r2
    f01c:	f800283a 	ret
    f020:	0005883a 	mov	r2,zero
    f024:	f800283a 	ret
    f028:	008104c4 	movi	r2,1043
    f02c:	1185c83a 	sub	r2,r2,r6
    f030:	1884d83a 	srl	r2,r3,r2
    f034:	003ff306 	br	f004 <__alt_mem_onchip_memory2_0+0xf700f004>

0000f038 <__floatsidf>:
    f038:	defffd04 	addi	sp,sp,-12
    f03c:	dfc00215 	stw	ra,8(sp)
    f040:	dc400115 	stw	r17,4(sp)
    f044:	dc000015 	stw	r16,0(sp)
    f048:	20002b26 	beq	r4,zero,f0f8 <__floatsidf+0xc0>
    f04c:	2023883a 	mov	r17,r4
    f050:	2020d7fa 	srli	r16,r4,31
    f054:	20002d16 	blt	r4,zero,f10c <__floatsidf+0xd4>
    f058:	8809883a 	mov	r4,r17
    f05c:	000f1bc0 	call	f1bc <__clzsi2>
    f060:	01410784 	movi	r5,1054
    f064:	288bc83a 	sub	r5,r5,r2
    f068:	01010cc4 	movi	r4,1075
    f06c:	2149c83a 	sub	r4,r4,r5
    f070:	00c007c4 	movi	r3,31
    f074:	1900160e 	bge	r3,r4,f0d0 <__floatsidf+0x98>
    f078:	00c104c4 	movi	r3,1043
    f07c:	1947c83a 	sub	r3,r3,r5
    f080:	88c6983a 	sll	r3,r17,r3
    f084:	00800434 	movhi	r2,16
    f088:	10bfffc4 	addi	r2,r2,-1
    f08c:	1886703a 	and	r3,r3,r2
    f090:	2941ffcc 	andi	r5,r5,2047
    f094:	800d883a 	mov	r6,r16
    f098:	0005883a 	mov	r2,zero
    f09c:	280a953a 	slli	r5,r5,20
    f0a0:	31803fcc 	andi	r6,r6,255
    f0a4:	01000434 	movhi	r4,16
    f0a8:	300c97fa 	slli	r6,r6,31
    f0ac:	213fffc4 	addi	r4,r4,-1
    f0b0:	1906703a 	and	r3,r3,r4
    f0b4:	1946b03a 	or	r3,r3,r5
    f0b8:	1986b03a 	or	r3,r3,r6
    f0bc:	dfc00217 	ldw	ra,8(sp)
    f0c0:	dc400117 	ldw	r17,4(sp)
    f0c4:	dc000017 	ldw	r16,0(sp)
    f0c8:	dec00304 	addi	sp,sp,12
    f0cc:	f800283a 	ret
    f0d0:	00c002c4 	movi	r3,11
    f0d4:	1887c83a 	sub	r3,r3,r2
    f0d8:	88c6d83a 	srl	r3,r17,r3
    f0dc:	8904983a 	sll	r2,r17,r4
    f0e0:	01000434 	movhi	r4,16
    f0e4:	213fffc4 	addi	r4,r4,-1
    f0e8:	2941ffcc 	andi	r5,r5,2047
    f0ec:	1906703a 	and	r3,r3,r4
    f0f0:	800d883a 	mov	r6,r16
    f0f4:	003fe906 	br	f09c <__alt_mem_onchip_memory2_0+0xf700f09c>
    f0f8:	000d883a 	mov	r6,zero
    f0fc:	000b883a 	mov	r5,zero
    f100:	0007883a 	mov	r3,zero
    f104:	0005883a 	mov	r2,zero
    f108:	003fe406 	br	f09c <__alt_mem_onchip_memory2_0+0xf700f09c>
    f10c:	0123c83a 	sub	r17,zero,r4
    f110:	003fd106 	br	f058 <__alt_mem_onchip_memory2_0+0xf700f058>

0000f114 <__floatunsidf>:
    f114:	defffe04 	addi	sp,sp,-8
    f118:	dc000015 	stw	r16,0(sp)
    f11c:	dfc00115 	stw	ra,4(sp)
    f120:	2021883a 	mov	r16,r4
    f124:	20002226 	beq	r4,zero,f1b0 <__floatunsidf+0x9c>
    f128:	000f1bc0 	call	f1bc <__clzsi2>
    f12c:	01010784 	movi	r4,1054
    f130:	2089c83a 	sub	r4,r4,r2
    f134:	01810cc4 	movi	r6,1075
    f138:	310dc83a 	sub	r6,r6,r4
    f13c:	00c007c4 	movi	r3,31
    f140:	1980120e 	bge	r3,r6,f18c <__floatunsidf+0x78>
    f144:	00c104c4 	movi	r3,1043
    f148:	1907c83a 	sub	r3,r3,r4
    f14c:	80ca983a 	sll	r5,r16,r3
    f150:	00800434 	movhi	r2,16
    f154:	10bfffc4 	addi	r2,r2,-1
    f158:	2101ffcc 	andi	r4,r4,2047
    f15c:	0021883a 	mov	r16,zero
    f160:	288a703a 	and	r5,r5,r2
    f164:	2008953a 	slli	r4,r4,20
    f168:	00c00434 	movhi	r3,16
    f16c:	18ffffc4 	addi	r3,r3,-1
    f170:	28c6703a 	and	r3,r5,r3
    f174:	8005883a 	mov	r2,r16
    f178:	1906b03a 	or	r3,r3,r4
    f17c:	dfc00117 	ldw	ra,4(sp)
    f180:	dc000017 	ldw	r16,0(sp)
    f184:	dec00204 	addi	sp,sp,8
    f188:	f800283a 	ret
    f18c:	00c002c4 	movi	r3,11
    f190:	188bc83a 	sub	r5,r3,r2
    f194:	814ad83a 	srl	r5,r16,r5
    f198:	00c00434 	movhi	r3,16
    f19c:	18ffffc4 	addi	r3,r3,-1
    f1a0:	81a0983a 	sll	r16,r16,r6
    f1a4:	2101ffcc 	andi	r4,r4,2047
    f1a8:	28ca703a 	and	r5,r5,r3
    f1ac:	003fed06 	br	f164 <__alt_mem_onchip_memory2_0+0xf700f164>
    f1b0:	0009883a 	mov	r4,zero
    f1b4:	000b883a 	mov	r5,zero
    f1b8:	003fea06 	br	f164 <__alt_mem_onchip_memory2_0+0xf700f164>

0000f1bc <__clzsi2>:
    f1bc:	00bfffd4 	movui	r2,65535
    f1c0:	11000536 	bltu	r2,r4,f1d8 <__clzsi2+0x1c>
    f1c4:	00803fc4 	movi	r2,255
    f1c8:	11000f36 	bltu	r2,r4,f208 <__clzsi2+0x4c>
    f1cc:	00800804 	movi	r2,32
    f1d0:	0007883a 	mov	r3,zero
    f1d4:	00000506 	br	f1ec <__clzsi2+0x30>
    f1d8:	00804034 	movhi	r2,256
    f1dc:	10bfffc4 	addi	r2,r2,-1
    f1e0:	11000c2e 	bgeu	r2,r4,f214 <__clzsi2+0x58>
    f1e4:	00800204 	movi	r2,8
    f1e8:	00c00604 	movi	r3,24
    f1ec:	20c8d83a 	srl	r4,r4,r3
    f1f0:	00c00074 	movhi	r3,1
    f1f4:	18c8e104 	addi	r3,r3,9092
    f1f8:	1909883a 	add	r4,r3,r4
    f1fc:	20c00003 	ldbu	r3,0(r4)
    f200:	10c5c83a 	sub	r2,r2,r3
    f204:	f800283a 	ret
    f208:	00800604 	movi	r2,24
    f20c:	00c00204 	movi	r3,8
    f210:	003ff606 	br	f1ec <__alt_mem_onchip_memory2_0+0xf700f1ec>
    f214:	00800404 	movi	r2,16
    f218:	1007883a 	mov	r3,r2
    f21c:	003ff306 	br	f1ec <__alt_mem_onchip_memory2_0+0xf700f1ec>

0000f220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f220:	defffe04 	addi	sp,sp,-8
    f224:	dfc00115 	stw	ra,4(sp)
    f228:	df000015 	stw	fp,0(sp)
    f22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f230:	d0a00b17 	ldw	r2,-32724(gp)
    f234:	10000326 	beq	r2,zero,f244 <alt_get_errno+0x24>
    f238:	d0a00b17 	ldw	r2,-32724(gp)
    f23c:	103ee83a 	callr	r2
    f240:	00000106 	br	f248 <alt_get_errno+0x28>
    f244:	d0a6d204 	addi	r2,gp,-25784
}
    f248:	e037883a 	mov	sp,fp
    f24c:	dfc00117 	ldw	ra,4(sp)
    f250:	df000017 	ldw	fp,0(sp)
    f254:	dec00204 	addi	sp,sp,8
    f258:	f800283a 	ret

0000f25c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f25c:	defffb04 	addi	sp,sp,-20
    f260:	dfc00415 	stw	ra,16(sp)
    f264:	df000315 	stw	fp,12(sp)
    f268:	df000304 	addi	fp,sp,12
    f26c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f270:	e0bfff17 	ldw	r2,-4(fp)
    f274:	10000816 	blt	r2,zero,f298 <close+0x3c>
    f278:	01400304 	movi	r5,12
    f27c:	e13fff17 	ldw	r4,-4(fp)
    f280:	000c9540 	call	c954 <__mulsi3>
    f284:	1007883a 	mov	r3,r2
    f288:	00800074 	movhi	r2,1
    f28c:	108b6104 	addi	r2,r2,11652
    f290:	1885883a 	add	r2,r3,r2
    f294:	00000106 	br	f29c <close+0x40>
    f298:	0005883a 	mov	r2,zero
    f29c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f2a0:	e0bffd17 	ldw	r2,-12(fp)
    f2a4:	10001926 	beq	r2,zero,f30c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f2a8:	e0bffd17 	ldw	r2,-12(fp)
    f2ac:	10800017 	ldw	r2,0(r2)
    f2b0:	10800417 	ldw	r2,16(r2)
    f2b4:	10000626 	beq	r2,zero,f2d0 <close+0x74>
    f2b8:	e0bffd17 	ldw	r2,-12(fp)
    f2bc:	10800017 	ldw	r2,0(r2)
    f2c0:	10800417 	ldw	r2,16(r2)
    f2c4:	e13ffd17 	ldw	r4,-12(fp)
    f2c8:	103ee83a 	callr	r2
    f2cc:	00000106 	br	f2d4 <close+0x78>
    f2d0:	0005883a 	mov	r2,zero
    f2d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f2d8:	e13fff17 	ldw	r4,-4(fp)
    f2dc:	000f9440 	call	f944 <alt_release_fd>
    if (rval < 0)
    f2e0:	e0bffe17 	ldw	r2,-8(fp)
    f2e4:	1000070e 	bge	r2,zero,f304 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f2e8:	000f2200 	call	f220 <alt_get_errno>
    f2ec:	1007883a 	mov	r3,r2
    f2f0:	e0bffe17 	ldw	r2,-8(fp)
    f2f4:	0085c83a 	sub	r2,zero,r2
    f2f8:	18800015 	stw	r2,0(r3)
      return -1;
    f2fc:	00bfffc4 	movi	r2,-1
    f300:	00000706 	br	f320 <close+0xc4>
    }
    return 0;
    f304:	0005883a 	mov	r2,zero
    f308:	00000506 	br	f320 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f30c:	000f2200 	call	f220 <alt_get_errno>
    f310:	1007883a 	mov	r3,r2
    f314:	00801444 	movi	r2,81
    f318:	18800015 	stw	r2,0(r3)
    return -1;
    f31c:	00bfffc4 	movi	r2,-1
  }
}
    f320:	e037883a 	mov	sp,fp
    f324:	dfc00117 	ldw	ra,4(sp)
    f328:	df000017 	ldw	fp,0(sp)
    f32c:	dec00204 	addi	sp,sp,8
    f330:	f800283a 	ret

0000f334 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f334:	defffc04 	addi	sp,sp,-16
    f338:	df000315 	stw	fp,12(sp)
    f33c:	df000304 	addi	fp,sp,12
    f340:	e13ffd15 	stw	r4,-12(fp)
    f344:	e17ffe15 	stw	r5,-8(fp)
    f348:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f34c:	e0bfff17 	ldw	r2,-4(fp)
}
    f350:	e037883a 	mov	sp,fp
    f354:	df000017 	ldw	fp,0(sp)
    f358:	dec00104 	addi	sp,sp,4
    f35c:	f800283a 	ret

0000f360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f360:	defffe04 	addi	sp,sp,-8
    f364:	dfc00115 	stw	ra,4(sp)
    f368:	df000015 	stw	fp,0(sp)
    f36c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f370:	d0a00b17 	ldw	r2,-32724(gp)
    f374:	10000326 	beq	r2,zero,f384 <alt_get_errno+0x24>
    f378:	d0a00b17 	ldw	r2,-32724(gp)
    f37c:	103ee83a 	callr	r2
    f380:	00000106 	br	f388 <alt_get_errno+0x28>
    f384:	d0a6d204 	addi	r2,gp,-25784
}
    f388:	e037883a 	mov	sp,fp
    f38c:	dfc00117 	ldw	ra,4(sp)
    f390:	df000017 	ldw	fp,0(sp)
    f394:	dec00204 	addi	sp,sp,8
    f398:	f800283a 	ret

0000f39c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f39c:	defffb04 	addi	sp,sp,-20
    f3a0:	dfc00415 	stw	ra,16(sp)
    f3a4:	df000315 	stw	fp,12(sp)
    f3a8:	df000304 	addi	fp,sp,12
    f3ac:	e13ffe15 	stw	r4,-8(fp)
    f3b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f3b4:	e0bffe17 	ldw	r2,-8(fp)
    f3b8:	10000816 	blt	r2,zero,f3dc <fstat+0x40>
    f3bc:	01400304 	movi	r5,12
    f3c0:	e13ffe17 	ldw	r4,-8(fp)
    f3c4:	000c9540 	call	c954 <__mulsi3>
    f3c8:	1007883a 	mov	r3,r2
    f3cc:	00800074 	movhi	r2,1
    f3d0:	108b6104 	addi	r2,r2,11652
    f3d4:	1885883a 	add	r2,r3,r2
    f3d8:	00000106 	br	f3e0 <fstat+0x44>
    f3dc:	0005883a 	mov	r2,zero
    f3e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f3e4:	e0bffd17 	ldw	r2,-12(fp)
    f3e8:	10001026 	beq	r2,zero,f42c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f3ec:	e0bffd17 	ldw	r2,-12(fp)
    f3f0:	10800017 	ldw	r2,0(r2)
    f3f4:	10800817 	ldw	r2,32(r2)
    f3f8:	10000726 	beq	r2,zero,f418 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f3fc:	e0bffd17 	ldw	r2,-12(fp)
    f400:	10800017 	ldw	r2,0(r2)
    f404:	10800817 	ldw	r2,32(r2)
    f408:	e17fff17 	ldw	r5,-4(fp)
    f40c:	e13ffd17 	ldw	r4,-12(fp)
    f410:	103ee83a 	callr	r2
    f414:	00000a06 	br	f440 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f418:	e0bfff17 	ldw	r2,-4(fp)
    f41c:	00c80004 	movi	r3,8192
    f420:	10c00115 	stw	r3,4(r2)
      return 0;
    f424:	0005883a 	mov	r2,zero
    f428:	00000506 	br	f440 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f42c:	000f3600 	call	f360 <alt_get_errno>
    f430:	1007883a 	mov	r3,r2
    f434:	00801444 	movi	r2,81
    f438:	18800015 	stw	r2,0(r3)
    return -1;
    f43c:	00bfffc4 	movi	r2,-1
  }
}
    f440:	e037883a 	mov	sp,fp
    f444:	dfc00117 	ldw	ra,4(sp)
    f448:	df000017 	ldw	fp,0(sp)
    f44c:	dec00204 	addi	sp,sp,8
    f450:	f800283a 	ret

0000f454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f454:	defffe04 	addi	sp,sp,-8
    f458:	dfc00115 	stw	ra,4(sp)
    f45c:	df000015 	stw	fp,0(sp)
    f460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f464:	d0a00b17 	ldw	r2,-32724(gp)
    f468:	10000326 	beq	r2,zero,f478 <alt_get_errno+0x24>
    f46c:	d0a00b17 	ldw	r2,-32724(gp)
    f470:	103ee83a 	callr	r2
    f474:	00000106 	br	f47c <alt_get_errno+0x28>
    f478:	d0a6d204 	addi	r2,gp,-25784
}
    f47c:	e037883a 	mov	sp,fp
    f480:	dfc00117 	ldw	ra,4(sp)
    f484:	df000017 	ldw	fp,0(sp)
    f488:	dec00204 	addi	sp,sp,8
    f48c:	f800283a 	ret

0000f490 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f490:	deffed04 	addi	sp,sp,-76
    f494:	dfc01215 	stw	ra,72(sp)
    f498:	df001115 	stw	fp,68(sp)
    f49c:	df001104 	addi	fp,sp,68
    f4a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f4a4:	e0bfff17 	ldw	r2,-4(fp)
    f4a8:	10000816 	blt	r2,zero,f4cc <isatty+0x3c>
    f4ac:	01400304 	movi	r5,12
    f4b0:	e13fff17 	ldw	r4,-4(fp)
    f4b4:	000c9540 	call	c954 <__mulsi3>
    f4b8:	1007883a 	mov	r3,r2
    f4bc:	00800074 	movhi	r2,1
    f4c0:	108b6104 	addi	r2,r2,11652
    f4c4:	1885883a 	add	r2,r3,r2
    f4c8:	00000106 	br	f4d0 <isatty+0x40>
    f4cc:	0005883a 	mov	r2,zero
    f4d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f4d4:	e0bfef17 	ldw	r2,-68(fp)
    f4d8:	10000e26 	beq	r2,zero,f514 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f4dc:	e0bfef17 	ldw	r2,-68(fp)
    f4e0:	10800017 	ldw	r2,0(r2)
    f4e4:	10800817 	ldw	r2,32(r2)
    f4e8:	1000021e 	bne	r2,zero,f4f4 <isatty+0x64>
    {
      return 1;
    f4ec:	00800044 	movi	r2,1
    f4f0:	00000d06 	br	f528 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f4f4:	e0bff004 	addi	r2,fp,-64
    f4f8:	100b883a 	mov	r5,r2
    f4fc:	e13fff17 	ldw	r4,-4(fp)
    f500:	000f39c0 	call	f39c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f504:	e0bff117 	ldw	r2,-60(fp)
    f508:	10880020 	cmpeqi	r2,r2,8192
    f50c:	10803fcc 	andi	r2,r2,255
    f510:	00000506 	br	f528 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f514:	000f4540 	call	f454 <alt_get_errno>
    f518:	1007883a 	mov	r3,r2
    f51c:	00801444 	movi	r2,81
    f520:	18800015 	stw	r2,0(r3)
    return 0;
    f524:	0005883a 	mov	r2,zero
  }
}
    f528:	e037883a 	mov	sp,fp
    f52c:	dfc00117 	ldw	ra,4(sp)
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00204 	addi	sp,sp,8
    f538:	f800283a 	ret

0000f53c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f53c:	defffc04 	addi	sp,sp,-16
    f540:	df000315 	stw	fp,12(sp)
    f544:	df000304 	addi	fp,sp,12
    f548:	e13ffd15 	stw	r4,-12(fp)
    f54c:	e17ffe15 	stw	r5,-8(fp)
    f550:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f554:	e0fffe17 	ldw	r3,-8(fp)
    f558:	e0bffd17 	ldw	r2,-12(fp)
    f55c:	18800c26 	beq	r3,r2,f590 <alt_load_section+0x54>
  {
    while( to != end )
    f560:	00000806 	br	f584 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f564:	e0bffe17 	ldw	r2,-8(fp)
    f568:	10c00104 	addi	r3,r2,4
    f56c:	e0fffe15 	stw	r3,-8(fp)
    f570:	e0fffd17 	ldw	r3,-12(fp)
    f574:	19000104 	addi	r4,r3,4
    f578:	e13ffd15 	stw	r4,-12(fp)
    f57c:	18c00017 	ldw	r3,0(r3)
    f580:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f584:	e0fffe17 	ldw	r3,-8(fp)
    f588:	e0bfff17 	ldw	r2,-4(fp)
    f58c:	18bff51e 	bne	r3,r2,f564 <__alt_mem_onchip_memory2_0+0xf700f564>
    {
      *to++ = *from++;
    }
  }
}
    f590:	0001883a 	nop
    f594:	e037883a 	mov	sp,fp
    f598:	df000017 	ldw	fp,0(sp)
    f59c:	dec00104 	addi	sp,sp,4
    f5a0:	f800283a 	ret

0000f5a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f5a4:	defffe04 	addi	sp,sp,-8
    f5a8:	dfc00115 	stw	ra,4(sp)
    f5ac:	df000015 	stw	fp,0(sp)
    f5b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f5b4:	01800074 	movhi	r6,1
    f5b8:	318fe904 	addi	r6,r6,16292
    f5bc:	01400074 	movhi	r5,1
    f5c0:	29492e04 	addi	r5,r5,9400
    f5c4:	01000074 	movhi	r4,1
    f5c8:	210fe904 	addi	r4,r4,16292
    f5cc:	000f53c0 	call	f53c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f5d0:	01800034 	movhi	r6,0
    f5d4:	31808c04 	addi	r6,r6,560
    f5d8:	01400034 	movhi	r5,0
    f5dc:	29400804 	addi	r5,r5,32
    f5e0:	01000034 	movhi	r4,0
    f5e4:	21000804 	addi	r4,r4,32
    f5e8:	000f53c0 	call	f53c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f5ec:	01800074 	movhi	r6,1
    f5f0:	31892e04 	addi	r6,r6,9400
    f5f4:	01400074 	movhi	r5,1
    f5f8:	29469004 	addi	r5,r5,6720
    f5fc:	01000074 	movhi	r4,1
    f600:	21069004 	addi	r4,r4,6720
    f604:	000f53c0 	call	f53c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f608:	00109880 	call	10988 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f60c:	0010b480 	call	10b48 <alt_icache_flush_all>
}
    f610:	0001883a 	nop
    f614:	e037883a 	mov	sp,fp
    f618:	dfc00117 	ldw	ra,4(sp)
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00204 	addi	sp,sp,8
    f624:	f800283a 	ret

0000f628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f628:	defffe04 	addi	sp,sp,-8
    f62c:	dfc00115 	stw	ra,4(sp)
    f630:	df000015 	stw	fp,0(sp)
    f634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f638:	d0a00b17 	ldw	r2,-32724(gp)
    f63c:	10000326 	beq	r2,zero,f64c <alt_get_errno+0x24>
    f640:	d0a00b17 	ldw	r2,-32724(gp)
    f644:	103ee83a 	callr	r2
    f648:	00000106 	br	f650 <alt_get_errno+0x28>
    f64c:	d0a6d204 	addi	r2,gp,-25784
}
    f650:	e037883a 	mov	sp,fp
    f654:	dfc00117 	ldw	ra,4(sp)
    f658:	df000017 	ldw	fp,0(sp)
    f65c:	dec00204 	addi	sp,sp,8
    f660:	f800283a 	ret

0000f664 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f664:	defff904 	addi	sp,sp,-28
    f668:	dfc00615 	stw	ra,24(sp)
    f66c:	df000515 	stw	fp,20(sp)
    f670:	df000504 	addi	fp,sp,20
    f674:	e13ffd15 	stw	r4,-12(fp)
    f678:	e17ffe15 	stw	r5,-8(fp)
    f67c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f680:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	10000816 	blt	r2,zero,f6ac <lseek+0x48>
    f68c:	01400304 	movi	r5,12
    f690:	e13ffd17 	ldw	r4,-12(fp)
    f694:	000c9540 	call	c954 <__mulsi3>
    f698:	1007883a 	mov	r3,r2
    f69c:	00800074 	movhi	r2,1
    f6a0:	108b6104 	addi	r2,r2,11652
    f6a4:	1885883a 	add	r2,r3,r2
    f6a8:	00000106 	br	f6b0 <lseek+0x4c>
    f6ac:	0005883a 	mov	r2,zero
    f6b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f6b4:	e0bffc17 	ldw	r2,-16(fp)
    f6b8:	10001026 	beq	r2,zero,f6fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f6bc:	e0bffc17 	ldw	r2,-16(fp)
    f6c0:	10800017 	ldw	r2,0(r2)
    f6c4:	10800717 	ldw	r2,28(r2)
    f6c8:	10000926 	beq	r2,zero,f6f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f6cc:	e0bffc17 	ldw	r2,-16(fp)
    f6d0:	10800017 	ldw	r2,0(r2)
    f6d4:	10800717 	ldw	r2,28(r2)
    f6d8:	e1bfff17 	ldw	r6,-4(fp)
    f6dc:	e17ffe17 	ldw	r5,-8(fp)
    f6e0:	e13ffc17 	ldw	r4,-16(fp)
    f6e4:	103ee83a 	callr	r2
    f6e8:	e0bffb15 	stw	r2,-20(fp)
    f6ec:	00000506 	br	f704 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f6f0:	00bfde84 	movi	r2,-134
    f6f4:	e0bffb15 	stw	r2,-20(fp)
    f6f8:	00000206 	br	f704 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f6fc:	00bfebc4 	movi	r2,-81
    f700:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f704:	e0bffb17 	ldw	r2,-20(fp)
    f708:	1000070e 	bge	r2,zero,f728 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f70c:	000f6280 	call	f628 <alt_get_errno>
    f710:	1007883a 	mov	r3,r2
    f714:	e0bffb17 	ldw	r2,-20(fp)
    f718:	0085c83a 	sub	r2,zero,r2
    f71c:	18800015 	stw	r2,0(r3)
    rc = -1;
    f720:	00bfffc4 	movi	r2,-1
    f724:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f728:	e0bffb17 	ldw	r2,-20(fp)
}
    f72c:	e037883a 	mov	sp,fp
    f730:	dfc00117 	ldw	ra,4(sp)
    f734:	df000017 	ldw	fp,0(sp)
    f738:	dec00204 	addi	sp,sp,8
    f73c:	f800283a 	ret

0000f740 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f740:	defffd04 	addi	sp,sp,-12
    f744:	dfc00215 	stw	ra,8(sp)
    f748:	df000115 	stw	fp,4(sp)
    f74c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f750:	0009883a 	mov	r4,zero
    f754:	000fc180 	call	fc18 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f758:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f75c:	000fc500 	call	fc50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f760:	01800074 	movhi	r6,1
    f764:	31892404 	addi	r6,r6,9360
    f768:	01400074 	movhi	r5,1
    f76c:	29492404 	addi	r5,r5,9360
    f770:	01000074 	movhi	r4,1
    f774:	21092404 	addi	r4,r4,9360
    f778:	0010eec0 	call	10eec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f77c:	0010a880 	call	10a88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f780:	01000074 	movhi	r4,1
    f784:	2102ba04 	addi	r4,r4,2792
    f788:	00116ac0 	call	116ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f78c:	d0a6d317 	ldw	r2,-25780(gp)
    f790:	d0e6d417 	ldw	r3,-25776(gp)
    f794:	d126d517 	ldw	r4,-25772(gp)
    f798:	200d883a 	mov	r6,r4
    f79c:	180b883a 	mov	r5,r3
    f7a0:	1009883a 	mov	r4,r2
    f7a4:	00004240 	call	424 <main>
    f7a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f7ac:	01000044 	movi	r4,1
    f7b0:	000f25c0 	call	f25c <close>
  exit (result);
    f7b4:	e13fff17 	ldw	r4,-4(fp)
    f7b8:	00116c00 	call	116c0 <exit>

0000f7bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f7bc:	defffe04 	addi	sp,sp,-8
    f7c0:	df000115 	stw	fp,4(sp)
    f7c4:	df000104 	addi	fp,sp,4
    f7c8:	e13fff15 	stw	r4,-4(fp)
}
    f7cc:	0001883a 	nop
    f7d0:	e037883a 	mov	sp,fp
    f7d4:	df000017 	ldw	fp,0(sp)
    f7d8:	dec00104 	addi	sp,sp,4
    f7dc:	f800283a 	ret

0000f7e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f7e0:	defffe04 	addi	sp,sp,-8
    f7e4:	df000115 	stw	fp,4(sp)
    f7e8:	df000104 	addi	fp,sp,4
    f7ec:	e13fff15 	stw	r4,-4(fp)
}
    f7f0:	0001883a 	nop
    f7f4:	e037883a 	mov	sp,fp
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00104 	addi	sp,sp,4
    f800:	f800283a 	ret

0000f804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f804:	defffe04 	addi	sp,sp,-8
    f808:	dfc00115 	stw	ra,4(sp)
    f80c:	df000015 	stw	fp,0(sp)
    f810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f814:	d0a00b17 	ldw	r2,-32724(gp)
    f818:	10000326 	beq	r2,zero,f828 <alt_get_errno+0x24>
    f81c:	d0a00b17 	ldw	r2,-32724(gp)
    f820:	103ee83a 	callr	r2
    f824:	00000106 	br	f82c <alt_get_errno+0x28>
    f828:	d0a6d204 	addi	r2,gp,-25784
}
    f82c:	e037883a 	mov	sp,fp
    f830:	dfc00117 	ldw	ra,4(sp)
    f834:	df000017 	ldw	fp,0(sp)
    f838:	dec00204 	addi	sp,sp,8
    f83c:	f800283a 	ret

0000f840 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f840:	defff904 	addi	sp,sp,-28
    f844:	dfc00615 	stw	ra,24(sp)
    f848:	df000515 	stw	fp,20(sp)
    f84c:	df000504 	addi	fp,sp,20
    f850:	e13ffd15 	stw	r4,-12(fp)
    f854:	e17ffe15 	stw	r5,-8(fp)
    f858:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	10000816 	blt	r2,zero,f884 <read+0x44>
    f864:	01400304 	movi	r5,12
    f868:	e13ffd17 	ldw	r4,-12(fp)
    f86c:	000c9540 	call	c954 <__mulsi3>
    f870:	1007883a 	mov	r3,r2
    f874:	00800074 	movhi	r2,1
    f878:	108b6104 	addi	r2,r2,11652
    f87c:	1885883a 	add	r2,r3,r2
    f880:	00000106 	br	f888 <read+0x48>
    f884:	0005883a 	mov	r2,zero
    f888:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f88c:	e0bffb17 	ldw	r2,-20(fp)
    f890:	10002226 	beq	r2,zero,f91c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f894:	e0bffb17 	ldw	r2,-20(fp)
    f898:	10800217 	ldw	r2,8(r2)
    f89c:	108000cc 	andi	r2,r2,3
    f8a0:	10800060 	cmpeqi	r2,r2,1
    f8a4:	1000181e 	bne	r2,zero,f908 <read+0xc8>
        (fd->dev->read))
    f8a8:	e0bffb17 	ldw	r2,-20(fp)
    f8ac:	10800017 	ldw	r2,0(r2)
    f8b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f8b4:	10001426 	beq	r2,zero,f908 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f8b8:	e0bffb17 	ldw	r2,-20(fp)
    f8bc:	10800017 	ldw	r2,0(r2)
    f8c0:	10800517 	ldw	r2,20(r2)
    f8c4:	e0ffff17 	ldw	r3,-4(fp)
    f8c8:	180d883a 	mov	r6,r3
    f8cc:	e17ffe17 	ldw	r5,-8(fp)
    f8d0:	e13ffb17 	ldw	r4,-20(fp)
    f8d4:	103ee83a 	callr	r2
    f8d8:	e0bffc15 	stw	r2,-16(fp)
    f8dc:	e0bffc17 	ldw	r2,-16(fp)
    f8e0:	1000070e 	bge	r2,zero,f900 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f8e4:	000f8040 	call	f804 <alt_get_errno>
    f8e8:	1007883a 	mov	r3,r2
    f8ec:	e0bffc17 	ldw	r2,-16(fp)
    f8f0:	0085c83a 	sub	r2,zero,r2
    f8f4:	18800015 	stw	r2,0(r3)
          return -1;
    f8f8:	00bfffc4 	movi	r2,-1
    f8fc:	00000c06 	br	f930 <read+0xf0>
        }
        return rval;
    f900:	e0bffc17 	ldw	r2,-16(fp)
    f904:	00000a06 	br	f930 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f908:	000f8040 	call	f804 <alt_get_errno>
    f90c:	1007883a 	mov	r3,r2
    f910:	00800344 	movi	r2,13
    f914:	18800015 	stw	r2,0(r3)
    f918:	00000406 	br	f92c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f91c:	000f8040 	call	f804 <alt_get_errno>
    f920:	1007883a 	mov	r3,r2
    f924:	00801444 	movi	r2,81
    f928:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f92c:	00bfffc4 	movi	r2,-1
}
    f930:	e037883a 	mov	sp,fp
    f934:	dfc00117 	ldw	ra,4(sp)
    f938:	df000017 	ldw	fp,0(sp)
    f93c:	dec00204 	addi	sp,sp,8
    f940:	f800283a 	ret

0000f944 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f944:	defffc04 	addi	sp,sp,-16
    f948:	dfc00315 	stw	ra,12(sp)
    f94c:	df000215 	stw	fp,8(sp)
    f950:	dc000115 	stw	r16,4(sp)
    f954:	df000204 	addi	fp,sp,8
    f958:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f95c:	e0bffe17 	ldw	r2,-8(fp)
    f960:	108000d0 	cmplti	r2,r2,3
    f964:	1000111e 	bne	r2,zero,f9ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f968:	04000074 	movhi	r16,1
    f96c:	840b6104 	addi	r16,r16,11652
    f970:	e0bffe17 	ldw	r2,-8(fp)
    f974:	01400304 	movi	r5,12
    f978:	1009883a 	mov	r4,r2
    f97c:	000c9540 	call	c954 <__mulsi3>
    f980:	8085883a 	add	r2,r16,r2
    f984:	10800204 	addi	r2,r2,8
    f988:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f98c:	04000074 	movhi	r16,1
    f990:	840b6104 	addi	r16,r16,11652
    f994:	e0bffe17 	ldw	r2,-8(fp)
    f998:	01400304 	movi	r5,12
    f99c:	1009883a 	mov	r4,r2
    f9a0:	000c9540 	call	c954 <__mulsi3>
    f9a4:	8085883a 	add	r2,r16,r2
    f9a8:	10000015 	stw	zero,0(r2)
  }
}
    f9ac:	0001883a 	nop
    f9b0:	e6ffff04 	addi	sp,fp,-4
    f9b4:	dfc00217 	ldw	ra,8(sp)
    f9b8:	df000117 	ldw	fp,4(sp)
    f9bc:	dc000017 	ldw	r16,0(sp)
    f9c0:	dec00304 	addi	sp,sp,12
    f9c4:	f800283a 	ret

0000f9c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f9c8:	defff904 	addi	sp,sp,-28
    f9cc:	df000615 	stw	fp,24(sp)
    f9d0:	df000604 	addi	fp,sp,24
    f9d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9d8:	0005303a 	rdctl	r2,status
    f9dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9e0:	e0fffe17 	ldw	r3,-8(fp)
    f9e4:	00bfff84 	movi	r2,-2
    f9e8:	1884703a 	and	r2,r3,r2
    f9ec:	1001703a 	wrctl	status,r2
  
  return context;
    f9f0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f9f4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f9f8:	d0a00c17 	ldw	r2,-32720(gp)
    f9fc:	10c000c4 	addi	r3,r2,3
    fa00:	00bfff04 	movi	r2,-4
    fa04:	1884703a 	and	r2,r3,r2
    fa08:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fa0c:	d0e00c17 	ldw	r3,-32720(gp)
    fa10:	e0bfff17 	ldw	r2,-4(fp)
    fa14:	1887883a 	add	r3,r3,r2
    fa18:	00820034 	movhi	r2,2048
    fa1c:	10800004 	addi	r2,r2,0
    fa20:	10c0062e 	bgeu	r2,r3,fa3c <sbrk+0x74>
    fa24:	e0bffb17 	ldw	r2,-20(fp)
    fa28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa2c:	e0bffa17 	ldw	r2,-24(fp)
    fa30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fa34:	00bfffc4 	movi	r2,-1
    fa38:	00000b06 	br	fa68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fa3c:	d0a00c17 	ldw	r2,-32720(gp)
    fa40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fa44:	d0e00c17 	ldw	r3,-32720(gp)
    fa48:	e0bfff17 	ldw	r2,-4(fp)
    fa4c:	1885883a 	add	r2,r3,r2
    fa50:	d0a00c15 	stw	r2,-32720(gp)
    fa54:	e0bffb17 	ldw	r2,-20(fp)
    fa58:	e0bffc15 	stw	r2,-16(fp)
    fa5c:	e0bffc17 	ldw	r2,-16(fp)
    fa60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fa64:	e0bffd17 	ldw	r2,-12(fp)
} 
    fa68:	e037883a 	mov	sp,fp
    fa6c:	df000017 	ldw	fp,0(sp)
    fa70:	dec00104 	addi	sp,sp,4
    fa74:	f800283a 	ret

0000fa78 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fa78:	defffd04 	addi	sp,sp,-12
    fa7c:	dfc00215 	stw	ra,8(sp)
    fa80:	df000115 	stw	fp,4(sp)
    fa84:	df000104 	addi	fp,sp,4
    fa88:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fa8c:	e13fff17 	ldw	r4,-4(fp)
    fa90:	00108300 	call	10830 <alt_busy_sleep>
}
    fa94:	e037883a 	mov	sp,fp
    fa98:	dfc00117 	ldw	ra,4(sp)
    fa9c:	df000017 	ldw	fp,0(sp)
    faa0:	dec00204 	addi	sp,sp,8
    faa4:	f800283a 	ret

0000faa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    faa8:	defffe04 	addi	sp,sp,-8
    faac:	dfc00115 	stw	ra,4(sp)
    fab0:	df000015 	stw	fp,0(sp)
    fab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fab8:	d0a00b17 	ldw	r2,-32724(gp)
    fabc:	10000326 	beq	r2,zero,facc <alt_get_errno+0x24>
    fac0:	d0a00b17 	ldw	r2,-32724(gp)
    fac4:	103ee83a 	callr	r2
    fac8:	00000106 	br	fad0 <alt_get_errno+0x28>
    facc:	d0a6d204 	addi	r2,gp,-25784
}
    fad0:	e037883a 	mov	sp,fp
    fad4:	dfc00117 	ldw	ra,4(sp)
    fad8:	df000017 	ldw	fp,0(sp)
    fadc:	dec00204 	addi	sp,sp,8
    fae0:	f800283a 	ret

0000fae4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fae4:	defff904 	addi	sp,sp,-28
    fae8:	dfc00615 	stw	ra,24(sp)
    faec:	df000515 	stw	fp,20(sp)
    faf0:	df000504 	addi	fp,sp,20
    faf4:	e13ffd15 	stw	r4,-12(fp)
    faf8:	e17ffe15 	stw	r5,-8(fp)
    fafc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb00:	e0bffd17 	ldw	r2,-12(fp)
    fb04:	10000816 	blt	r2,zero,fb28 <write+0x44>
    fb08:	01400304 	movi	r5,12
    fb0c:	e13ffd17 	ldw	r4,-12(fp)
    fb10:	000c9540 	call	c954 <__mulsi3>
    fb14:	1007883a 	mov	r3,r2
    fb18:	00800074 	movhi	r2,1
    fb1c:	108b6104 	addi	r2,r2,11652
    fb20:	1885883a 	add	r2,r3,r2
    fb24:	00000106 	br	fb2c <write+0x48>
    fb28:	0005883a 	mov	r2,zero
    fb2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fb30:	e0bffb17 	ldw	r2,-20(fp)
    fb34:	10002126 	beq	r2,zero,fbbc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fb38:	e0bffb17 	ldw	r2,-20(fp)
    fb3c:	10800217 	ldw	r2,8(r2)
    fb40:	108000cc 	andi	r2,r2,3
    fb44:	10001826 	beq	r2,zero,fba8 <write+0xc4>
    fb48:	e0bffb17 	ldw	r2,-20(fp)
    fb4c:	10800017 	ldw	r2,0(r2)
    fb50:	10800617 	ldw	r2,24(r2)
    fb54:	10001426 	beq	r2,zero,fba8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fb58:	e0bffb17 	ldw	r2,-20(fp)
    fb5c:	10800017 	ldw	r2,0(r2)
    fb60:	10800617 	ldw	r2,24(r2)
    fb64:	e0ffff17 	ldw	r3,-4(fp)
    fb68:	180d883a 	mov	r6,r3
    fb6c:	e17ffe17 	ldw	r5,-8(fp)
    fb70:	e13ffb17 	ldw	r4,-20(fp)
    fb74:	103ee83a 	callr	r2
    fb78:	e0bffc15 	stw	r2,-16(fp)
    fb7c:	e0bffc17 	ldw	r2,-16(fp)
    fb80:	1000070e 	bge	r2,zero,fba0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fb84:	000faa80 	call	faa8 <alt_get_errno>
    fb88:	1007883a 	mov	r3,r2
    fb8c:	e0bffc17 	ldw	r2,-16(fp)
    fb90:	0085c83a 	sub	r2,zero,r2
    fb94:	18800015 	stw	r2,0(r3)
        return -1;
    fb98:	00bfffc4 	movi	r2,-1
    fb9c:	00000c06 	br	fbd0 <write+0xec>
      }
      return rval;
    fba0:	e0bffc17 	ldw	r2,-16(fp)
    fba4:	00000a06 	br	fbd0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fba8:	000faa80 	call	faa8 <alt_get_errno>
    fbac:	1007883a 	mov	r3,r2
    fbb0:	00800344 	movi	r2,13
    fbb4:	18800015 	stw	r2,0(r3)
    fbb8:	00000406 	br	fbcc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fbbc:	000faa80 	call	faa8 <alt_get_errno>
    fbc0:	1007883a 	mov	r3,r2
    fbc4:	00801444 	movi	r2,81
    fbc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fbcc:	00bfffc4 	movi	r2,-1
}
    fbd0:	e037883a 	mov	sp,fp
    fbd4:	dfc00117 	ldw	ra,4(sp)
    fbd8:	df000017 	ldw	fp,0(sp)
    fbdc:	dec00204 	addi	sp,sp,8
    fbe0:	f800283a 	ret

0000fbe4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fbe4:	defffd04 	addi	sp,sp,-12
    fbe8:	dfc00215 	stw	ra,8(sp)
    fbec:	df000115 	stw	fp,4(sp)
    fbf0:	df000104 	addi	fp,sp,4
    fbf4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fbf8:	d1600804 	addi	r5,gp,-32736
    fbfc:	e13fff17 	ldw	r4,-4(fp)
    fc00:	00109e40 	call	109e4 <alt_dev_llist_insert>
}
    fc04:	e037883a 	mov	sp,fp
    fc08:	dfc00117 	ldw	ra,4(sp)
    fc0c:	df000017 	ldw	fp,0(sp)
    fc10:	dec00204 	addi	sp,sp,8
    fc14:	f800283a 	ret

0000fc18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fc18:	defffd04 	addi	sp,sp,-12
    fc1c:	dfc00215 	stw	ra,8(sp)
    fc20:	df000115 	stw	fp,4(sp)
    fc24:	df000104 	addi	fp,sp,4
    fc28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fc2c:	00113900 	call	11390 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fc30:	00800044 	movi	r2,1
    fc34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fc38:	0001883a 	nop
    fc3c:	e037883a 	mov	sp,fp
    fc40:	dfc00117 	ldw	ra,4(sp)
    fc44:	df000017 	ldw	fp,0(sp)
    fc48:	dec00204 	addi	sp,sp,8
    fc4c:	f800283a 	ret

0000fc50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fc50:	defffe04 	addi	sp,sp,-8
    fc54:	dfc00115 	stw	ra,4(sp)
    fc58:	df000015 	stw	fp,0(sp)
    fc5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fc60:	01800144 	movi	r6,5
    fc64:	000b883a 	mov	r5,zero
    fc68:	01000074 	movhi	r4,1
    fc6c:	210bcb04 	addi	r4,r4,12076
    fc70:	000fe000 	call	fe00 <altera_avalon_jtag_uart_init>
    fc74:	01000074 	movhi	r4,1
    fc78:	210bc104 	addi	r4,r4,12036
    fc7c:	000fbe40 	call	fbe4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fc80:	0001883a 	nop
}
    fc84:	0001883a 	nop
    fc88:	e037883a 	mov	sp,fp
    fc8c:	dfc00117 	ldw	ra,4(sp)
    fc90:	df000017 	ldw	fp,0(sp)
    fc94:	dec00204 	addi	sp,sp,8
    fc98:	f800283a 	ret

0000fc9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fc9c:	defffa04 	addi	sp,sp,-24
    fca0:	dfc00515 	stw	ra,20(sp)
    fca4:	df000415 	stw	fp,16(sp)
    fca8:	df000404 	addi	fp,sp,16
    fcac:	e13ffd15 	stw	r4,-12(fp)
    fcb0:	e17ffe15 	stw	r5,-8(fp)
    fcb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	10800017 	ldw	r2,0(r2)
    fcc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	10c00a04 	addi	r3,r2,40
    fccc:	e0bffd17 	ldw	r2,-12(fp)
    fcd0:	10800217 	ldw	r2,8(r2)
    fcd4:	100f883a 	mov	r7,r2
    fcd8:	e1bfff17 	ldw	r6,-4(fp)
    fcdc:	e17ffe17 	ldw	r5,-8(fp)
    fce0:	1809883a 	mov	r4,r3
    fce4:	00102c40 	call	102c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fce8:	e037883a 	mov	sp,fp
    fcec:	dfc00117 	ldw	ra,4(sp)
    fcf0:	df000017 	ldw	fp,0(sp)
    fcf4:	dec00204 	addi	sp,sp,8
    fcf8:	f800283a 	ret

0000fcfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fcfc:	defffa04 	addi	sp,sp,-24
    fd00:	dfc00515 	stw	ra,20(sp)
    fd04:	df000415 	stw	fp,16(sp)
    fd08:	df000404 	addi	fp,sp,16
    fd0c:	e13ffd15 	stw	r4,-12(fp)
    fd10:	e17ffe15 	stw	r5,-8(fp)
    fd14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fd18:	e0bffd17 	ldw	r2,-12(fp)
    fd1c:	10800017 	ldw	r2,0(r2)
    fd20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10c00a04 	addi	r3,r2,40
    fd2c:	e0bffd17 	ldw	r2,-12(fp)
    fd30:	10800217 	ldw	r2,8(r2)
    fd34:	100f883a 	mov	r7,r2
    fd38:	e1bfff17 	ldw	r6,-4(fp)
    fd3c:	e17ffe17 	ldw	r5,-8(fp)
    fd40:	1809883a 	mov	r4,r3
    fd44:	00104e00 	call	104e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fd48:	e037883a 	mov	sp,fp
    fd4c:	dfc00117 	ldw	ra,4(sp)
    fd50:	df000017 	ldw	fp,0(sp)
    fd54:	dec00204 	addi	sp,sp,8
    fd58:	f800283a 	ret

0000fd5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fd5c:	defffc04 	addi	sp,sp,-16
    fd60:	dfc00315 	stw	ra,12(sp)
    fd64:	df000215 	stw	fp,8(sp)
    fd68:	df000204 	addi	fp,sp,8
    fd6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fd70:	e0bfff17 	ldw	r2,-4(fp)
    fd74:	10800017 	ldw	r2,0(r2)
    fd78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fd7c:	e0bffe17 	ldw	r2,-8(fp)
    fd80:	10c00a04 	addi	r3,r2,40
    fd84:	e0bfff17 	ldw	r2,-4(fp)
    fd88:	10800217 	ldw	r2,8(r2)
    fd8c:	100b883a 	mov	r5,r2
    fd90:	1809883a 	mov	r4,r3
    fd94:	001016c0 	call	1016c <altera_avalon_jtag_uart_close>
}
    fd98:	e037883a 	mov	sp,fp
    fd9c:	dfc00117 	ldw	ra,4(sp)
    fda0:	df000017 	ldw	fp,0(sp)
    fda4:	dec00204 	addi	sp,sp,8
    fda8:	f800283a 	ret

0000fdac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fdac:	defffa04 	addi	sp,sp,-24
    fdb0:	dfc00515 	stw	ra,20(sp)
    fdb4:	df000415 	stw	fp,16(sp)
    fdb8:	df000404 	addi	fp,sp,16
    fdbc:	e13ffd15 	stw	r4,-12(fp)
    fdc0:	e17ffe15 	stw	r5,-8(fp)
    fdc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fdc8:	e0bffd17 	ldw	r2,-12(fp)
    fdcc:	10800017 	ldw	r2,0(r2)
    fdd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fdd4:	e0bffc17 	ldw	r2,-16(fp)
    fdd8:	10800a04 	addi	r2,r2,40
    fddc:	e1bfff17 	ldw	r6,-4(fp)
    fde0:	e17ffe17 	ldw	r5,-8(fp)
    fde4:	1009883a 	mov	r4,r2
    fde8:	00101d40 	call	101d4 <altera_avalon_jtag_uart_ioctl>
}
    fdec:	e037883a 	mov	sp,fp
    fdf0:	dfc00117 	ldw	ra,4(sp)
    fdf4:	df000017 	ldw	fp,0(sp)
    fdf8:	dec00204 	addi	sp,sp,8
    fdfc:	f800283a 	ret

0000fe00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    fe00:	defffa04 	addi	sp,sp,-24
    fe04:	dfc00515 	stw	ra,20(sp)
    fe08:	df000415 	stw	fp,16(sp)
    fe0c:	df000404 	addi	fp,sp,16
    fe10:	e13ffd15 	stw	r4,-12(fp)
    fe14:	e17ffe15 	stw	r5,-8(fp)
    fe18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fe1c:	e0bffd17 	ldw	r2,-12(fp)
    fe20:	00c00044 	movi	r3,1
    fe24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    fe28:	e0bffd17 	ldw	r2,-12(fp)
    fe2c:	10800017 	ldw	r2,0(r2)
    fe30:	10800104 	addi	r2,r2,4
    fe34:	1007883a 	mov	r3,r2
    fe38:	e0bffd17 	ldw	r2,-12(fp)
    fe3c:	10800817 	ldw	r2,32(r2)
    fe40:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fe44:	e0bffe17 	ldw	r2,-8(fp)
    fe48:	e0ffff17 	ldw	r3,-4(fp)
    fe4c:	d8000015 	stw	zero,0(sp)
    fe50:	e1fffd17 	ldw	r7,-12(fp)
    fe54:	01800074 	movhi	r6,1
    fe58:	31bfb004 	addi	r6,r6,-320
    fe5c:	180b883a 	mov	r5,r3
    fe60:	1009883a 	mov	r4,r2
    fe64:	0010b680 	call	10b68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    fe68:	e0bffd17 	ldw	r2,-12(fp)
    fe6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fe70:	e0bffd17 	ldw	r2,-12(fp)
    fe74:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fe78:	d0e6d717 	ldw	r3,-25764(gp)
    fe7c:	e1fffd17 	ldw	r7,-12(fp)
    fe80:	01800074 	movhi	r6,1
    fe84:	31803304 	addi	r6,r6,204
    fe88:	180b883a 	mov	r5,r3
    fe8c:	1009883a 	mov	r4,r2
    fe90:	00107040 	call	10704 <alt_alarm_start>
    fe94:	1000040e 	bge	r2,zero,fea8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fe98:	e0fffd17 	ldw	r3,-12(fp)
    fe9c:	00a00034 	movhi	r2,32768
    fea0:	10bfffc4 	addi	r2,r2,-1
    fea4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fea8:	0001883a 	nop
    feac:	e037883a 	mov	sp,fp
    feb0:	dfc00117 	ldw	ra,4(sp)
    feb4:	df000017 	ldw	fp,0(sp)
    feb8:	dec00204 	addi	sp,sp,8
    febc:	f800283a 	ret

0000fec0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    fec0:	defff804 	addi	sp,sp,-32
    fec4:	df000715 	stw	fp,28(sp)
    fec8:	df000704 	addi	fp,sp,28
    fecc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fed0:	e0bfff17 	ldw	r2,-4(fp)
    fed4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fed8:	e0bffb17 	ldw	r2,-20(fp)
    fedc:	10800017 	ldw	r2,0(r2)
    fee0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fee4:	e0bffc17 	ldw	r2,-16(fp)
    fee8:	10800104 	addi	r2,r2,4
    feec:	10800037 	ldwio	r2,0(r2)
    fef0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fef4:	e0bffd17 	ldw	r2,-12(fp)
    fef8:	1080c00c 	andi	r2,r2,768
    fefc:	10006d26 	beq	r2,zero,100b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ff00:	e0bffd17 	ldw	r2,-12(fp)
    ff04:	1080400c 	andi	r2,r2,256
    ff08:	10003526 	beq	r2,zero,ffe0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ff0c:	00800074 	movhi	r2,1
    ff10:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff14:	e0bffb17 	ldw	r2,-20(fp)
    ff18:	10800a17 	ldw	r2,40(r2)
    ff1c:	10800044 	addi	r2,r2,1
    ff20:	1081ffcc 	andi	r2,r2,2047
    ff24:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ff28:	e0bffb17 	ldw	r2,-20(fp)
    ff2c:	10c00b17 	ldw	r3,44(r2)
    ff30:	e0bffe17 	ldw	r2,-8(fp)
    ff34:	18801526 	beq	r3,r2,ff8c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ff38:	e0bffc17 	ldw	r2,-16(fp)
    ff3c:	10800037 	ldwio	r2,0(r2)
    ff40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ff44:	e0bff917 	ldw	r2,-28(fp)
    ff48:	10a0000c 	andi	r2,r2,32768
    ff4c:	10001126 	beq	r2,zero,ff94 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ff50:	e0bffb17 	ldw	r2,-20(fp)
    ff54:	10800a17 	ldw	r2,40(r2)
    ff58:	e0fff917 	ldw	r3,-28(fp)
    ff5c:	1809883a 	mov	r4,r3
    ff60:	e0fffb17 	ldw	r3,-20(fp)
    ff64:	1885883a 	add	r2,r3,r2
    ff68:	10800e04 	addi	r2,r2,56
    ff6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff70:	e0bffb17 	ldw	r2,-20(fp)
    ff74:	10800a17 	ldw	r2,40(r2)
    ff78:	10800044 	addi	r2,r2,1
    ff7c:	10c1ffcc 	andi	r3,r2,2047
    ff80:	e0bffb17 	ldw	r2,-20(fp)
    ff84:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ff88:	003fe206 	br	ff14 <__alt_mem_onchip_memory2_0+0xf700ff14>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ff8c:	0001883a 	nop
    ff90:	00000106 	br	ff98 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ff94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ff98:	e0bff917 	ldw	r2,-28(fp)
    ff9c:	10bfffec 	andhi	r2,r2,65535
    ffa0:	10000f26 	beq	r2,zero,ffe0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ffa4:	e0bffb17 	ldw	r2,-20(fp)
    ffa8:	10c00817 	ldw	r3,32(r2)
    ffac:	00bfff84 	movi	r2,-2
    ffb0:	1886703a 	and	r3,r3,r2
    ffb4:	e0bffb17 	ldw	r2,-20(fp)
    ffb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ffbc:	e0bffc17 	ldw	r2,-16(fp)
    ffc0:	10800104 	addi	r2,r2,4
    ffc4:	1007883a 	mov	r3,r2
    ffc8:	e0bffb17 	ldw	r2,-20(fp)
    ffcc:	10800817 	ldw	r2,32(r2)
    ffd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ffd4:	e0bffc17 	ldw	r2,-16(fp)
    ffd8:	10800104 	addi	r2,r2,4
    ffdc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ffe0:	e0bffd17 	ldw	r2,-12(fp)
    ffe4:	1080800c 	andi	r2,r2,512
    ffe8:	103fbe26 	beq	r2,zero,fee4 <__alt_mem_onchip_memory2_0+0xf700fee4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ffec:	e0bffd17 	ldw	r2,-12(fp)
    fff0:	1004d43a 	srli	r2,r2,16
    fff4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fff8:	00001406 	br	1004c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fffc:	e0bffc17 	ldw	r2,-16(fp)
   10000:	e0fffb17 	ldw	r3,-20(fp)
   10004:	18c00d17 	ldw	r3,52(r3)
   10008:	e13ffb17 	ldw	r4,-20(fp)
   1000c:	20c7883a 	add	r3,r4,r3
   10010:	18c20e04 	addi	r3,r3,2104
   10014:	18c00003 	ldbu	r3,0(r3)
   10018:	18c03fcc 	andi	r3,r3,255
   1001c:	18c0201c 	xori	r3,r3,128
   10020:	18ffe004 	addi	r3,r3,-128
   10024:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10028:	e0bffb17 	ldw	r2,-20(fp)
   1002c:	10800d17 	ldw	r2,52(r2)
   10030:	10800044 	addi	r2,r2,1
   10034:	10c1ffcc 	andi	r3,r2,2047
   10038:	e0bffb17 	ldw	r2,-20(fp)
   1003c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10040:	e0bffa17 	ldw	r2,-24(fp)
   10044:	10bfffc4 	addi	r2,r2,-1
   10048:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1004c:	e0bffa17 	ldw	r2,-24(fp)
   10050:	10000526 	beq	r2,zero,10068 <altera_avalon_jtag_uart_irq+0x1a8>
   10054:	e0bffb17 	ldw	r2,-20(fp)
   10058:	10c00d17 	ldw	r3,52(r2)
   1005c:	e0bffb17 	ldw	r2,-20(fp)
   10060:	10800c17 	ldw	r2,48(r2)
   10064:	18bfe51e 	bne	r3,r2,fffc <__alt_mem_onchip_memory2_0+0xf700fffc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10068:	e0bffa17 	ldw	r2,-24(fp)
   1006c:	103f9d26 	beq	r2,zero,fee4 <__alt_mem_onchip_memory2_0+0xf700fee4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10070:	e0bffb17 	ldw	r2,-20(fp)
   10074:	10c00817 	ldw	r3,32(r2)
   10078:	00bfff44 	movi	r2,-3
   1007c:	1886703a 	and	r3,r3,r2
   10080:	e0bffb17 	ldw	r2,-20(fp)
   10084:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10088:	e0bffb17 	ldw	r2,-20(fp)
   1008c:	10800017 	ldw	r2,0(r2)
   10090:	10800104 	addi	r2,r2,4
   10094:	1007883a 	mov	r3,r2
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	10800817 	ldw	r2,32(r2)
   100a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100a4:	e0bffc17 	ldw	r2,-16(fp)
   100a8:	10800104 	addi	r2,r2,4
   100ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   100b0:	003f8c06 	br	fee4 <__alt_mem_onchip_memory2_0+0xf700fee4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   100b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   100b8:	0001883a 	nop
   100bc:	e037883a 	mov	sp,fp
   100c0:	df000017 	ldw	fp,0(sp)
   100c4:	dec00104 	addi	sp,sp,4
   100c8:	f800283a 	ret

000100cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   100cc:	defff804 	addi	sp,sp,-32
   100d0:	df000715 	stw	fp,28(sp)
   100d4:	df000704 	addi	fp,sp,28
   100d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   100dc:	e0bffb17 	ldw	r2,-20(fp)
   100e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   100e4:	e0bff917 	ldw	r2,-28(fp)
   100e8:	10800017 	ldw	r2,0(r2)
   100ec:	10800104 	addi	r2,r2,4
   100f0:	10800037 	ldwio	r2,0(r2)
   100f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   100f8:	e0bffa17 	ldw	r2,-24(fp)
   100fc:	1081000c 	andi	r2,r2,1024
   10100:	10000b26 	beq	r2,zero,10130 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10104:	e0bff917 	ldw	r2,-28(fp)
   10108:	10800017 	ldw	r2,0(r2)
   1010c:	10800104 	addi	r2,r2,4
   10110:	1007883a 	mov	r3,r2
   10114:	e0bff917 	ldw	r2,-28(fp)
   10118:	10800817 	ldw	r2,32(r2)
   1011c:	10810014 	ori	r2,r2,1024
   10120:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10124:	e0bff917 	ldw	r2,-28(fp)
   10128:	10000915 	stw	zero,36(r2)
   1012c:	00000a06 	br	10158 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10130:	e0bff917 	ldw	r2,-28(fp)
   10134:	10c00917 	ldw	r3,36(r2)
   10138:	00a00034 	movhi	r2,32768
   1013c:	10bfff04 	addi	r2,r2,-4
   10140:	10c00536 	bltu	r2,r3,10158 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10144:	e0bff917 	ldw	r2,-28(fp)
   10148:	10800917 	ldw	r2,36(r2)
   1014c:	10c00044 	addi	r3,r2,1
   10150:	e0bff917 	ldw	r2,-28(fp)
   10154:	10c00915 	stw	r3,36(r2)
   10158:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1015c:	e037883a 	mov	sp,fp
   10160:	df000017 	ldw	fp,0(sp)
   10164:	dec00104 	addi	sp,sp,4
   10168:	f800283a 	ret

0001016c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1016c:	defffd04 	addi	sp,sp,-12
   10170:	df000215 	stw	fp,8(sp)
   10174:	df000204 	addi	fp,sp,8
   10178:	e13ffe15 	stw	r4,-8(fp)
   1017c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10180:	00000506 	br	10198 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	1090000c 	andi	r2,r2,16384
   1018c:	10000226 	beq	r2,zero,10198 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10190:	00bffd44 	movi	r2,-11
   10194:	00000b06 	br	101c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10198:	e0bffe17 	ldw	r2,-8(fp)
   1019c:	10c00d17 	ldw	r3,52(r2)
   101a0:	e0bffe17 	ldw	r2,-8(fp)
   101a4:	10800c17 	ldw	r2,48(r2)
   101a8:	18800526 	beq	r3,r2,101c0 <altera_avalon_jtag_uart_close+0x54>
   101ac:	e0bffe17 	ldw	r2,-8(fp)
   101b0:	10c00917 	ldw	r3,36(r2)
   101b4:	e0bffe17 	ldw	r2,-8(fp)
   101b8:	10800117 	ldw	r2,4(r2)
   101bc:	18bff136 	bltu	r3,r2,10184 <__alt_mem_onchip_memory2_0+0xf7010184>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   101c0:	0005883a 	mov	r2,zero
}
   101c4:	e037883a 	mov	sp,fp
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00104 	addi	sp,sp,4
   101d0:	f800283a 	ret

000101d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   101d4:	defffa04 	addi	sp,sp,-24
   101d8:	df000515 	stw	fp,20(sp)
   101dc:	df000504 	addi	fp,sp,20
   101e0:	e13ffd15 	stw	r4,-12(fp)
   101e4:	e17ffe15 	stw	r5,-8(fp)
   101e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   101ec:	00bff9c4 	movi	r2,-25
   101f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   101f4:	e0bffe17 	ldw	r2,-8(fp)
   101f8:	10da8060 	cmpeqi	r3,r2,27137
   101fc:	1800031e 	bne	r3,zero,1020c <altera_avalon_jtag_uart_ioctl+0x38>
   10200:	109a80a0 	cmpeqi	r2,r2,27138
   10204:	1000181e 	bne	r2,zero,10268 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10208:	00002906 	br	102b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1020c:	e0bffd17 	ldw	r2,-12(fp)
   10210:	10c00117 	ldw	r3,4(r2)
   10214:	00a00034 	movhi	r2,32768
   10218:	10bfffc4 	addi	r2,r2,-1
   1021c:	18802126 	beq	r3,r2,102a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10220:	e0bfff17 	ldw	r2,-4(fp)
   10224:	10800017 	ldw	r2,0(r2)
   10228:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1022c:	e0bffc17 	ldw	r2,-16(fp)
   10230:	10800090 	cmplti	r2,r2,2
   10234:	1000061e 	bne	r2,zero,10250 <altera_avalon_jtag_uart_ioctl+0x7c>
   10238:	e0fffc17 	ldw	r3,-16(fp)
   1023c:	00a00034 	movhi	r2,32768
   10240:	10bfffc4 	addi	r2,r2,-1
   10244:	18800226 	beq	r3,r2,10250 <altera_avalon_jtag_uart_ioctl+0x7c>
   10248:	e0bffc17 	ldw	r2,-16(fp)
   1024c:	00000206 	br	10258 <altera_avalon_jtag_uart_ioctl+0x84>
   10250:	00a00034 	movhi	r2,32768
   10254:	10bfff84 	addi	r2,r2,-2
   10258:	e0fffd17 	ldw	r3,-12(fp)
   1025c:	18800115 	stw	r2,4(r3)
      rc = 0;
   10260:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10264:	00000f06 	br	102a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10268:	e0bffd17 	ldw	r2,-12(fp)
   1026c:	10c00117 	ldw	r3,4(r2)
   10270:	00a00034 	movhi	r2,32768
   10274:	10bfffc4 	addi	r2,r2,-1
   10278:	18800c26 	beq	r3,r2,102ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1027c:	e0bffd17 	ldw	r2,-12(fp)
   10280:	10c00917 	ldw	r3,36(r2)
   10284:	e0bffd17 	ldw	r2,-12(fp)
   10288:	10800117 	ldw	r2,4(r2)
   1028c:	1885803a 	cmpltu	r2,r3,r2
   10290:	10c03fcc 	andi	r3,r2,255
   10294:	e0bfff17 	ldw	r2,-4(fp)
   10298:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1029c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   102a0:	00000206 	br	102ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   102a4:	0001883a 	nop
   102a8:	00000106 	br	102b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   102ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   102b0:	e0bffb17 	ldw	r2,-20(fp)
}
   102b4:	e037883a 	mov	sp,fp
   102b8:	df000017 	ldw	fp,0(sp)
   102bc:	dec00104 	addi	sp,sp,4
   102c0:	f800283a 	ret

000102c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   102c4:	defff304 	addi	sp,sp,-52
   102c8:	dfc00c15 	stw	ra,48(sp)
   102cc:	df000b15 	stw	fp,44(sp)
   102d0:	df000b04 	addi	fp,sp,44
   102d4:	e13ffc15 	stw	r4,-16(fp)
   102d8:	e17ffd15 	stw	r5,-12(fp)
   102dc:	e1bffe15 	stw	r6,-8(fp)
   102e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   102e4:	e0bffd17 	ldw	r2,-12(fp)
   102e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   102ec:	00004706 	br	1040c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   102f0:	e0bffc17 	ldw	r2,-16(fp)
   102f4:	10800a17 	ldw	r2,40(r2)
   102f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   102fc:	e0bffc17 	ldw	r2,-16(fp)
   10300:	10800b17 	ldw	r2,44(r2)
   10304:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10308:	e0fff717 	ldw	r3,-36(fp)
   1030c:	e0bff817 	ldw	r2,-32(fp)
   10310:	18800536 	bltu	r3,r2,10328 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10314:	e0fff717 	ldw	r3,-36(fp)
   10318:	e0bff817 	ldw	r2,-32(fp)
   1031c:	1885c83a 	sub	r2,r3,r2
   10320:	e0bff615 	stw	r2,-40(fp)
   10324:	00000406 	br	10338 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10328:	00c20004 	movi	r3,2048
   1032c:	e0bff817 	ldw	r2,-32(fp)
   10330:	1885c83a 	sub	r2,r3,r2
   10334:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10338:	e0bff617 	ldw	r2,-40(fp)
   1033c:	10001e26 	beq	r2,zero,103b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10340:	e0fffe17 	ldw	r3,-8(fp)
   10344:	e0bff617 	ldw	r2,-40(fp)
   10348:	1880022e 	bgeu	r3,r2,10354 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1034c:	e0bffe17 	ldw	r2,-8(fp)
   10350:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10354:	e0bffc17 	ldw	r2,-16(fp)
   10358:	10c00e04 	addi	r3,r2,56
   1035c:	e0bff817 	ldw	r2,-32(fp)
   10360:	1885883a 	add	r2,r3,r2
   10364:	e1bff617 	ldw	r6,-40(fp)
   10368:	100b883a 	mov	r5,r2
   1036c:	e13ff517 	ldw	r4,-44(fp)
   10370:	0007ed40 	call	7ed4 <memcpy>
      ptr   += n;
   10374:	e0fff517 	ldw	r3,-44(fp)
   10378:	e0bff617 	ldw	r2,-40(fp)
   1037c:	1885883a 	add	r2,r3,r2
   10380:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10384:	e0fffe17 	ldw	r3,-8(fp)
   10388:	e0bff617 	ldw	r2,-40(fp)
   1038c:	1885c83a 	sub	r2,r3,r2
   10390:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10394:	e0fff817 	ldw	r3,-32(fp)
   10398:	e0bff617 	ldw	r2,-40(fp)
   1039c:	1885883a 	add	r2,r3,r2
   103a0:	10c1ffcc 	andi	r3,r2,2047
   103a4:	e0bffc17 	ldw	r2,-16(fp)
   103a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	00bfcf16 	blt	zero,r2,102f0 <__alt_mem_onchip_memory2_0+0xf70102f0>
   103b4:	00000106 	br	103bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   103b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   103bc:	e0fff517 	ldw	r3,-44(fp)
   103c0:	e0bffd17 	ldw	r2,-12(fp)
   103c4:	1880141e 	bne	r3,r2,10418 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   103c8:	e0bfff17 	ldw	r2,-4(fp)
   103cc:	1090000c 	andi	r2,r2,16384
   103d0:	1000131e 	bne	r2,zero,10420 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   103d4:	0001883a 	nop
   103d8:	e0bffc17 	ldw	r2,-16(fp)
   103dc:	10c00a17 	ldw	r3,40(r2)
   103e0:	e0bff717 	ldw	r2,-36(fp)
   103e4:	1880051e 	bne	r3,r2,103fc <altera_avalon_jtag_uart_read+0x138>
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10c00917 	ldw	r3,36(r2)
   103f0:	e0bffc17 	ldw	r2,-16(fp)
   103f4:	10800117 	ldw	r2,4(r2)
   103f8:	18bff736 	bltu	r3,r2,103d8 <__alt_mem_onchip_memory2_0+0xf70103d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   103fc:	e0bffc17 	ldw	r2,-16(fp)
   10400:	10c00a17 	ldw	r3,40(r2)
   10404:	e0bff717 	ldw	r2,-36(fp)
   10408:	18800726 	beq	r3,r2,10428 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1040c:	e0bffe17 	ldw	r2,-8(fp)
   10410:	00bfb716 	blt	zero,r2,102f0 <__alt_mem_onchip_memory2_0+0xf70102f0>
   10414:	00000506 	br	1042c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10418:	0001883a 	nop
   1041c:	00000306 	br	1042c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10420:	0001883a 	nop
   10424:	00000106 	br	1042c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10428:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1042c:	e0fff517 	ldw	r3,-44(fp)
   10430:	e0bffd17 	ldw	r2,-12(fp)
   10434:	18801826 	beq	r3,r2,10498 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10438:	0005303a 	rdctl	r2,status
   1043c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10440:	e0fffb17 	ldw	r3,-20(fp)
   10444:	00bfff84 	movi	r2,-2
   10448:	1884703a 	and	r2,r3,r2
   1044c:	1001703a 	wrctl	status,r2
  
  return context;
   10450:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10454:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800817 	ldw	r2,32(r2)
   10460:	10c00054 	ori	r3,r2,1
   10464:	e0bffc17 	ldw	r2,-16(fp)
   10468:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1046c:	e0bffc17 	ldw	r2,-16(fp)
   10470:	10800017 	ldw	r2,0(r2)
   10474:	10800104 	addi	r2,r2,4
   10478:	1007883a 	mov	r3,r2
   1047c:	e0bffc17 	ldw	r2,-16(fp)
   10480:	10800817 	ldw	r2,32(r2)
   10484:	18800035 	stwio	r2,0(r3)
   10488:	e0bffa17 	ldw	r2,-24(fp)
   1048c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10490:	e0bff917 	ldw	r2,-28(fp)
   10494:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10498:	e0fff517 	ldw	r3,-44(fp)
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	18800426 	beq	r3,r2,104b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   104a4:	e0fff517 	ldw	r3,-44(fp)
   104a8:	e0bffd17 	ldw	r2,-12(fp)
   104ac:	1885c83a 	sub	r2,r3,r2
   104b0:	00000606 	br	104cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	1090000c 	andi	r2,r2,16384
   104bc:	10000226 	beq	r2,zero,104c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   104c0:	00bffd44 	movi	r2,-11
   104c4:	00000106 	br	104cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   104c8:	00bffec4 	movi	r2,-5
}
   104cc:	e037883a 	mov	sp,fp
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   104e0:	defff304 	addi	sp,sp,-52
   104e4:	dfc00c15 	stw	ra,48(sp)
   104e8:	df000b15 	stw	fp,44(sp)
   104ec:	df000b04 	addi	fp,sp,44
   104f0:	e13ffc15 	stw	r4,-16(fp)
   104f4:	e17ffd15 	stw	r5,-12(fp)
   104f8:	e1bffe15 	stw	r6,-8(fp)
   104fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10500:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10504:	e0bffd17 	ldw	r2,-12(fp)
   10508:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1050c:	00003706 	br	105ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10800c17 	ldw	r2,48(r2)
   10518:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1051c:	e0bffc17 	ldw	r2,-16(fp)
   10520:	10800d17 	ldw	r2,52(r2)
   10524:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10528:	e0fff917 	ldw	r3,-28(fp)
   1052c:	e0bff517 	ldw	r2,-44(fp)
   10530:	1880062e 	bgeu	r3,r2,1054c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10534:	e0fff517 	ldw	r3,-44(fp)
   10538:	e0bff917 	ldw	r2,-28(fp)
   1053c:	1885c83a 	sub	r2,r3,r2
   10540:	10bfffc4 	addi	r2,r2,-1
   10544:	e0bff615 	stw	r2,-40(fp)
   10548:	00000b06 	br	10578 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1054c:	e0bff517 	ldw	r2,-44(fp)
   10550:	10000526 	beq	r2,zero,10568 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10554:	00c20004 	movi	r3,2048
   10558:	e0bff917 	ldw	r2,-28(fp)
   1055c:	1885c83a 	sub	r2,r3,r2
   10560:	e0bff615 	stw	r2,-40(fp)
   10564:	00000406 	br	10578 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10568:	00c1ffc4 	movi	r3,2047
   1056c:	e0bff917 	ldw	r2,-28(fp)
   10570:	1885c83a 	sub	r2,r3,r2
   10574:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10578:	e0bff617 	ldw	r2,-40(fp)
   1057c:	10001e26 	beq	r2,zero,105f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10580:	e0fffe17 	ldw	r3,-8(fp)
   10584:	e0bff617 	ldw	r2,-40(fp)
   10588:	1880022e 	bgeu	r3,r2,10594 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1058c:	e0bffe17 	ldw	r2,-8(fp)
   10590:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10594:	e0bffc17 	ldw	r2,-16(fp)
   10598:	10c20e04 	addi	r3,r2,2104
   1059c:	e0bff917 	ldw	r2,-28(fp)
   105a0:	1885883a 	add	r2,r3,r2
   105a4:	e1bff617 	ldw	r6,-40(fp)
   105a8:	e17ffd17 	ldw	r5,-12(fp)
   105ac:	1009883a 	mov	r4,r2
   105b0:	0007ed40 	call	7ed4 <memcpy>
      ptr   += n;
   105b4:	e0fffd17 	ldw	r3,-12(fp)
   105b8:	e0bff617 	ldw	r2,-40(fp)
   105bc:	1885883a 	add	r2,r3,r2
   105c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   105c4:	e0fffe17 	ldw	r3,-8(fp)
   105c8:	e0bff617 	ldw	r2,-40(fp)
   105cc:	1885c83a 	sub	r2,r3,r2
   105d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105d4:	e0fff917 	ldw	r3,-28(fp)
   105d8:	e0bff617 	ldw	r2,-40(fp)
   105dc:	1885883a 	add	r2,r3,r2
   105e0:	10c1ffcc 	andi	r3,r2,2047
   105e4:	e0bffc17 	ldw	r2,-16(fp)
   105e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   105ec:	e0bffe17 	ldw	r2,-8(fp)
   105f0:	00bfc716 	blt	zero,r2,10510 <__alt_mem_onchip_memory2_0+0xf7010510>
   105f4:	00000106 	br	105fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   105f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105fc:	0005303a 	rdctl	r2,status
   10600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10604:	e0fffb17 	ldw	r3,-20(fp)
   10608:	00bfff84 	movi	r2,-2
   1060c:	1884703a 	and	r2,r3,r2
   10610:	1001703a 	wrctl	status,r2
  
  return context;
   10614:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10618:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1061c:	e0bffc17 	ldw	r2,-16(fp)
   10620:	10800817 	ldw	r2,32(r2)
   10624:	10c00094 	ori	r3,r2,2
   10628:	e0bffc17 	ldw	r2,-16(fp)
   1062c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10630:	e0bffc17 	ldw	r2,-16(fp)
   10634:	10800017 	ldw	r2,0(r2)
   10638:	10800104 	addi	r2,r2,4
   1063c:	1007883a 	mov	r3,r2
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	10800817 	ldw	r2,32(r2)
   10648:	18800035 	stwio	r2,0(r3)
   1064c:	e0bffa17 	ldw	r2,-24(fp)
   10650:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10654:	e0bff817 	ldw	r2,-32(fp)
   10658:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1065c:	e0bffe17 	ldw	r2,-8(fp)
   10660:	0080100e 	bge	zero,r2,106a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	1090000c 	andi	r2,r2,16384
   1066c:	1000101e 	bne	r2,zero,106b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10670:	0001883a 	nop
   10674:	e0bffc17 	ldw	r2,-16(fp)
   10678:	10c00d17 	ldw	r3,52(r2)
   1067c:	e0bff517 	ldw	r2,-44(fp)
   10680:	1880051e 	bne	r3,r2,10698 <altera_avalon_jtag_uart_write+0x1b8>
   10684:	e0bffc17 	ldw	r2,-16(fp)
   10688:	10c00917 	ldw	r3,36(r2)
   1068c:	e0bffc17 	ldw	r2,-16(fp)
   10690:	10800117 	ldw	r2,4(r2)
   10694:	18bff736 	bltu	r3,r2,10674 <__alt_mem_onchip_memory2_0+0xf7010674>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10698:	e0bffc17 	ldw	r2,-16(fp)
   1069c:	10800917 	ldw	r2,36(r2)
   106a0:	1000051e 	bne	r2,zero,106b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   106a4:	e0bffe17 	ldw	r2,-8(fp)
   106a8:	00bfd016 	blt	zero,r2,105ec <__alt_mem_onchip_memory2_0+0xf70105ec>
   106ac:	00000306 	br	106bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   106b0:	0001883a 	nop
   106b4:	00000106 	br	106bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   106b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   106bc:	e0fffd17 	ldw	r3,-12(fp)
   106c0:	e0bff717 	ldw	r2,-36(fp)
   106c4:	18800426 	beq	r3,r2,106d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   106c8:	e0fffd17 	ldw	r3,-12(fp)
   106cc:	e0bff717 	ldw	r2,-36(fp)
   106d0:	1885c83a 	sub	r2,r3,r2
   106d4:	00000606 	br	106f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   106d8:	e0bfff17 	ldw	r2,-4(fp)
   106dc:	1090000c 	andi	r2,r2,16384
   106e0:	10000226 	beq	r2,zero,106ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   106e4:	00bffd44 	movi	r2,-11
   106e8:	00000106 	br	106f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   106ec:	00bffec4 	movi	r2,-5
}
   106f0:	e037883a 	mov	sp,fp
   106f4:	dfc00117 	ldw	ra,4(sp)
   106f8:	df000017 	ldw	fp,0(sp)
   106fc:	dec00204 	addi	sp,sp,8
   10700:	f800283a 	ret

00010704 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10704:	defff504 	addi	sp,sp,-44
   10708:	df000a15 	stw	fp,40(sp)
   1070c:	df000a04 	addi	fp,sp,40
   10710:	e13ffc15 	stw	r4,-16(fp)
   10714:	e17ffd15 	stw	r5,-12(fp)
   10718:	e1bffe15 	stw	r6,-8(fp)
   1071c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10720:	e03ff615 	stw	zero,-40(fp)
   10724:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
   10728:	10003c26 	beq	r2,zero,1081c <alt_alarm_start+0x118>
  {
    if (alarm)
   1072c:	e0bffc17 	ldw	r2,-16(fp)
   10730:	10003826 	beq	r2,zero,10814 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	e0fffe17 	ldw	r3,-8(fp)
   1073c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10740:	e0bffc17 	ldw	r2,-16(fp)
   10744:	e0ffff17 	ldw	r3,-4(fp)
   10748:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1074c:	0005303a 	rdctl	r2,status
   10750:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10754:	e0fff917 	ldw	r3,-28(fp)
   10758:	00bfff84 	movi	r2,-2
   1075c:	1884703a 	and	r2,r3,r2
   10760:	1001703a 	wrctl	status,r2
  
  return context;
   10764:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10768:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1076c:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
   10770:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10774:	e0fffd17 	ldw	r3,-12(fp)
   10778:	e0bff617 	ldw	r2,-40(fp)
   1077c:	1885883a 	add	r2,r3,r2
   10780:	10c00044 	addi	r3,r2,1
   10784:	e0bffc17 	ldw	r2,-16(fp)
   10788:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1078c:	e0bffc17 	ldw	r2,-16(fp)
   10790:	10c00217 	ldw	r3,8(r2)
   10794:	e0bff617 	ldw	r2,-40(fp)
   10798:	1880042e 	bgeu	r3,r2,107ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1079c:	e0bffc17 	ldw	r2,-16(fp)
   107a0:	00c00044 	movi	r3,1
   107a4:	10c00405 	stb	r3,16(r2)
   107a8:	00000206 	br	107b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	d0e00e04 	addi	r3,gp,-32712
   107bc:	e0fffa15 	stw	r3,-24(fp)
   107c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   107c4:	e0bffb17 	ldw	r2,-20(fp)
   107c8:	e0fffa17 	ldw	r3,-24(fp)
   107cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   107d0:	e0bffa17 	ldw	r2,-24(fp)
   107d4:	10c00017 	ldw	r3,0(r2)
   107d8:	e0bffb17 	ldw	r2,-20(fp)
   107dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   107e0:	e0bffa17 	ldw	r2,-24(fp)
   107e4:	10800017 	ldw	r2,0(r2)
   107e8:	e0fffb17 	ldw	r3,-20(fp)
   107ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   107f0:	e0bffa17 	ldw	r2,-24(fp)
   107f4:	e0fffb17 	ldw	r3,-20(fp)
   107f8:	10c00015 	stw	r3,0(r2)
   107fc:	e0bff817 	ldw	r2,-32(fp)
   10800:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10804:	e0bff717 	ldw	r2,-36(fp)
   10808:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1080c:	0005883a 	mov	r2,zero
   10810:	00000306 	br	10820 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10814:	00bffa84 	movi	r2,-22
   10818:	00000106 	br	10820 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1081c:	00bfde84 	movi	r2,-134
  }
}
   10820:	e037883a 	mov	sp,fp
   10824:	df000017 	ldw	fp,0(sp)
   10828:	dec00104 	addi	sp,sp,4
   1082c:	f800283a 	ret

00010830 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10830:	defffa04 	addi	sp,sp,-24
   10834:	dfc00515 	stw	ra,20(sp)
   10838:	df000415 	stw	fp,16(sp)
   1083c:	df000404 	addi	fp,sp,16
   10840:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10844:	00800244 	movi	r2,9
   10848:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1084c:	014003f4 	movhi	r5,15
   10850:	29509004 	addi	r5,r5,16960
   10854:	e13ffd17 	ldw	r4,-12(fp)
   10858:	000c9540 	call	c954 <__mulsi3>
   1085c:	100b883a 	mov	r5,r2
   10860:	0100bef4 	movhi	r4,763
   10864:	213c2004 	addi	r4,r4,-3968
   10868:	000c8980 	call	c898 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1086c:	100b883a 	mov	r5,r2
   10870:	01200034 	movhi	r4,32768
   10874:	213fffc4 	addi	r4,r4,-1
   10878:	000c8980 	call	c898 <__udivsi3>
   1087c:	100b883a 	mov	r5,r2
   10880:	e13fff17 	ldw	r4,-4(fp)
   10884:	000c8980 	call	c898 <__udivsi3>
   10888:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1088c:	e0bffe17 	ldw	r2,-8(fp)
   10890:	10002a26 	beq	r2,zero,1093c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10894:	e03ffc15 	stw	zero,-16(fp)
   10898:	00001706 	br	108f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1089c:	00a00034 	movhi	r2,32768
   108a0:	10bfffc4 	addi	r2,r2,-1
   108a4:	10bfffc4 	addi	r2,r2,-1
   108a8:	103ffe1e 	bne	r2,zero,108a4 <__alt_mem_onchip_memory2_0+0xf70108a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   108ac:	014003f4 	movhi	r5,15
   108b0:	29509004 	addi	r5,r5,16960
   108b4:	e13ffd17 	ldw	r4,-12(fp)
   108b8:	000c9540 	call	c954 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   108bc:	100b883a 	mov	r5,r2
   108c0:	0100bef4 	movhi	r4,763
   108c4:	213c2004 	addi	r4,r4,-3968
   108c8:	000c8980 	call	c898 <__udivsi3>
   108cc:	100b883a 	mov	r5,r2
   108d0:	01200034 	movhi	r4,32768
   108d4:	213fffc4 	addi	r4,r4,-1
   108d8:	000c8980 	call	c898 <__udivsi3>
   108dc:	1007883a 	mov	r3,r2
   108e0:	e0bfff17 	ldw	r2,-4(fp)
   108e4:	10c5c83a 	sub	r2,r2,r3
   108e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   108ec:	e0bffc17 	ldw	r2,-16(fp)
   108f0:	10800044 	addi	r2,r2,1
   108f4:	e0bffc15 	stw	r2,-16(fp)
   108f8:	e0fffc17 	ldw	r3,-16(fp)
   108fc:	e0bffe17 	ldw	r2,-8(fp)
   10900:	18bfe616 	blt	r3,r2,1089c <__alt_mem_onchip_memory2_0+0xf701089c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10904:	014003f4 	movhi	r5,15
   10908:	29509004 	addi	r5,r5,16960
   1090c:	e13ffd17 	ldw	r4,-12(fp)
   10910:	000c9540 	call	c954 <__mulsi3>
   10914:	100b883a 	mov	r5,r2
   10918:	0100bef4 	movhi	r4,763
   1091c:	213c2004 	addi	r4,r4,-3968
   10920:	000c8980 	call	c898 <__udivsi3>
   10924:	e17fff17 	ldw	r5,-4(fp)
   10928:	1009883a 	mov	r4,r2
   1092c:	000c9540 	call	c954 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10930:	10bfffc4 	addi	r2,r2,-1
   10934:	103ffe1e 	bne	r2,zero,10930 <__alt_mem_onchip_memory2_0+0xf7010930>
   10938:	00000d06 	br	10970 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1093c:	014003f4 	movhi	r5,15
   10940:	29509004 	addi	r5,r5,16960
   10944:	e13ffd17 	ldw	r4,-12(fp)
   10948:	000c9540 	call	c954 <__mulsi3>
   1094c:	100b883a 	mov	r5,r2
   10950:	0100bef4 	movhi	r4,763
   10954:	213c2004 	addi	r4,r4,-3968
   10958:	000c8980 	call	c898 <__udivsi3>
   1095c:	e17fff17 	ldw	r5,-4(fp)
   10960:	1009883a 	mov	r4,r2
   10964:	000c9540 	call	c954 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10968:	10bfffc4 	addi	r2,r2,-1
   1096c:	00bffe16 	blt	zero,r2,10968 <__alt_mem_onchip_memory2_0+0xf7010968>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10970:	0005883a 	mov	r2,zero
}
   10974:	e037883a 	mov	sp,fp
   10978:	dfc00117 	ldw	ra,4(sp)
   1097c:	df000017 	ldw	fp,0(sp)
   10980:	dec00204 	addi	sp,sp,8
   10984:	f800283a 	ret

00010988 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10988:	deffff04 	addi	sp,sp,-4
   1098c:	df000015 	stw	fp,0(sp)
   10990:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10994:	0001883a 	nop
   10998:	e037883a 	mov	sp,fp
   1099c:	df000017 	ldw	fp,0(sp)
   109a0:	dec00104 	addi	sp,sp,4
   109a4:	f800283a 	ret

000109a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   109a8:	defffe04 	addi	sp,sp,-8
   109ac:	dfc00115 	stw	ra,4(sp)
   109b0:	df000015 	stw	fp,0(sp)
   109b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   109b8:	d0a00b17 	ldw	r2,-32724(gp)
   109bc:	10000326 	beq	r2,zero,109cc <alt_get_errno+0x24>
   109c0:	d0a00b17 	ldw	r2,-32724(gp)
   109c4:	103ee83a 	callr	r2
   109c8:	00000106 	br	109d0 <alt_get_errno+0x28>
   109cc:	d0a6d204 	addi	r2,gp,-25784
}
   109d0:	e037883a 	mov	sp,fp
   109d4:	dfc00117 	ldw	ra,4(sp)
   109d8:	df000017 	ldw	fp,0(sp)
   109dc:	dec00204 	addi	sp,sp,8
   109e0:	f800283a 	ret

000109e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   109e4:	defffa04 	addi	sp,sp,-24
   109e8:	dfc00515 	stw	ra,20(sp)
   109ec:	df000415 	stw	fp,16(sp)
   109f0:	df000404 	addi	fp,sp,16
   109f4:	e13ffe15 	stw	r4,-8(fp)
   109f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   109fc:	e0bffe17 	ldw	r2,-8(fp)
   10a00:	10000326 	beq	r2,zero,10a10 <alt_dev_llist_insert+0x2c>
   10a04:	e0bffe17 	ldw	r2,-8(fp)
   10a08:	10800217 	ldw	r2,8(r2)
   10a0c:	1000061e 	bne	r2,zero,10a28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10a10:	00109a80 	call	109a8 <alt_get_errno>
   10a14:	1007883a 	mov	r3,r2
   10a18:	00800584 	movi	r2,22
   10a1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10a20:	00bffa84 	movi	r2,-22
   10a24:	00001306 	br	10a74 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10a28:	e0bffe17 	ldw	r2,-8(fp)
   10a2c:	e0ffff17 	ldw	r3,-4(fp)
   10a30:	e0fffc15 	stw	r3,-16(fp)
   10a34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10a38:	e0bffd17 	ldw	r2,-12(fp)
   10a3c:	e0fffc17 	ldw	r3,-16(fp)
   10a40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10a44:	e0bffc17 	ldw	r2,-16(fp)
   10a48:	10c00017 	ldw	r3,0(r2)
   10a4c:	e0bffd17 	ldw	r2,-12(fp)
   10a50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10a54:	e0bffc17 	ldw	r2,-16(fp)
   10a58:	10800017 	ldw	r2,0(r2)
   10a5c:	e0fffd17 	ldw	r3,-12(fp)
   10a60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10a64:	e0bffc17 	ldw	r2,-16(fp)
   10a68:	e0fffd17 	ldw	r3,-12(fp)
   10a6c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10a70:	0005883a 	mov	r2,zero
}
   10a74:	e037883a 	mov	sp,fp
   10a78:	dfc00117 	ldw	ra,4(sp)
   10a7c:	df000017 	ldw	fp,0(sp)
   10a80:	dec00204 	addi	sp,sp,8
   10a84:	f800283a 	ret

00010a88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10a88:	defffd04 	addi	sp,sp,-12
   10a8c:	dfc00215 	stw	ra,8(sp)
   10a90:	df000115 	stw	fp,4(sp)
   10a94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10a98:	00800074 	movhi	r2,1
   10a9c:	10868f04 	addi	r2,r2,6716
   10aa0:	e0bfff15 	stw	r2,-4(fp)
   10aa4:	00000606 	br	10ac0 <_do_ctors+0x38>
        (*ctor) (); 
   10aa8:	e0bfff17 	ldw	r2,-4(fp)
   10aac:	10800017 	ldw	r2,0(r2)
   10ab0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	10bfff04 	addi	r2,r2,-4
   10abc:	e0bfff15 	stw	r2,-4(fp)
   10ac0:	e0ffff17 	ldw	r3,-4(fp)
   10ac4:	00800074 	movhi	r2,1
   10ac8:	10869004 	addi	r2,r2,6720
   10acc:	18bff62e 	bgeu	r3,r2,10aa8 <__alt_mem_onchip_memory2_0+0xf7010aa8>
        (*ctor) (); 
}
   10ad0:	0001883a 	nop
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10ae8:	defffd04 	addi	sp,sp,-12
   10aec:	dfc00215 	stw	ra,8(sp)
   10af0:	df000115 	stw	fp,4(sp)
   10af4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10af8:	00800074 	movhi	r2,1
   10afc:	10868f04 	addi	r2,r2,6716
   10b00:	e0bfff15 	stw	r2,-4(fp)
   10b04:	00000606 	br	10b20 <_do_dtors+0x38>
        (*dtor) (); 
   10b08:	e0bfff17 	ldw	r2,-4(fp)
   10b0c:	10800017 	ldw	r2,0(r2)
   10b10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10b14:	e0bfff17 	ldw	r2,-4(fp)
   10b18:	10bfff04 	addi	r2,r2,-4
   10b1c:	e0bfff15 	stw	r2,-4(fp)
   10b20:	e0ffff17 	ldw	r3,-4(fp)
   10b24:	00800074 	movhi	r2,1
   10b28:	10869004 	addi	r2,r2,6720
   10b2c:	18bff62e 	bgeu	r3,r2,10b08 <__alt_mem_onchip_memory2_0+0xf7010b08>
        (*dtor) (); 
}
   10b30:	0001883a 	nop
   10b34:	e037883a 	mov	sp,fp
   10b38:	dfc00117 	ldw	ra,4(sp)
   10b3c:	df000017 	ldw	fp,0(sp)
   10b40:	dec00204 	addi	sp,sp,8
   10b44:	f800283a 	ret

00010b48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10b48:	deffff04 	addi	sp,sp,-4
   10b4c:	df000015 	stw	fp,0(sp)
   10b50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10b54:	0001883a 	nop
   10b58:	e037883a 	mov	sp,fp
   10b5c:	df000017 	ldw	fp,0(sp)
   10b60:	dec00104 	addi	sp,sp,4
   10b64:	f800283a 	ret

00010b68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10b68:	defff904 	addi	sp,sp,-28
   10b6c:	dfc00615 	stw	ra,24(sp)
   10b70:	df000515 	stw	fp,20(sp)
   10b74:	df000504 	addi	fp,sp,20
   10b78:	e13ffc15 	stw	r4,-16(fp)
   10b7c:	e17ffd15 	stw	r5,-12(fp)
   10b80:	e1bffe15 	stw	r6,-8(fp)
   10b84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10b88:	e0800217 	ldw	r2,8(fp)
   10b8c:	d8800015 	stw	r2,0(sp)
   10b90:	e1ffff17 	ldw	r7,-4(fp)
   10b94:	e1bffe17 	ldw	r6,-8(fp)
   10b98:	e17ffd17 	ldw	r5,-12(fp)
   10b9c:	e13ffc17 	ldw	r4,-16(fp)
   10ba0:	0010d180 	call	10d18 <alt_iic_isr_register>
}  
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	dfc00117 	ldw	ra,4(sp)
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00204 	addi	sp,sp,8
   10bb4:	f800283a 	ret

00010bb8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10bb8:	defff904 	addi	sp,sp,-28
   10bbc:	df000615 	stw	fp,24(sp)
   10bc0:	df000604 	addi	fp,sp,24
   10bc4:	e13ffe15 	stw	r4,-8(fp)
   10bc8:	e17fff15 	stw	r5,-4(fp)
   10bcc:	e0bfff17 	ldw	r2,-4(fp)
   10bd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bd4:	0005303a 	rdctl	r2,status
   10bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bdc:	e0fffb17 	ldw	r3,-20(fp)
   10be0:	00bfff84 	movi	r2,-2
   10be4:	1884703a 	and	r2,r3,r2
   10be8:	1001703a 	wrctl	status,r2
  
  return context;
   10bec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10bf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10bf4:	00c00044 	movi	r3,1
   10bf8:	e0bffa17 	ldw	r2,-24(fp)
   10bfc:	1884983a 	sll	r2,r3,r2
   10c00:	1007883a 	mov	r3,r2
   10c04:	d0a6d617 	ldw	r2,-25768(gp)
   10c08:	1884b03a 	or	r2,r3,r2
   10c0c:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c10:	d0a6d617 	ldw	r2,-25768(gp)
   10c14:	100170fa 	wrctl	ienable,r2
   10c18:	e0bffc17 	ldw	r2,-16(fp)
   10c1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c20:	e0bffd17 	ldw	r2,-12(fp)
   10c24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10c28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10c2c:	0001883a 	nop
}
   10c30:	e037883a 	mov	sp,fp
   10c34:	df000017 	ldw	fp,0(sp)
   10c38:	dec00104 	addi	sp,sp,4
   10c3c:	f800283a 	ret

00010c40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10c40:	defff904 	addi	sp,sp,-28
   10c44:	df000615 	stw	fp,24(sp)
   10c48:	df000604 	addi	fp,sp,24
   10c4c:	e13ffe15 	stw	r4,-8(fp)
   10c50:	e17fff15 	stw	r5,-4(fp)
   10c54:	e0bfff17 	ldw	r2,-4(fp)
   10c58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c5c:	0005303a 	rdctl	r2,status
   10c60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c64:	e0fffb17 	ldw	r3,-20(fp)
   10c68:	00bfff84 	movi	r2,-2
   10c6c:	1884703a 	and	r2,r3,r2
   10c70:	1001703a 	wrctl	status,r2
  
  return context;
   10c74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10c7c:	00c00044 	movi	r3,1
   10c80:	e0bffa17 	ldw	r2,-24(fp)
   10c84:	1884983a 	sll	r2,r3,r2
   10c88:	0084303a 	nor	r2,zero,r2
   10c8c:	1007883a 	mov	r3,r2
   10c90:	d0a6d617 	ldw	r2,-25768(gp)
   10c94:	1884703a 	and	r2,r3,r2
   10c98:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c9c:	d0a6d617 	ldw	r2,-25768(gp)
   10ca0:	100170fa 	wrctl	ienable,r2
   10ca4:	e0bffc17 	ldw	r2,-16(fp)
   10ca8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10cb4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10cb8:	0001883a 	nop
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
   10cc8:	f800283a 	ret

00010ccc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10ccc:	defffc04 	addi	sp,sp,-16
   10cd0:	df000315 	stw	fp,12(sp)
   10cd4:	df000304 	addi	fp,sp,12
   10cd8:	e13ffe15 	stw	r4,-8(fp)
   10cdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10ce0:	000530fa 	rdctl	r2,ienable
   10ce4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10ce8:	00c00044 	movi	r3,1
   10cec:	e0bfff17 	ldw	r2,-4(fp)
   10cf0:	1884983a 	sll	r2,r3,r2
   10cf4:	1007883a 	mov	r3,r2
   10cf8:	e0bffd17 	ldw	r2,-12(fp)
   10cfc:	1884703a 	and	r2,r3,r2
   10d00:	1004c03a 	cmpne	r2,r2,zero
   10d04:	10803fcc 	andi	r2,r2,255
}
   10d08:	e037883a 	mov	sp,fp
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00104 	addi	sp,sp,4
   10d14:	f800283a 	ret

00010d18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10d18:	defff504 	addi	sp,sp,-44
   10d1c:	dfc00a15 	stw	ra,40(sp)
   10d20:	df000915 	stw	fp,36(sp)
   10d24:	df000904 	addi	fp,sp,36
   10d28:	e13ffc15 	stw	r4,-16(fp)
   10d2c:	e17ffd15 	stw	r5,-12(fp)
   10d30:	e1bffe15 	stw	r6,-8(fp)
   10d34:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10d38:	00bffa84 	movi	r2,-22
   10d3c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10d48:	e0bff817 	ldw	r2,-32(fp)
   10d4c:	10800808 	cmpgei	r2,r2,32
   10d50:	1000271e 	bne	r2,zero,10df0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d54:	0005303a 	rdctl	r2,status
   10d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d5c:	e0fffb17 	ldw	r3,-20(fp)
   10d60:	00bfff84 	movi	r2,-2
   10d64:	1884703a 	and	r2,r3,r2
   10d68:	1001703a 	wrctl	status,r2
  
  return context;
   10d6c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10d70:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10d74:	00800074 	movhi	r2,1
   10d78:	1096bd04 	addi	r2,r2,23284
   10d7c:	e0fff817 	ldw	r3,-32(fp)
   10d80:	180690fa 	slli	r3,r3,3
   10d84:	10c5883a 	add	r2,r2,r3
   10d88:	e0fffe17 	ldw	r3,-8(fp)
   10d8c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10d90:	00800074 	movhi	r2,1
   10d94:	1096bd04 	addi	r2,r2,23284
   10d98:	e0fff817 	ldw	r3,-32(fp)
   10d9c:	180690fa 	slli	r3,r3,3
   10da0:	10c5883a 	add	r2,r2,r3
   10da4:	10800104 	addi	r2,r2,4
   10da8:	e0ffff17 	ldw	r3,-4(fp)
   10dac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	10000526 	beq	r2,zero,10dcc <alt_iic_isr_register+0xb4>
   10db8:	e0bff817 	ldw	r2,-32(fp)
   10dbc:	100b883a 	mov	r5,r2
   10dc0:	e13ffc17 	ldw	r4,-16(fp)
   10dc4:	0010bb80 	call	10bb8 <alt_ic_irq_enable>
   10dc8:	00000406 	br	10ddc <alt_iic_isr_register+0xc4>
   10dcc:	e0bff817 	ldw	r2,-32(fp)
   10dd0:	100b883a 	mov	r5,r2
   10dd4:	e13ffc17 	ldw	r4,-16(fp)
   10dd8:	0010c400 	call	10c40 <alt_ic_irq_disable>
   10ddc:	e0bff715 	stw	r2,-36(fp)
   10de0:	e0bffa17 	ldw	r2,-24(fp)
   10de4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10de8:	e0bff917 	ldw	r2,-28(fp)
   10dec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10df0:	e0bff717 	ldw	r2,-36(fp)
}
   10df4:	e037883a 	mov	sp,fp
   10df8:	dfc00117 	ldw	ra,4(sp)
   10dfc:	df000017 	ldw	fp,0(sp)
   10e00:	dec00204 	addi	sp,sp,8
   10e04:	f800283a 	ret

00010e08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10e08:	defff804 	addi	sp,sp,-32
   10e0c:	dfc00715 	stw	ra,28(sp)
   10e10:	df000615 	stw	fp,24(sp)
   10e14:	dc000515 	stw	r16,20(sp)
   10e18:	df000604 	addi	fp,sp,24
   10e1c:	e13ffb15 	stw	r4,-20(fp)
   10e20:	e17ffc15 	stw	r5,-16(fp)
   10e24:	e1bffd15 	stw	r6,-12(fp)
   10e28:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10e2c:	e1bffe17 	ldw	r6,-8(fp)
   10e30:	e17ffd17 	ldw	r5,-12(fp)
   10e34:	e13ffc17 	ldw	r4,-16(fp)
   10e38:	00110900 	call	11090 <open>
   10e3c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10e40:	e0bffa17 	ldw	r2,-24(fp)
   10e44:	10002216 	blt	r2,zero,10ed0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10e48:	04000074 	movhi	r16,1
   10e4c:	840b6104 	addi	r16,r16,11652
   10e50:	e0bffa17 	ldw	r2,-24(fp)
   10e54:	01400304 	movi	r5,12
   10e58:	1009883a 	mov	r4,r2
   10e5c:	000c9540 	call	c954 <__mulsi3>
   10e60:	8085883a 	add	r2,r16,r2
   10e64:	10c00017 	ldw	r3,0(r2)
   10e68:	e0bffb17 	ldw	r2,-20(fp)
   10e6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e70:	04000074 	movhi	r16,1
   10e74:	840b6104 	addi	r16,r16,11652
   10e78:	e0bffa17 	ldw	r2,-24(fp)
   10e7c:	01400304 	movi	r5,12
   10e80:	1009883a 	mov	r4,r2
   10e84:	000c9540 	call	c954 <__mulsi3>
   10e88:	8085883a 	add	r2,r16,r2
   10e8c:	10800104 	addi	r2,r2,4
   10e90:	10c00017 	ldw	r3,0(r2)
   10e94:	e0bffb17 	ldw	r2,-20(fp)
   10e98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10e9c:	04000074 	movhi	r16,1
   10ea0:	840b6104 	addi	r16,r16,11652
   10ea4:	e0bffa17 	ldw	r2,-24(fp)
   10ea8:	01400304 	movi	r5,12
   10eac:	1009883a 	mov	r4,r2
   10eb0:	000c9540 	call	c954 <__mulsi3>
   10eb4:	8085883a 	add	r2,r16,r2
   10eb8:	10800204 	addi	r2,r2,8
   10ebc:	10c00017 	ldw	r3,0(r2)
   10ec0:	e0bffb17 	ldw	r2,-20(fp)
   10ec4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10ec8:	e13ffa17 	ldw	r4,-24(fp)
   10ecc:	000f9440 	call	f944 <alt_release_fd>
  }
} 
   10ed0:	0001883a 	nop
   10ed4:	e6ffff04 	addi	sp,fp,-4
   10ed8:	dfc00217 	ldw	ra,8(sp)
   10edc:	df000117 	ldw	fp,4(sp)
   10ee0:	dc000017 	ldw	r16,0(sp)
   10ee4:	dec00304 	addi	sp,sp,12
   10ee8:	f800283a 	ret

00010eec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10eec:	defffb04 	addi	sp,sp,-20
   10ef0:	dfc00415 	stw	ra,16(sp)
   10ef4:	df000315 	stw	fp,12(sp)
   10ef8:	df000304 	addi	fp,sp,12
   10efc:	e13ffd15 	stw	r4,-12(fp)
   10f00:	e17ffe15 	stw	r5,-8(fp)
   10f04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10f08:	01c07fc4 	movi	r7,511
   10f0c:	01800044 	movi	r6,1
   10f10:	e17ffd17 	ldw	r5,-12(fp)
   10f14:	01000074 	movhi	r4,1
   10f18:	210b6404 	addi	r4,r4,11664
   10f1c:	0010e080 	call	10e08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10f20:	01c07fc4 	movi	r7,511
   10f24:	000d883a 	mov	r6,zero
   10f28:	e17ffe17 	ldw	r5,-8(fp)
   10f2c:	01000074 	movhi	r4,1
   10f30:	210b6104 	addi	r4,r4,11652
   10f34:	0010e080 	call	10e08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10f38:	01c07fc4 	movi	r7,511
   10f3c:	01800044 	movi	r6,1
   10f40:	e17fff17 	ldw	r5,-4(fp)
   10f44:	01000074 	movhi	r4,1
   10f48:	210b6704 	addi	r4,r4,11676
   10f4c:	0010e080 	call	10e08 <alt_open_fd>
}  
   10f50:	0001883a 	nop
   10f54:	e037883a 	mov	sp,fp
   10f58:	dfc00117 	ldw	ra,4(sp)
   10f5c:	df000017 	ldw	fp,0(sp)
   10f60:	dec00204 	addi	sp,sp,8
   10f64:	f800283a 	ret

00010f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f68:	defffe04 	addi	sp,sp,-8
   10f6c:	dfc00115 	stw	ra,4(sp)
   10f70:	df000015 	stw	fp,0(sp)
   10f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f78:	d0a00b17 	ldw	r2,-32724(gp)
   10f7c:	10000326 	beq	r2,zero,10f8c <alt_get_errno+0x24>
   10f80:	d0a00b17 	ldw	r2,-32724(gp)
   10f84:	103ee83a 	callr	r2
   10f88:	00000106 	br	10f90 <alt_get_errno+0x28>
   10f8c:	d0a6d204 	addi	r2,gp,-25784
}
   10f90:	e037883a 	mov	sp,fp
   10f94:	dfc00117 	ldw	ra,4(sp)
   10f98:	df000017 	ldw	fp,0(sp)
   10f9c:	dec00204 	addi	sp,sp,8
   10fa0:	f800283a 	ret

00010fa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10fa4:	defffb04 	addi	sp,sp,-20
   10fa8:	dfc00415 	stw	ra,16(sp)
   10fac:	df000315 	stw	fp,12(sp)
   10fb0:	dc000215 	stw	r16,8(sp)
   10fb4:	df000304 	addi	fp,sp,12
   10fb8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10fbc:	e0bffe17 	ldw	r2,-8(fp)
   10fc0:	10800217 	ldw	r2,8(r2)
   10fc4:	10d00034 	orhi	r3,r2,16384
   10fc8:	e0bffe17 	ldw	r2,-8(fp)
   10fcc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10fd0:	e03ffd15 	stw	zero,-12(fp)
   10fd4:	00002306 	br	11064 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10fd8:	04000074 	movhi	r16,1
   10fdc:	840b6104 	addi	r16,r16,11652
   10fe0:	e0bffd17 	ldw	r2,-12(fp)
   10fe4:	01400304 	movi	r5,12
   10fe8:	1009883a 	mov	r4,r2
   10fec:	000c9540 	call	c954 <__mulsi3>
   10ff0:	8085883a 	add	r2,r16,r2
   10ff4:	10c00017 	ldw	r3,0(r2)
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	10800017 	ldw	r2,0(r2)
   11000:	1880151e 	bne	r3,r2,11058 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11004:	04000074 	movhi	r16,1
   11008:	840b6104 	addi	r16,r16,11652
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	01400304 	movi	r5,12
   11014:	1009883a 	mov	r4,r2
   11018:	000c9540 	call	c954 <__mulsi3>
   1101c:	8085883a 	add	r2,r16,r2
   11020:	10800204 	addi	r2,r2,8
   11024:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11028:	10000b0e 	bge	r2,zero,11058 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1102c:	01400304 	movi	r5,12
   11030:	e13ffd17 	ldw	r4,-12(fp)
   11034:	000c9540 	call	c954 <__mulsi3>
   11038:	1007883a 	mov	r3,r2
   1103c:	00800074 	movhi	r2,1
   11040:	108b6104 	addi	r2,r2,11652
   11044:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11048:	e0bffe17 	ldw	r2,-8(fp)
   1104c:	18800226 	beq	r3,r2,11058 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11050:	00bffcc4 	movi	r2,-13
   11054:	00000806 	br	11078 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11058:	e0bffd17 	ldw	r2,-12(fp)
   1105c:	10800044 	addi	r2,r2,1
   11060:	e0bffd15 	stw	r2,-12(fp)
   11064:	d0a00a17 	ldw	r2,-32728(gp)
   11068:	1007883a 	mov	r3,r2
   1106c:	e0bffd17 	ldw	r2,-12(fp)
   11070:	18bfd92e 	bgeu	r3,r2,10fd8 <__alt_mem_onchip_memory2_0+0xf7010fd8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11074:	0005883a 	mov	r2,zero
}
   11078:	e6ffff04 	addi	sp,fp,-4
   1107c:	dfc00217 	ldw	ra,8(sp)
   11080:	df000117 	ldw	fp,4(sp)
   11084:	dc000017 	ldw	r16,0(sp)
   11088:	dec00304 	addi	sp,sp,12
   1108c:	f800283a 	ret

00011090 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11090:	defff604 	addi	sp,sp,-40
   11094:	dfc00915 	stw	ra,36(sp)
   11098:	df000815 	stw	fp,32(sp)
   1109c:	df000804 	addi	fp,sp,32
   110a0:	e13ffd15 	stw	r4,-12(fp)
   110a4:	e17ffe15 	stw	r5,-8(fp)
   110a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   110ac:	00bfffc4 	movi	r2,-1
   110b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   110b4:	00bffb44 	movi	r2,-19
   110b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   110bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   110c0:	d1600804 	addi	r5,gp,-32736
   110c4:	e13ffd17 	ldw	r4,-12(fp)
   110c8:	00113b40 	call	113b4 <alt_find_dev>
   110cc:	e0bff815 	stw	r2,-32(fp)
   110d0:	e0bff817 	ldw	r2,-32(fp)
   110d4:	1000051e 	bne	r2,zero,110ec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   110d8:	e13ffd17 	ldw	r4,-12(fp)
   110dc:	00114440 	call	11444 <alt_find_file>
   110e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   110e4:	00800044 	movi	r2,1
   110e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   110ec:	e0bff817 	ldw	r2,-32(fp)
   110f0:	10002b26 	beq	r2,zero,111a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   110f4:	e13ff817 	ldw	r4,-32(fp)
   110f8:	001154c0 	call	1154c <alt_get_fd>
   110fc:	e0bff915 	stw	r2,-28(fp)
   11100:	e0bff917 	ldw	r2,-28(fp)
   11104:	1000030e 	bge	r2,zero,11114 <open+0x84>
    {
      status = index;
   11108:	e0bff917 	ldw	r2,-28(fp)
   1110c:	e0bffa15 	stw	r2,-24(fp)
   11110:	00002506 	br	111a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11114:	01400304 	movi	r5,12
   11118:	e13ff917 	ldw	r4,-28(fp)
   1111c:	000c9540 	call	c954 <__mulsi3>
   11120:	1007883a 	mov	r3,r2
   11124:	00800074 	movhi	r2,1
   11128:	108b6104 	addi	r2,r2,11652
   1112c:	1885883a 	add	r2,r3,r2
   11130:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11134:	e0fffe17 	ldw	r3,-8(fp)
   11138:	00900034 	movhi	r2,16384
   1113c:	10bfffc4 	addi	r2,r2,-1
   11140:	1886703a 	and	r3,r3,r2
   11144:	e0bffc17 	ldw	r2,-16(fp)
   11148:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1114c:	e0bffb17 	ldw	r2,-20(fp)
   11150:	1000051e 	bne	r2,zero,11168 <open+0xd8>
   11154:	e13ffc17 	ldw	r4,-16(fp)
   11158:	0010fa40 	call	10fa4 <alt_file_locked>
   1115c:	e0bffa15 	stw	r2,-24(fp)
   11160:	e0bffa17 	ldw	r2,-24(fp)
   11164:	10001016 	blt	r2,zero,111a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11168:	e0bff817 	ldw	r2,-32(fp)
   1116c:	10800317 	ldw	r2,12(r2)
   11170:	10000826 	beq	r2,zero,11194 <open+0x104>
   11174:	e0bff817 	ldw	r2,-32(fp)
   11178:	10800317 	ldw	r2,12(r2)
   1117c:	e1ffff17 	ldw	r7,-4(fp)
   11180:	e1bffe17 	ldw	r6,-8(fp)
   11184:	e17ffd17 	ldw	r5,-12(fp)
   11188:	e13ffc17 	ldw	r4,-16(fp)
   1118c:	103ee83a 	callr	r2
   11190:	00000106 	br	11198 <open+0x108>
   11194:	0005883a 	mov	r2,zero
   11198:	e0bffa15 	stw	r2,-24(fp)
   1119c:	00000206 	br	111a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   111a0:	00bffb44 	movi	r2,-19
   111a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   111a8:	e0bffa17 	ldw	r2,-24(fp)
   111ac:	1000090e 	bge	r2,zero,111d4 <open+0x144>
  {
    alt_release_fd (index);  
   111b0:	e13ff917 	ldw	r4,-28(fp)
   111b4:	000f9440 	call	f944 <alt_release_fd>
    ALT_ERRNO = -status;
   111b8:	0010f680 	call	10f68 <alt_get_errno>
   111bc:	1007883a 	mov	r3,r2
   111c0:	e0bffa17 	ldw	r2,-24(fp)
   111c4:	0085c83a 	sub	r2,zero,r2
   111c8:	18800015 	stw	r2,0(r3)
    return -1;
   111cc:	00bfffc4 	movi	r2,-1
   111d0:	00000106 	br	111d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   111d4:	e0bff917 	ldw	r2,-28(fp)
}
   111d8:	e037883a 	mov	sp,fp
   111dc:	dfc00117 	ldw	ra,4(sp)
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00204 	addi	sp,sp,8
   111e8:	f800283a 	ret

000111ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   111ec:	defffa04 	addi	sp,sp,-24
   111f0:	df000515 	stw	fp,20(sp)
   111f4:	df000504 	addi	fp,sp,20
   111f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111fc:	0005303a 	rdctl	r2,status
   11200:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11204:	e0fffc17 	ldw	r3,-16(fp)
   11208:	00bfff84 	movi	r2,-2
   1120c:	1884703a 	and	r2,r3,r2
   11210:	1001703a 	wrctl	status,r2
  
  return context;
   11214:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11218:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1121c:	e0bfff17 	ldw	r2,-4(fp)
   11220:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11224:	e0bffd17 	ldw	r2,-12(fp)
   11228:	10800017 	ldw	r2,0(r2)
   1122c:	e0fffd17 	ldw	r3,-12(fp)
   11230:	18c00117 	ldw	r3,4(r3)
   11234:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11238:	e0bffd17 	ldw	r2,-12(fp)
   1123c:	10800117 	ldw	r2,4(r2)
   11240:	e0fffd17 	ldw	r3,-12(fp)
   11244:	18c00017 	ldw	r3,0(r3)
   11248:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1124c:	e0bffd17 	ldw	r2,-12(fp)
   11250:	e0fffd17 	ldw	r3,-12(fp)
   11254:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11258:	e0bffd17 	ldw	r2,-12(fp)
   1125c:	e0fffd17 	ldw	r3,-12(fp)
   11260:	10c00015 	stw	r3,0(r2)
   11264:	e0bffb17 	ldw	r2,-20(fp)
   11268:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1126c:	e0bffe17 	ldw	r2,-8(fp)
   11270:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11274:	0001883a 	nop
   11278:	e037883a 	mov	sp,fp
   1127c:	df000017 	ldw	fp,0(sp)
   11280:	dec00104 	addi	sp,sp,4
   11284:	f800283a 	ret

00011288 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11288:	defffb04 	addi	sp,sp,-20
   1128c:	dfc00415 	stw	ra,16(sp)
   11290:	df000315 	stw	fp,12(sp)
   11294:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11298:	d0a00e17 	ldw	r2,-32712(gp)
   1129c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   112a0:	d0a6d817 	ldw	r2,-25760(gp)
   112a4:	10800044 	addi	r2,r2,1
   112a8:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   112ac:	00002e06 	br	11368 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   112b0:	e0bffd17 	ldw	r2,-12(fp)
   112b4:	10800017 	ldw	r2,0(r2)
   112b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   112bc:	e0bffd17 	ldw	r2,-12(fp)
   112c0:	10800403 	ldbu	r2,16(r2)
   112c4:	10803fcc 	andi	r2,r2,255
   112c8:	10000426 	beq	r2,zero,112dc <alt_tick+0x54>
   112cc:	d0a6d817 	ldw	r2,-25760(gp)
   112d0:	1000021e 	bne	r2,zero,112dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   112d4:	e0bffd17 	ldw	r2,-12(fp)
   112d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   112dc:	e0bffd17 	ldw	r2,-12(fp)
   112e0:	10800217 	ldw	r2,8(r2)
   112e4:	d0e6d817 	ldw	r3,-25760(gp)
   112e8:	18801d36 	bltu	r3,r2,11360 <alt_tick+0xd8>
   112ec:	e0bffd17 	ldw	r2,-12(fp)
   112f0:	10800403 	ldbu	r2,16(r2)
   112f4:	10803fcc 	andi	r2,r2,255
   112f8:	1000191e 	bne	r2,zero,11360 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	10800317 	ldw	r2,12(r2)
   11304:	e0fffd17 	ldw	r3,-12(fp)
   11308:	18c00517 	ldw	r3,20(r3)
   1130c:	1809883a 	mov	r4,r3
   11310:	103ee83a 	callr	r2
   11314:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11318:	e0bfff17 	ldw	r2,-4(fp)
   1131c:	1000031e 	bne	r2,zero,1132c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11320:	e13ffd17 	ldw	r4,-12(fp)
   11324:	00111ec0 	call	111ec <alt_alarm_stop>
   11328:	00000d06 	br	11360 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1132c:	e0bffd17 	ldw	r2,-12(fp)
   11330:	10c00217 	ldw	r3,8(r2)
   11334:	e0bfff17 	ldw	r2,-4(fp)
   11338:	1887883a 	add	r3,r3,r2
   1133c:	e0bffd17 	ldw	r2,-12(fp)
   11340:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11344:	e0bffd17 	ldw	r2,-12(fp)
   11348:	10c00217 	ldw	r3,8(r2)
   1134c:	d0a6d817 	ldw	r2,-25760(gp)
   11350:	1880032e 	bgeu	r3,r2,11360 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11354:	e0bffd17 	ldw	r2,-12(fp)
   11358:	00c00044 	movi	r3,1
   1135c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11360:	e0bffe17 	ldw	r2,-8(fp)
   11364:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11368:	e0fffd17 	ldw	r3,-12(fp)
   1136c:	d0a00e04 	addi	r2,gp,-32712
   11370:	18bfcf1e 	bne	r3,r2,112b0 <__alt_mem_onchip_memory2_0+0xf70112b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11374:	0001883a 	nop
}
   11378:	0001883a 	nop
   1137c:	e037883a 	mov	sp,fp
   11380:	dfc00117 	ldw	ra,4(sp)
   11384:	df000017 	ldw	fp,0(sp)
   11388:	dec00204 	addi	sp,sp,8
   1138c:	f800283a 	ret

00011390 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11390:	deffff04 	addi	sp,sp,-4
   11394:	df000015 	stw	fp,0(sp)
   11398:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1139c:	000170fa 	wrctl	ienable,zero
}
   113a0:	0001883a 	nop
   113a4:	e037883a 	mov	sp,fp
   113a8:	df000017 	ldw	fp,0(sp)
   113ac:	dec00104 	addi	sp,sp,4
   113b0:	f800283a 	ret

000113b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   113b4:	defffa04 	addi	sp,sp,-24
   113b8:	dfc00515 	stw	ra,20(sp)
   113bc:	df000415 	stw	fp,16(sp)
   113c0:	df000404 	addi	fp,sp,16
   113c4:	e13ffe15 	stw	r4,-8(fp)
   113c8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   113cc:	e0bfff17 	ldw	r2,-4(fp)
   113d0:	10800017 	ldw	r2,0(r2)
   113d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   113d8:	e13ffe17 	ldw	r4,-8(fp)
   113dc:	00024200 	call	2420 <strlen>
   113e0:	10800044 	addi	r2,r2,1
   113e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   113e8:	00000d06 	br	11420 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   113ec:	e0bffc17 	ldw	r2,-16(fp)
   113f0:	10800217 	ldw	r2,8(r2)
   113f4:	e0fffd17 	ldw	r3,-12(fp)
   113f8:	180d883a 	mov	r6,r3
   113fc:	e17ffe17 	ldw	r5,-8(fp)
   11400:	1009883a 	mov	r4,r2
   11404:	00116f80 	call	116f8 <memcmp>
   11408:	1000021e 	bne	r2,zero,11414 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1140c:	e0bffc17 	ldw	r2,-16(fp)
   11410:	00000706 	br	11430 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11414:	e0bffc17 	ldw	r2,-16(fp)
   11418:	10800017 	ldw	r2,0(r2)
   1141c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11420:	e0fffc17 	ldw	r3,-16(fp)
   11424:	e0bfff17 	ldw	r2,-4(fp)
   11428:	18bff01e 	bne	r3,r2,113ec <__alt_mem_onchip_memory2_0+0xf70113ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1142c:	0005883a 	mov	r2,zero
}
   11430:	e037883a 	mov	sp,fp
   11434:	dfc00117 	ldw	ra,4(sp)
   11438:	df000017 	ldw	fp,0(sp)
   1143c:	dec00204 	addi	sp,sp,8
   11440:	f800283a 	ret

00011444 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11444:	defffb04 	addi	sp,sp,-20
   11448:	dfc00415 	stw	ra,16(sp)
   1144c:	df000315 	stw	fp,12(sp)
   11450:	df000304 	addi	fp,sp,12
   11454:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11458:	d0a00617 	ldw	r2,-32744(gp)
   1145c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11460:	00003106 	br	11528 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	10800217 	ldw	r2,8(r2)
   1146c:	1009883a 	mov	r4,r2
   11470:	00024200 	call	2420 <strlen>
   11474:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11478:	e0bffd17 	ldw	r2,-12(fp)
   1147c:	10c00217 	ldw	r3,8(r2)
   11480:	e0bffe17 	ldw	r2,-8(fp)
   11484:	10bfffc4 	addi	r2,r2,-1
   11488:	1885883a 	add	r2,r3,r2
   1148c:	10800003 	ldbu	r2,0(r2)
   11490:	10803fcc 	andi	r2,r2,255
   11494:	1080201c 	xori	r2,r2,128
   11498:	10bfe004 	addi	r2,r2,-128
   1149c:	10800bd8 	cmpnei	r2,r2,47
   114a0:	1000031e 	bne	r2,zero,114b0 <alt_find_file+0x6c>
    {
      len -= 1;
   114a4:	e0bffe17 	ldw	r2,-8(fp)
   114a8:	10bfffc4 	addi	r2,r2,-1
   114ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   114b0:	e0bffe17 	ldw	r2,-8(fp)
   114b4:	e0ffff17 	ldw	r3,-4(fp)
   114b8:	1885883a 	add	r2,r3,r2
   114bc:	10800003 	ldbu	r2,0(r2)
   114c0:	10803fcc 	andi	r2,r2,255
   114c4:	1080201c 	xori	r2,r2,128
   114c8:	10bfe004 	addi	r2,r2,-128
   114cc:	10800be0 	cmpeqi	r2,r2,47
   114d0:	1000081e 	bne	r2,zero,114f4 <alt_find_file+0xb0>
   114d4:	e0bffe17 	ldw	r2,-8(fp)
   114d8:	e0ffff17 	ldw	r3,-4(fp)
   114dc:	1885883a 	add	r2,r3,r2
   114e0:	10800003 	ldbu	r2,0(r2)
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	1080201c 	xori	r2,r2,128
   114ec:	10bfe004 	addi	r2,r2,-128
   114f0:	10000a1e 	bne	r2,zero,1151c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   114f4:	e0bffd17 	ldw	r2,-12(fp)
   114f8:	10800217 	ldw	r2,8(r2)
   114fc:	e0fffe17 	ldw	r3,-8(fp)
   11500:	180d883a 	mov	r6,r3
   11504:	e17fff17 	ldw	r5,-4(fp)
   11508:	1009883a 	mov	r4,r2
   1150c:	00116f80 	call	116f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11510:	1000021e 	bne	r2,zero,1151c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	00000706 	br	11538 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	10800017 	ldw	r2,0(r2)
   11524:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11528:	e0fffd17 	ldw	r3,-12(fp)
   1152c:	d0a00604 	addi	r2,gp,-32744
   11530:	18bfcc1e 	bne	r3,r2,11464 <__alt_mem_onchip_memory2_0+0xf7011464>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11534:	0005883a 	mov	r2,zero
}
   11538:	e037883a 	mov	sp,fp
   1153c:	dfc00117 	ldw	ra,4(sp)
   11540:	df000017 	ldw	fp,0(sp)
   11544:	dec00204 	addi	sp,sp,8
   11548:	f800283a 	ret

0001154c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1154c:	defffa04 	addi	sp,sp,-24
   11550:	dfc00515 	stw	ra,20(sp)
   11554:	df000415 	stw	fp,16(sp)
   11558:	dc000315 	stw	r16,12(sp)
   1155c:	df000404 	addi	fp,sp,16
   11560:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11564:	00bffa04 	movi	r2,-24
   11568:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1156c:	e03ffc15 	stw	zero,-16(fp)
   11570:	00001d06 	br	115e8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11574:	04000074 	movhi	r16,1
   11578:	840b6104 	addi	r16,r16,11652
   1157c:	e0bffc17 	ldw	r2,-16(fp)
   11580:	01400304 	movi	r5,12
   11584:	1009883a 	mov	r4,r2
   11588:	000c9540 	call	c954 <__mulsi3>
   1158c:	8085883a 	add	r2,r16,r2
   11590:	10800017 	ldw	r2,0(r2)
   11594:	1000111e 	bne	r2,zero,115dc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11598:	04000074 	movhi	r16,1
   1159c:	840b6104 	addi	r16,r16,11652
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	01400304 	movi	r5,12
   115a8:	1009883a 	mov	r4,r2
   115ac:	000c9540 	call	c954 <__mulsi3>
   115b0:	8085883a 	add	r2,r16,r2
   115b4:	e0fffe17 	ldw	r3,-8(fp)
   115b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   115bc:	d0e00a17 	ldw	r3,-32728(gp)
   115c0:	e0bffc17 	ldw	r2,-16(fp)
   115c4:	1880020e 	bge	r3,r2,115d0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   115c8:	e0bffc17 	ldw	r2,-16(fp)
   115cc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   115d0:	e0bffc17 	ldw	r2,-16(fp)
   115d4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   115d8:	00000606 	br	115f4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   115dc:	e0bffc17 	ldw	r2,-16(fp)
   115e0:	10800044 	addi	r2,r2,1
   115e4:	e0bffc15 	stw	r2,-16(fp)
   115e8:	e0bffc17 	ldw	r2,-16(fp)
   115ec:	10800810 	cmplti	r2,r2,32
   115f0:	103fe01e 	bne	r2,zero,11574 <__alt_mem_onchip_memory2_0+0xf7011574>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   115f4:	e0bffd17 	ldw	r2,-12(fp)
}
   115f8:	e6ffff04 	addi	sp,fp,-4
   115fc:	dfc00217 	ldw	ra,8(sp)
   11600:	df000117 	ldw	fp,4(sp)
   11604:	dc000017 	ldw	r16,0(sp)
   11608:	dec00304 	addi	sp,sp,12
   1160c:	f800283a 	ret

00011610 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11610:	defffe04 	addi	sp,sp,-8
   11614:	df000115 	stw	fp,4(sp)
   11618:	df000104 	addi	fp,sp,4
   1161c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11620:	e0bfff17 	ldw	r2,-4(fp)
   11624:	10bffe84 	addi	r2,r2,-6
   11628:	10c00428 	cmpgeui	r3,r2,16
   1162c:	18001a1e 	bne	r3,zero,11698 <alt_exception_cause_generated_bad_addr+0x88>
   11630:	100690ba 	slli	r3,r2,2
   11634:	00800074 	movhi	r2,1
   11638:	10859204 	addi	r2,r2,5704
   1163c:	1885883a 	add	r2,r3,r2
   11640:	10800017 	ldw	r2,0(r2)
   11644:	1000683a 	jmp	r2
   11648:	00011688 	cmpgei	zero,zero,1114
   1164c:	00011688 	cmpgei	zero,zero,1114
   11650:	00011698 	cmpnei	zero,zero,1114
   11654:	00011698 	cmpnei	zero,zero,1114
   11658:	00011698 	cmpnei	zero,zero,1114
   1165c:	00011688 	cmpgei	zero,zero,1114
   11660:	00011690 	cmplti	zero,zero,1114
   11664:	00011698 	cmpnei	zero,zero,1114
   11668:	00011688 	cmpgei	zero,zero,1114
   1166c:	00011688 	cmpgei	zero,zero,1114
   11670:	00011698 	cmpnei	zero,zero,1114
   11674:	00011688 	cmpgei	zero,zero,1114
   11678:	00011690 	cmplti	zero,zero,1114
   1167c:	00011698 	cmpnei	zero,zero,1114
   11680:	00011698 	cmpnei	zero,zero,1114
   11684:	00011688 	cmpgei	zero,zero,1114
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11688:	00800044 	movi	r2,1
   1168c:	00000306 	br	1169c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11690:	0005883a 	mov	r2,zero
   11694:	00000106 	br	1169c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11698:	0005883a 	mov	r2,zero
  }
}
   1169c:	e037883a 	mov	sp,fp
   116a0:	df000017 	ldw	fp,0(sp)
   116a4:	dec00104 	addi	sp,sp,4
   116a8:	f800283a 	ret

000116ac <atexit>:
   116ac:	200b883a 	mov	r5,r4
   116b0:	000f883a 	mov	r7,zero
   116b4:	000d883a 	mov	r6,zero
   116b8:	0009883a 	mov	r4,zero
   116bc:	00117741 	jmpi	11774 <__register_exitproc>

000116c0 <exit>:
   116c0:	defffe04 	addi	sp,sp,-8
   116c4:	000b883a 	mov	r5,zero
   116c8:	dc000015 	stw	r16,0(sp)
   116cc:	dfc00115 	stw	ra,4(sp)
   116d0:	2021883a 	mov	r16,r4
   116d4:	001188c0 	call	1188c <__call_exitprocs>
   116d8:	00800074 	movhi	r2,1
   116dc:	108fd904 	addi	r2,r2,16228
   116e0:	11000017 	ldw	r4,0(r2)
   116e4:	20800f17 	ldw	r2,60(r4)
   116e8:	10000126 	beq	r2,zero,116f0 <exit+0x30>
   116ec:	103ee83a 	callr	r2
   116f0:	8009883a 	mov	r4,r16
   116f4:	0011a0c0 	call	11a0c <_exit>

000116f8 <memcmp>:
   116f8:	01c000c4 	movi	r7,3
   116fc:	3980192e 	bgeu	r7,r6,11764 <memcmp+0x6c>
   11700:	2144b03a 	or	r2,r4,r5
   11704:	11c4703a 	and	r2,r2,r7
   11708:	10000f26 	beq	r2,zero,11748 <memcmp+0x50>
   1170c:	20800003 	ldbu	r2,0(r4)
   11710:	28c00003 	ldbu	r3,0(r5)
   11714:	10c0151e 	bne	r2,r3,1176c <memcmp+0x74>
   11718:	31bfff84 	addi	r6,r6,-2
   1171c:	01ffffc4 	movi	r7,-1
   11720:	00000406 	br	11734 <memcmp+0x3c>
   11724:	20800003 	ldbu	r2,0(r4)
   11728:	28c00003 	ldbu	r3,0(r5)
   1172c:	31bfffc4 	addi	r6,r6,-1
   11730:	10c00e1e 	bne	r2,r3,1176c <memcmp+0x74>
   11734:	21000044 	addi	r4,r4,1
   11738:	29400044 	addi	r5,r5,1
   1173c:	31fff91e 	bne	r6,r7,11724 <__alt_mem_onchip_memory2_0+0xf7011724>
   11740:	0005883a 	mov	r2,zero
   11744:	f800283a 	ret
   11748:	20c00017 	ldw	r3,0(r4)
   1174c:	28800017 	ldw	r2,0(r5)
   11750:	18bfee1e 	bne	r3,r2,1170c <__alt_mem_onchip_memory2_0+0xf701170c>
   11754:	31bfff04 	addi	r6,r6,-4
   11758:	21000104 	addi	r4,r4,4
   1175c:	29400104 	addi	r5,r5,4
   11760:	39bff936 	bltu	r7,r6,11748 <__alt_mem_onchip_memory2_0+0xf7011748>
   11764:	303fe91e 	bne	r6,zero,1170c <__alt_mem_onchip_memory2_0+0xf701170c>
   11768:	003ff506 	br	11740 <__alt_mem_onchip_memory2_0+0xf7011740>
   1176c:	10c5c83a 	sub	r2,r2,r3
   11770:	f800283a 	ret

00011774 <__register_exitproc>:
   11774:	defffa04 	addi	sp,sp,-24
   11778:	dc000315 	stw	r16,12(sp)
   1177c:	04000074 	movhi	r16,1
   11780:	840fd904 	addi	r16,r16,16228
   11784:	80c00017 	ldw	r3,0(r16)
   11788:	dc400415 	stw	r17,16(sp)
   1178c:	dfc00515 	stw	ra,20(sp)
   11790:	18805217 	ldw	r2,328(r3)
   11794:	2023883a 	mov	r17,r4
   11798:	10003726 	beq	r2,zero,11878 <__register_exitproc+0x104>
   1179c:	10c00117 	ldw	r3,4(r2)
   117a0:	010007c4 	movi	r4,31
   117a4:	20c00e16 	blt	r4,r3,117e0 <__register_exitproc+0x6c>
   117a8:	1a000044 	addi	r8,r3,1
   117ac:	8800221e 	bne	r17,zero,11838 <__register_exitproc+0xc4>
   117b0:	18c00084 	addi	r3,r3,2
   117b4:	18c7883a 	add	r3,r3,r3
   117b8:	18c7883a 	add	r3,r3,r3
   117bc:	12000115 	stw	r8,4(r2)
   117c0:	10c7883a 	add	r3,r2,r3
   117c4:	19400015 	stw	r5,0(r3)
   117c8:	0005883a 	mov	r2,zero
   117cc:	dfc00517 	ldw	ra,20(sp)
   117d0:	dc400417 	ldw	r17,16(sp)
   117d4:	dc000317 	ldw	r16,12(sp)
   117d8:	dec00604 	addi	sp,sp,24
   117dc:	f800283a 	ret
   117e0:	00800034 	movhi	r2,0
   117e4:	10800004 	addi	r2,r2,0
   117e8:	10002626 	beq	r2,zero,11884 <__register_exitproc+0x110>
   117ec:	01006404 	movi	r4,400
   117f0:	d9400015 	stw	r5,0(sp)
   117f4:	d9800115 	stw	r6,4(sp)
   117f8:	d9c00215 	stw	r7,8(sp)
   117fc:	00000000 	call	0 <__alt_mem_sdram>
   11800:	d9400017 	ldw	r5,0(sp)
   11804:	d9800117 	ldw	r6,4(sp)
   11808:	d9c00217 	ldw	r7,8(sp)
   1180c:	10001d26 	beq	r2,zero,11884 <__register_exitproc+0x110>
   11810:	81000017 	ldw	r4,0(r16)
   11814:	10000115 	stw	zero,4(r2)
   11818:	02000044 	movi	r8,1
   1181c:	22405217 	ldw	r9,328(r4)
   11820:	0007883a 	mov	r3,zero
   11824:	12400015 	stw	r9,0(r2)
   11828:	20805215 	stw	r2,328(r4)
   1182c:	10006215 	stw	zero,392(r2)
   11830:	10006315 	stw	zero,396(r2)
   11834:	883fde26 	beq	r17,zero,117b0 <__alt_mem_onchip_memory2_0+0xf70117b0>
   11838:	18c9883a 	add	r4,r3,r3
   1183c:	2109883a 	add	r4,r4,r4
   11840:	1109883a 	add	r4,r2,r4
   11844:	21802215 	stw	r6,136(r4)
   11848:	01800044 	movi	r6,1
   1184c:	12406217 	ldw	r9,392(r2)
   11850:	30cc983a 	sll	r6,r6,r3
   11854:	4992b03a 	or	r9,r9,r6
   11858:	12406215 	stw	r9,392(r2)
   1185c:	21c04215 	stw	r7,264(r4)
   11860:	01000084 	movi	r4,2
   11864:	893fd21e 	bne	r17,r4,117b0 <__alt_mem_onchip_memory2_0+0xf70117b0>
   11868:	11006317 	ldw	r4,396(r2)
   1186c:	218cb03a 	or	r6,r4,r6
   11870:	11806315 	stw	r6,396(r2)
   11874:	003fce06 	br	117b0 <__alt_mem_onchip_memory2_0+0xf70117b0>
   11878:	18805304 	addi	r2,r3,332
   1187c:	18805215 	stw	r2,328(r3)
   11880:	003fc606 	br	1179c <__alt_mem_onchip_memory2_0+0xf701179c>
   11884:	00bfffc4 	movi	r2,-1
   11888:	003fd006 	br	117cc <__alt_mem_onchip_memory2_0+0xf70117cc>

0001188c <__call_exitprocs>:
   1188c:	defff504 	addi	sp,sp,-44
   11890:	df000915 	stw	fp,36(sp)
   11894:	dd400615 	stw	r21,24(sp)
   11898:	dc800315 	stw	r18,12(sp)
   1189c:	dfc00a15 	stw	ra,40(sp)
   118a0:	ddc00815 	stw	r23,32(sp)
   118a4:	dd800715 	stw	r22,28(sp)
   118a8:	dd000515 	stw	r20,20(sp)
   118ac:	dcc00415 	stw	r19,16(sp)
   118b0:	dc400215 	stw	r17,8(sp)
   118b4:	dc000115 	stw	r16,4(sp)
   118b8:	d9000015 	stw	r4,0(sp)
   118bc:	2839883a 	mov	fp,r5
   118c0:	04800044 	movi	r18,1
   118c4:	057fffc4 	movi	r21,-1
   118c8:	00800074 	movhi	r2,1
   118cc:	108fd904 	addi	r2,r2,16228
   118d0:	12000017 	ldw	r8,0(r2)
   118d4:	45005217 	ldw	r20,328(r8)
   118d8:	44c05204 	addi	r19,r8,328
   118dc:	a0001c26 	beq	r20,zero,11950 <__call_exitprocs+0xc4>
   118e0:	a0800117 	ldw	r2,4(r20)
   118e4:	15ffffc4 	addi	r23,r2,-1
   118e8:	b8000d16 	blt	r23,zero,11920 <__call_exitprocs+0x94>
   118ec:	14000044 	addi	r16,r2,1
   118f0:	8421883a 	add	r16,r16,r16
   118f4:	8421883a 	add	r16,r16,r16
   118f8:	84402004 	addi	r17,r16,128
   118fc:	a463883a 	add	r17,r20,r17
   11900:	a421883a 	add	r16,r20,r16
   11904:	e0001e26 	beq	fp,zero,11980 <__call_exitprocs+0xf4>
   11908:	80804017 	ldw	r2,256(r16)
   1190c:	e0801c26 	beq	fp,r2,11980 <__call_exitprocs+0xf4>
   11910:	bdffffc4 	addi	r23,r23,-1
   11914:	843fff04 	addi	r16,r16,-4
   11918:	8c7fff04 	addi	r17,r17,-4
   1191c:	bd7ff91e 	bne	r23,r21,11904 <__alt_mem_onchip_memory2_0+0xf7011904>
   11920:	00800034 	movhi	r2,0
   11924:	10800004 	addi	r2,r2,0
   11928:	10000926 	beq	r2,zero,11950 <__call_exitprocs+0xc4>
   1192c:	a0800117 	ldw	r2,4(r20)
   11930:	1000301e 	bne	r2,zero,119f4 <__call_exitprocs+0x168>
   11934:	a0800017 	ldw	r2,0(r20)
   11938:	10003226 	beq	r2,zero,11a04 <__call_exitprocs+0x178>
   1193c:	a009883a 	mov	r4,r20
   11940:	98800015 	stw	r2,0(r19)
   11944:	00000000 	call	0 <__alt_mem_sdram>
   11948:	9d000017 	ldw	r20,0(r19)
   1194c:	a03fe41e 	bne	r20,zero,118e0 <__alt_mem_onchip_memory2_0+0xf70118e0>
   11950:	dfc00a17 	ldw	ra,40(sp)
   11954:	df000917 	ldw	fp,36(sp)
   11958:	ddc00817 	ldw	r23,32(sp)
   1195c:	dd800717 	ldw	r22,28(sp)
   11960:	dd400617 	ldw	r21,24(sp)
   11964:	dd000517 	ldw	r20,20(sp)
   11968:	dcc00417 	ldw	r19,16(sp)
   1196c:	dc800317 	ldw	r18,12(sp)
   11970:	dc400217 	ldw	r17,8(sp)
   11974:	dc000117 	ldw	r16,4(sp)
   11978:	dec00b04 	addi	sp,sp,44
   1197c:	f800283a 	ret
   11980:	a0800117 	ldw	r2,4(r20)
   11984:	80c00017 	ldw	r3,0(r16)
   11988:	10bfffc4 	addi	r2,r2,-1
   1198c:	15c01426 	beq	r2,r23,119e0 <__call_exitprocs+0x154>
   11990:	80000015 	stw	zero,0(r16)
   11994:	183fde26 	beq	r3,zero,11910 <__alt_mem_onchip_memory2_0+0xf7011910>
   11998:	95c8983a 	sll	r4,r18,r23
   1199c:	a0806217 	ldw	r2,392(r20)
   119a0:	a5800117 	ldw	r22,4(r20)
   119a4:	2084703a 	and	r2,r4,r2
   119a8:	10000b26 	beq	r2,zero,119d8 <__call_exitprocs+0x14c>
   119ac:	a0806317 	ldw	r2,396(r20)
   119b0:	2088703a 	and	r4,r4,r2
   119b4:	20000c1e 	bne	r4,zero,119e8 <__call_exitprocs+0x15c>
   119b8:	89400017 	ldw	r5,0(r17)
   119bc:	d9000017 	ldw	r4,0(sp)
   119c0:	183ee83a 	callr	r3
   119c4:	a0800117 	ldw	r2,4(r20)
   119c8:	15bfbf1e 	bne	r2,r22,118c8 <__alt_mem_onchip_memory2_0+0xf70118c8>
   119cc:	98800017 	ldw	r2,0(r19)
   119d0:	153fcf26 	beq	r2,r20,11910 <__alt_mem_onchip_memory2_0+0xf7011910>
   119d4:	003fbc06 	br	118c8 <__alt_mem_onchip_memory2_0+0xf70118c8>
   119d8:	183ee83a 	callr	r3
   119dc:	003ff906 	br	119c4 <__alt_mem_onchip_memory2_0+0xf70119c4>
   119e0:	a5c00115 	stw	r23,4(r20)
   119e4:	003feb06 	br	11994 <__alt_mem_onchip_memory2_0+0xf7011994>
   119e8:	89000017 	ldw	r4,0(r17)
   119ec:	183ee83a 	callr	r3
   119f0:	003ff406 	br	119c4 <__alt_mem_onchip_memory2_0+0xf70119c4>
   119f4:	a0800017 	ldw	r2,0(r20)
   119f8:	a027883a 	mov	r19,r20
   119fc:	1029883a 	mov	r20,r2
   11a00:	003fb606 	br	118dc <__alt_mem_onchip_memory2_0+0xf70118dc>
   11a04:	0005883a 	mov	r2,zero
   11a08:	003ffb06 	br	119f8 <__alt_mem_onchip_memory2_0+0xf70119f8>

00011a0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11a0c:	defffd04 	addi	sp,sp,-12
   11a10:	df000215 	stw	fp,8(sp)
   11a14:	df000204 	addi	fp,sp,8
   11a18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11a1c:	0001883a 	nop
   11a20:	e0bfff17 	ldw	r2,-4(fp)
   11a24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11a28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11a2c:	10000226 	beq	r2,zero,11a38 <_exit+0x2c>
    ALT_SIM_FAIL();
   11a30:	002af070 	cmpltui	zero,zero,43969
   11a34:	00000106 	br	11a3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11a38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11a3c:	003fff06 	br	11a3c <__alt_mem_onchip_memory2_0+0xf7011a3c>
